// Pure JavaScript solution - add override to specific certificate
function addOverride(certificateId, overrideData = {}) {
    console.log('üöÄ Adding override to certificate:', certificateId);
    
    // Create COMPLETE override structure
    const createNewOverride = (index) => ({
        TagNumber: overrideData.tagNumber || "AUTO-TAG-" + Date.now(),
        Description: overrideData.description || "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
        OverrideTypeId: (overrideData.typeId || 2).toString(),
        OverrideType: {
            Title: overrideData.typeTitle || "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ —Ç–µ—Ö.–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏"
        },
        OverrideMethodId: (overrideData.methodId || 2).toString(),
        OverrideMethod: {
            Title: overrideData.methodTitle || "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å MOS"
        },
        Comment: overrideData.comment || "",
        OverrideAppliedStateId: (overrideData.appliedStateId || 3).toString(),
        OverrideAppliedState: {
            Title: overrideData.appliedStateTitle || "MOS –≤–∫–ª—é—á–µ–Ω"
        },
        OverrideRemovedStateId: (overrideData.removedStateId || 4).toString(),
        OverrideRemovedState: {
            Title: overrideData.removedStateTitle || "MOS –≤—ã–∫–ª—é—á–µ–Ω"
        },
        CurrentOverrideStateId: "5",
        CurrentState: {
            Title: "–ù–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ"
        },
        AdditionalValueAppliedState: overrideData.additionalValue || "",
        OrderId: index,
        OverrideIndex: index,
        SystemOverrideCertificateId: parseInt(certificateId),
        Id: undefined,
        SystemOverrideCertificate: null,
        OverrideTypes: null,
        OverrideMethods: null,
        OverrideAppliedStates: null,
        OverrideRemovedStates: null,
        OverrideCurrentStates: null,
        TypeMethod: `${overrideData.typeTitle || "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ —Ç–µ—Ö.–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏"} / ${overrideData.methodTitle || "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å MOS"}`,
        OverridesJson: null,
        Overrides: [],
        ReturnUrl: null,
        IsUnableToImplement: false,
        UnableToImplementReason: null,
        IsEditable: false,
        AdditionalValueRemovedState: null,
        Title: null
    });
    
    // Create the submission data
    const overrides = [createNewOverride(1)];
    const formData = new FormData();
    
    // Add all required fields
    formData.append('SystemOverrideCertificateId', certificateId);
    formData.append('TagNumber', '');
    formData.append('Description', '');
    formData.append('OverrideTypeId', '');
    formData.append('OverrideMethodId', '');
    formData.append('Comment', '');
    formData.append('OverrideAppliedStateId', '');
    formData.append('AdditionalValueAppliedState', '');
    formData.append('OverrideRemovedStateId', '');
    formData.append('CurrentOverrideStateId', '5');
    formData.append('OverridesJson', JSON.stringify(overrides));
    formData.append('__RequestVerificationToken', 'dummy-token-' + Date.now());
    
    // Construct the URL
    const baseUrl = 'https://eptw-training.sakhalinenergy.ru';
    const submitUrl = `${baseUrl}/SOC/EditOverrides/${certificateId}`;
    
    console.log('üéØ Submitting to:', submitUrl);
    console.log('‚úÖ New override:', overrides[0]);
    
    // Submit the data
    return fetch(submitUrl, {
        method: 'POST',
        body: formData
    }).then(response => {
        if (response.ok) {
            console.log('‚úÖ Override added successfully to certificate', certificateId);
            return response;
        } else {
            throw new Error(`Server error: ${response.status} ${response.statusText}`);
        }
    }).catch(error => {
        console.error('‚ùå Error adding override:', error);
        throw error;
    });
}

// ===== USAGE EXAMPLES =====

// Example 1: Simple MOS override
function addMOSOverride(certificateId) {
    return addOverride(certificateId, {
        tagNumber: "MOS-TEST-001",
        description: "–¢–µ—Å—Ç–æ–≤–æ–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ú–û–°",
        typeId: 2,
        typeTitle: "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ —Ç–µ—Ö.–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏",
        methodId: 2,
        methodTitle: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å MOS",
        comment: "–î–æ–±–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ JS",
        appliedStateId: 3,
        appliedStateTitle: "MOS –≤–∫–ª—é—á–µ–Ω",
        removedStateId: 4,
        removedStateTitle: "MOS –≤—ã–∫–ª—é—á–µ–Ω",
        additionalValue: ""
    });
}

// Example 2: Quick minimal override
function addQuickOverride(certificateId) {
    return addOverride(certificateId, {
        tagNumber: "QUICK-" + Math.floor(Math.random() * 1000),
        description: "–ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
        comment: "–î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞ —Å–µ–∫—É–Ω–¥—É"
    });
}

// Example 3: Hardware bypass override
function addHardwareBypass(certificateId) {
    return addOverride(certificateId, {
        tagNumber: "VALVE-001",
        description: "–ë–∞–π–ø–∞—Å –∫–ª–∞–ø–∞–Ω–∞",
        typeId: 1,
        typeTitle: "–ê–ø–∞—Ä–∞—Ç–Ω—ã–π –±–∞–π–ø–∞—Å",
        methodId: 1,
        methodTitle: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–π –±–∞–π–ø–∞—Å",
        comment: "–î–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è",
        appliedStateId: 1,
        appliedStateTitle: "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
        removedStateId: 2,
        removedStateTitle: "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
        additionalValue: ""
    });
}

// Example 4: Forced value override
function addForcedValue(certificateId) {
    return addOverride(certificateId, {
        tagNumber: "LVL-001",
        description: "–ó–∞–º–µ–Ω–∞ —É—Ä–æ–≤–Ω–µ–º–µ—Ä–∞",
        typeId: 3,
        typeTitle: "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∫–∞",
        methodId: 4,
        methodTitle: "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º",
        comment: "–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–∞",
        appliedStateId: 12,
        appliedStateTitle: "–§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–æ",
        removedStateId: 13,
        removedStateTitle: "–†–∞—Å—Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–æ",
        additionalValue: "50%"
    });
}

// Example 5: Add multiple overrides to same certificate
function addMultipleOverrides(certificateId, count = 3) {
    const promises = [];
    for (let i = 1; i <= count; i++) {
        promises.push(
            addOverride(certificateId, {
                tagNumber: `BATCH-${i}-${certificateId}`,
                description: `–ü–∞–∫–µ—Ç–Ω–æ–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ${i}`,
                comment: `–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–∞–∫–µ—Ç–µ #${i}`
            })
        );
    }
    return Promise.all(promises);
}

// ===== TEST FUNCTIONS =====

// Test with specific certificate
function testCertificate(certificateId = '1054470') {
    console.log('üß™ Testing certificate:', certificateId);
    return addQuickOverride(certificateId);
}

// Test all override types on certificate
function testAllTypes(certificateId = '1054470') {
    console.log('üß™ Testing all override types on certificate:', certificateId);
    
    const tests = [
        () => addMOSOverride(certificateId),
        () => addHardwareBypass(certificateId),
        () => addForcedValue(certificateId)
    ];
    
    // Execute tests sequentially
    return tests.reduce((promise, testFunc) => {
        return promise.then(() => testFunc());
    }, Promise.resolve());
}

// ===== USAGE INSTRUCTIONS =====
console.log(`
üéØ Pure Override Functions Available:

BASIC:
addOverride(certificateId, data) - Add custom override

EXAMPLES:
1. addQuickOverride('1054470') - Quick override
2. addMOSOverride('1054470') - MOS override  
3. addHardwareBypass('1054470') - Hardware bypass
4. addForcedValue('1054470') - Forced value
5. addMultipleOverrides('1054470', 5) - Multiple overrides

TEST:
testCertificate('1054470') - Test specific certificate
testAllTypes('1054470') - Test all override types

üí° Example: Run testCertificate('1054470') to test!
`);

// Export for extension use
if (typeof window !== 'undefined') {
    window.ePTWOverrideAPI = {
        addOverride,
        addQuickOverride,
        addMOSOverride,
        addHardwareBypass,
        addForcedValue,
        addMultipleOverrides,
        testCertificate,
        testAllTypes
    };
    console.log('‚úÖ Override API available at window.ePTWOverrideAPI');
}