function setPingTime() {
    var t, e = new Date, o = null !== (t = localStorage.getItem("eptw-ping-time")) && void 0 !== t ? t : "1970-01-01Z00:00:00:000", i = new Date(o);
    e.getTime() - i.getTime() < 18e5 || $.post("/User/SetPingTime").then(function(t) {
        return t ? localStorage.setItem("eptw-ping-time", e.toISOString()) : localStorage.removeItem("eptw-ping-time")
    })
}

function u() {
        a = !1,
        t = setInterval(function() {
            a && !d() && (a = !1,
            p()),
            !a && d() && ($("#SessionExpireNotification").data("kendoWindow").center().open(),
            a = !0,
            function() {
                var e, t = localStorage.getItem(c);
                if (t)
                    e = new Date(+t);
                else {
                    var o = (new Date).getTime() + 6e4 * i.sessionExpireNotificationMinutes;
                    localStorage.setItem(c, o.toString()),
                    e = new Date(o)
                }
                n = setInterval(function() {
                    a && !d() && (a = !1,
                    p());
                    var t = Math.max(0, e - new Date) / 1e3;
                    0 === t ? ($.get("/Account/LogoutSessionExpired/"),
                    $("#SessionExpireNotificationOut").data("kendoWindow").center().open(),
                    $("#SessionExpireNotification").data("kendoWindow").center().close(),
                    a = !0,
                    f()) : r.text("0".concat(Math.floor(t / 60)).substr(-2) + ":" + "0".concat(Math.floor(t % 60)).substr(-2))
                }, s)
            }(),
            clearInterval(t))
        }, o)
    }
	
function deleteGridElementsIds(t, o, e, i, n) {
    void 0 === n && (n = function(t) {}
    );
    var r = [];
    $(t + ":checked").each(function(t, e) {
        r.push($(e).attr(o))
    });
    var a = $(i)
      , c = {
        url: e,
        data: {
            itemsIds: r
        },
        success: function(t) {
            t.StatusCode || 0 === t.length ? a.data("kendoGrid").dataSource.read() : n(t)
        }
    };
    kendo.ui.progress(a, !0),
    $.post(c).then(function() {
        kendo.ui.progress(a, !1)
    })
}

function downloadFile(e, o, i) {
    $.get("/".concat(o, "/CheckAccessToFile/").concat(e), function(t) {
        t.Error ? alert(i) : window.location.href = "/".concat(o, "/DownloadFile/").concat(e)
    })
}

t.prototype.sendActionRequest = function(e, t) {
            var r = this;
            "0" !== e && t.some(function(t) {
                return 0 < e.indexOf(t)
            }) ? (showOverlay(),
            $.get({
                url: e,
                cache: !1,
                success: function(t) {
                    if (t && 0 === t.Result) {
                        var e = [];
                        e.push(t);
                        var o = r.showChangeStateErrorsUrl + "?data=" + encodeURIComponent(JSON.stringify(e));
                        assignLocation(addReturnUrl(o, window.location.href))
                    } else if (t && 2 === t.Result) {
                        var i = $.param({
                            id: t.CertificateId,
                            questionMessages: t.Message,
                            trigger: t.Trigger
                        })
                          , n = "".concat(r.changeSiteStateUrl, "?").concat(i);
                        assignLocation(addReturnUrl(n, window.location.href))
                    } else
                        window.location.reload()
                }
            }).fail(showOverlay.bind(null, !1))) : assignLocation(addReturnUrl(e))
        }
        ,
        t
    }();
		
function(t) {
    var e = function() {
        function t(t, e, o, i, n, r, a, c, s, l, d, u, h, f, p) {
            void 0 === f && (f = !0),
            void 0 === p && (p = null);
            var m = this;
            this.defaultDropdownValueFieldName = "Id",
            this.defaultDropdownTextFieldName = "Title",
            this.updateStates = function() {
                var e = this
                  , t = $(this.stateGroupSelector).val();
                "" === t && (t = 0),
                $.ajax({
                    url: "".concat(e.getCertificateStatesUrl, "?stateGroupId=").concat(t, "&type=").concat(e.typeOfCertificate, "&ui-culture=").concat(getCurrentCulture()),
                    cache: !0,
                    success: function(t) {
                        fillDropDown($(e.stateSelector), t)
                    }
                })
            }
            ,
            this.typeOfCertificate = t,
            this.getAreasByLocationUrl = "/data/getAreasByLocation",
            this.getAreasByInstallationUrl = "/data/GetAreasByInstallation",
            this.getInstallationsBySiteUrl = "/data/getInstallationsBySite",
            this.getLocationsByInstallationUrl = f ? "/data/GetNotIntermediateLocationsByInstallation" : "/data/getLocationsByInstallation",
            this.getTagsByInstallationUrl = "/Tag/GetTagsForInstallation",
            this.getIsolationTypesByCategoryUrl = "/data/getIsolationTypesByCategory",
            this.getDefaultValidityPeriodUrl = "/data/getDefaultValidityPeriod",
            this.getCertificateCategoriesUrl = "/data/GetCategorySearchByType",
            this.getCertificateStatesUrl = "/data/GetStatesByStateGroup",
            this.getRolesByInstallationUrl = "/data/GetInstallationRoles",
            this.certificateCategorySelector = o,
            this.siteSelector = i,
            this.installationSelector = n,
            this.locationSelector = r,
            this.tagsSelector = p,
            this.isolationTypeSelector = c,
            this.validityPeriodSelector = s,
            this.taskAreasSelector = a,
            this.availableSecondaryAreasSelector = "#availableSecondaryLocationArea",
            this.selectedSecondaryAreasSelector = "#SelectedSecondaryAreaIds",
            this.availableInstalationRolesSelector = "#availableInstalationRoles",
            this.selectedInstalationRolesSelector = "#SelectedRoleIds",
            this.availablePrivilegeSelector = "#availablePrivilege",
            this.selectedPrivilegeSelector = "#SelectedPrivilegeIds",
            this.pleaseSelectLocalizedText = l,
            this.certificateTypeSelector = e,
            this.stateSelector = d,
            this.stateGroupSelector = u,
            this.roleSelector = h,
            $(this.certificateCategorySelector).change(function() {
                m.updateIsolationTypes(),
                s && m.updateValidityPeriod()
            }),
            $(this.locationSelector).change(function() {
                m.updateTaskAreaAndSecondaryAreas()
            }),
            $(this.taskAreasSelector).change(function() {
                m.updateSecondaryAreas()
            }),
            $(this.siteSelector).change(function() {
                m.updateInstallations()
            }),
            $(this.installationSelector).change(function() {
                m.updateLocations(),
                m.updateTags()
            }),
            $(this.certificateTypeSelector).change(function() {
                m.updateCategories()
            }),
            $(this.stateGroupSelector).change(function() {
                m.updateStates()
            })
        }
        return t.prototype.updateTaskAreaAndSecondaryAreas = function() {
            var e = this
              , o = this
              , t = $(this.locationSelector).val();
            $.ajax({
                url: this.getAreasByLocationUrl,
                data: {
                    locationId: t,
                    "ui-culture": getCurrentCulture()
                },
                cache: !0,
                success: function(t) {
                    fillDropDown(o.taskAreasSelector, t),
                    $(e.availableSecondaryAreasSelector).length && 1 === t.length && e.updateSecondaryAreas()
                }
            })
        }
        ,
        t.prototype.updateCategories = function() {
            var e = this
              , t = $(this.certificateTypeSelector).val();
            $.ajax({
                url: "".concat(this.getCertificateCategoriesUrl, "?typeId=").concat(t, "&ui-culture=").concat(getCurrentCulture()),
                cache: !0,
                success: function(t) {
                    fillDropDown($(e.certificateCategorySelector), t)
                }
            })
        }
        ,
        t.prototype.updateRoles = function() {
            var e = this
              , t = $(this.installationSelector).val();
            return $.ajax({
                url: this.getRolesByInstallationUrl,
                data: {
                    installationId: t
                }
            }).then(function(t) {
                e.fillRolesDropDown($(e.roleSelector), t)
            })
        }
        ,
        t.prototype.updateSecondaryAreas = function() {
            var e = this
              , t = $(this.installationSelector).val()
              , o = tryParseInt($(e.taskAreasSelector).getKendoDropDownList().value());
            if (void 0 !== $(e.selectedSecondaryAreasSelector).getKendoListBox()) {
                var i = $(e.selectedSecondaryAreasSelector).getKendoListBox().dataSource
                  , n = i.data().map(function(t) {
                    return t.Value
                });
                if (o) {
                    n.push(o);
                    var r = i.data().find(function(t) {
                        return t.Value == o
                    });
                    r && i.remove(r)
                }
                $.post({
                    url: this.getAreasByInstallationUrl,
                    data: {
                        installationId: t,
                        areaIdsToExclude: n,
                        "ui-culture": getCurrentCulture()
                    },
                    cache: !0,
                    success: function(t) {
                        e.fillSecondaryAreas(e, t)
                    }
                })
            }
        }
        ,
        t.prototype.fillSecondaryAreas = function(t, e) {
            var o = createDataSource(e)
              , i = $(t.availableSecondaryAreasSelector).data("kendoListBox");
            i && i.setDataSource(o)
        }
        ,
        t.prototype.fillInstalationRoles = function(t, e) {
            var o = createDataSource(e);
            $(t.availableInstalationRolesSelector).data("kendoListBox").setDataSource(o),
            $(t.selectedInstalationRolesSelector).data("kendoListBox").setDataSource(createDataSource())
        }
        ,
        t.prototype.fillPrivilege = function(t, e) {
            var o = createDataSource(e);
            $(t.availablePrivilegeSelector).data("kendoListBox").setDataSource(o),
            $(t.selectedPrivilegeSelector).data("kendoListBox").setDataSource(createDataSource())
        }
        ,
        t.prototype.updateIsolationTypes = function() {
            var e = this
              , t = $(this.certificateCategorySelector).val();
            $.ajax({
                method: "GET",
                url: "".concat(this.getIsolationTypesByCategoryUrl, "?categoryId=").concat(t, "&ui-culture=").concat(getCurrentCulture()),
                cache: !0,
                success: function(t) {
                    e.isolationTypeCodes = t,
                    fillDropDown(e.isolationTypeSelector, t)
                }
            })
        }
        ,
        t.prototype.updateValidityPeriod = function() {
            var o = this
              , t = $(this.certificateCategorySelector).val();
            $.ajax({
                method: "GET",
                url: this.getDefaultValidityPeriodUrl + "?categoryId=" + t,
                success: function(t) {
                    var e = $(o.validityPeriodSelector).data("kendoNumericTextBox");
                    e.max(t),
                    e.value(null != t ? t : 1)
                }
            })
        }
        ,
        t.prototype.updateLocations = function() {
            var e = this
              , t = $(this.installationSelector).val();
            $.ajax({
                method: "GET",
                url: "".concat(this.getLocationsByInstallationUrl, "?installationId=").concat(t, "&ui-culture=").concat(getCurrentCulture()),
                cache: !0,
                success: function(t) {
                    fillDropDown(e.locationSelector, t),
                    e.updateTaskAreaAndSecondaryAreas()
                }
            })
        }
        ,
        t.prototype.updateTags = function() {
            if (this.tagsSelector) {
                var e = this
                  , t = $(this.installationSelector).val();
                $.ajax({
                    method: "GET",
                    url: "".concat(this.getTagsByInstallationUrl, "?installationId=").concat(t),
                    cache: !0,
                    success: function(t) {
                        fillMultiSelect(e.tagsSelector, t.Data)
                    }
                })
            }
        }
        ,
        t.prototype.updateInstallations = function() {
            var e = this
              , t = $(this.siteSelector).val();
            $.ajax({
                method: "GET",
                url: "".concat(this.getInstallationsBySiteUrl, "?siteId=").concat(t, "&ui-culture=").concat(getCurrentCulture()),
                cache: !0,
                success: function(t) {
                    fillDropDown(e.installationSelector, t),
                    $(e.installationSelector).trigger("change"),
                    $(e.installationSelector).data("kendoDropDownList").select(0),
                    e.updateLocations(),
                    e.updateTags()
                }
            })
        }
        ,
        t.prototype.fillRolesDropDown = function(t, e) {
            return fillDropDown(t, e, "NormalizedName", "Name")
        }
        ,
        t.prototype.getTypeOfCertificate = function() {
            return this.typeOfCertificate
        }
        ,
        t
    }();
    t.CascadeLists = e
}(Common || (Common = {}));	
	
!function(g) {
    var t = function(m) {
        function t(t, e, o, i, n, r, a, c, s, l, d, u, h, f) {
            var p = m.call(this, t, "[name=CertificateTypeId]", "[name=CertificateCategoryId]", "[name=SiteId]", "[name=InstallationId]", "[name=LocationId]", "[name=TaskAreaId]", null, null, e, "[name=CertificateState]", "[name=StateGroup]", null, !0, "[name=SelectedTagIds]") || this;
            return p.changeStateSectionSelector = ".ChangeStateBtnBox",
            p.changeStateDropdownSelector = "input[id^=action_dropdown]",
            p.certificateActionSectionSelector = ".certificateActionSelectBox",
            p.getCertificateActionsMethodName = "GetChangeStateAvailableActions?certificateId=",
            p.defaultMultipleChangeSiteStateUrl = "MultipleChangeSiteState",
            p.preIssueTriggerId = 25,
            p.issueTriggerId = 26,
            p.issueForDftTriggerId = 27,
            p.getUserGridOptionUrl = "/User/GetUserGridOptions",
            p.setUserGridOptionUrl = "/User/SetUserGridOptions",
            p.resetUserGridOptionUrl = "/User/ResetUserGridOptions",
            p.saveUserGridOptionSelector = "#saveGridOptions",
            p.resetUserGridOptionSelector = "#resetGridOptions",
            p.defaultChangeStateUrl = "TriggerChangeWorkflowState",
            p.defaultChangeSiteStateUrl = "ChangeSiteState",
            p.defaultCountersignUrl = "Countersign",
            p.certificatecopyUrl = l,
            p.exportSearchUrl = o,
            p.changeStateBtnSelector = ".ChangeStateBtn",
            p.gridSelector = "#grid",
            p.exportBtnSelector = "#ExportHeader",
            p.certificateActionConfirmSelector = ".certificateActionConfirmButton",
            p.certificateActionSelector = ".certificateActionSelect",
            p.getChangeStateActionsUrl = i,
            p.showChangeStateErrorsUrl = n,
            p.getActionsUrl = r,
            p.defaultSite = a,
            p.defaultInstallation = c,
            p.idFormat = f,
            p.confirmationMessage = u,
            p.confirmationTitle = d,
            p.confirmationDialog = new g.ConfirmationDialog(d,u,"#relationConfirmationTemplate",{
                buttons: [{
                    text: h,
                    selector: ".confirm_no"
                }]
            }),
            $(p.certificateActionSectionSelector).hide(),
            $(p.changeStateSectionSelector).hide(),
            $(p.changeStateBtnSelector).click(function(t) {
                var e = $(t.target);
                e.attr("disabled", "disabled"),
                p.sendChangeStateActionsRequests().then(function() {
                    $(p.changeStateSectionSelector).hide()
                }).always(function() {
                    return e.removeAttr("disabled")
                })
            }),
            $(p.exportBtnSelector).click(function() {
                exportCsv(p.gridSelector, p.exportSearchUrl)
            }),
            $(p.certificateActionConfirmSelector).click(function(t) {
                p.confirmCertificateAction(t)
            }),
            $(p.saveUserGridOptionSelector).click(function() {
                $.post(p.setUserGridOptionUrl, {
                    typeOfCertificate: p.getTypeOfCertificate(),
                    options: JSON.stringify($(p.gridSelector).getKendoGrid().getOptions().columns)
                })
            }),
            $(p.resetUserGridOptionSelector).click(function() {
                $.post(p.resetUserGridOptionUrl, {
                    typeOfCertificate: p.getTypeOfCertificate()
                }).then(function() {
                    $(p.gridSelector).getKendoGrid().setOptions({
                        columns: p.gridDefaultColumnsOptions
                    }),
                    p.initTopPagination()
                })
            }),
            $(document).ready(function() {
                $.ajaxSetup({
                    cache: !1
                });
                var t = $(p.gridSelector).getKendoGrid();
                p.gridDefaultColumnsOptions = t.getOptions().columns,
                p.getUserGridOptions(t),
                p.initTopPagination()
            }),
            p
        }
        return __extends(t, m),
        t.prototype.sendChangeStateActionsRequests = function() {
            var e = this
              , c = this
              , s = []
              , l = []
              , d = ""
              , u = ""
              , h = [];
            $(this.changeStateDropdownSelector).each(function(t, e) {
                var o = $(e)
                  , i = o.val();
                if (i && 0 <= i.indexOf(c.defaultChangeStateUrl))
                    h.push($.ajax({
                        url: i,
                        async: !1
                    }));
                else if (i) {
                    var n = o.getKendoDropDownList().dataItem();
                    u = i,
                    d = n.InternalUrl;
                    var r = o.data("certificateId");
                    s.push(r);
                    var a = n.Trigger;
                    l.push(a)
                }
            });
            var t = addUrlParameter(window.location.href, "loadSavedSearch=true");
            if (1 < s.length && 0 === h.length && l.every(function(t) {
                return t === e.issueTriggerId || t === e.preIssueTriggerId || t === e.issueForDftTriggerId
            })) {
                var o = "/".concat(this.getTypeOfCertificate(), "/").concat(this.defaultMultipleChangeSiteStateUrl, "?ids=").concat(s.join("&ids="), "&trigger=").concat(l[0]);
                assignLocation(addReturnUrl(o, t))
            } else if (0 < s.length && 1 < s.length + h.length)
                this.confirmationDialog.setTitleAndMessage(this.confirmationTitle, kendo.format(this.confirmationMessage, s.map(function(t) {
                    return kendo.toString(parseInt(t), e.idFormat)
                }).join(", "))),
                this.confirmationDialog.showConfirmation(),
                $(this.gridSelector).data("kendoGrid").dataSource.read();
            else {
                if (0 === s.length && 0 < h.length)
                    return this.tryChangeCertificatesState(h, t);
                if (1 === s.length && 0 <= d.indexOf(this.defaultChangeSiteStateUrl))
                    assignLocation(addReturnUrl(u, t));
                else if (1 === s.length) {
                    o = "".concat(d, "?id=").concat(s, "&trigger=").concat(l);
                    var i = $.get(addReturnUrl(o, t));
                    return this.tryChangeCertificatesState([i], t)
                }
            }
            return $.Deferred()
        }
        ,
        t.prototype.confirmCertificateAction = function(t) {
            var e = $("#" + $(t.currentTarget).data("selectId") + " option:selected").val();
            "" !== e && assignLocation(addReturnUrl(e, null, {
                loadSavedSearch: "true"
            }))
        }
        ,
        t.prototype.onGridBound = function(t) {
            var o = this;
            this.initializeDropDowns(t);
            var i = $(o.certificateActionSelector);
            this.emptyCertificateActionDropDown();
            $("[name=certificateRadioButton]").change(function() {
                $(o.changeStateSectionSelector).hide(),
                $(this.changeStateDropdownSelector).each(function(t, e) {
                    $(e).val() && $(e).getKendoDropDownList().value(null)
                }),
                $(o.certificateActionSectionSelector + ' option[value != ""]').remove();
                var e = $(this).attr("id");
                $.ajax({
                    url: "".concat(o.getActionsUrl, "?certificateId=").concat(e)
                }).then(function(t) {
                    o.appendActionsToSelect(t, i, e),
                    $(o.certificateActionSectionSelector).show()
                })
            });
            var e = $(this.gridSelector).data("kendoGrid").dataSource.total();
            $("#ExportPanel").toggle(0 !== e)
        }
        ,
        t.prototype.initTopPagination = function() {
            var t = $(this.gridSelector).getKendoGrid()
              , e = $('<div class="k-pager-wrap k-grid-pager pagerTop"/>').insertBefore(t.element.children(".k-grid-header"));
            t.pagerTop = new kendo.ui.Pager(e,$.extend({}, t.options.pageable, {
                dataSource: t.dataSource
            }))
        }
        ,
        t.prototype.initializeDropDowns = function(i) {
            var n = this;
            $(this.changeStateDropdownSelector).each(function(t, e) {
                var o = $(e).data("certificateId");
                $(e).kendoDropDownList({
                    dataTextField: "LocalizedName",
                    dataValueField: "Url",
                    autoBind: !1,
                    autoWidth: !0,
                    optionLabel: i,
                    height: 1280,
                    dataSource: {
                        transport: {
                            read: {
                                dataType: "json",
                                url: n.getCertificateActionsMethodName + o
                            }
                        },
                        requestStart: function() {
                            kendo.ui.progress($(e).siblings(".k-dropdown-wrap"), !0)
                        },
                        requestEnd: function() {
                            kendo.ui.progress($(e).siblings(".k-dropdown-wrap"), !1)
                        },
                        schema: {
                            data: "Data"
                        }
                    },
                    change: function(t) {
                        $("[name=certificateRadioButton]").prop("checked", !1),
                        $(n.certificateActionSectionSelector).hide(),
                        $(n.changeStateSectionSelector).toggle($(n.changeStateDropdownSelector).toArray().some(function(t) {
                            return $(t).val()
                        }))
                    }
                })
            })
        }
        ,
        t.prototype.appendActionsToSelect = function(i, t, n) {
            this.emptyCertificateActionDropDown(),
            t.each(function(t, e) {
                var o = $(e);
                $.each(i, function(t, e) {
                    o.append($(kendo.format("<option certificateId='{0}' internalUrl='{1}' trigger='{2}' internalName='{3}'></option>", n, e.InternalUrl, e.Trigger, e.InternalName)).attr("value", e.Url).text(e.LocalizedName))
                }),
                o.prop("disabled", !1)
            })
        }
        ,
        t.prototype.tryChangeCertificatesState = function(t, l) {
            var d = this
              , u = this;
            return $.when.apply($, t).done(function() {
                for (var t = [], e = 0; e < arguments.length; e++)
                    t[e] = arguments[e];
                var o = t[0];
                if (o && 2 === o.Result) {
                    var i = $.param({
                        id: o.CertificateId,
                        questionMessages: o.Message,
                        trigger: o.Trigger
                    })
                      , n = "".concat(d.defaultChangeSiteStateUrl, "?").concat(i);
                    assignLocation(addReturnUrl(n, l))
                } else {
                    for (var r = [], a = 0; a < t.length; a++) {
                        var c = t[a];
                        if (c instanceof Array && (c = c[0]),
                        null != c.Result && 0 === c.Result) {
                            var s = {};
                            s.CertificateId = c.CertificateId,
                            s.Trigger = c.Trigger,
                            r.push(s)
                        }
                    }
                    if (0 < r.length) {
                        n = "".concat(u.showChangeStateErrorsUrl, "?data=").concat(encodeURIComponent(JSON.stringify(r)));
                        assignLocation(addReturnUrl(n, l))
                    } else
                        $(d.gridSelector).data("kendoGrid").dataSource.read()
                }
            })
        }
        ,
        t.prototype.emptyCertificateActionDropDown = function() {
            $(this.certificateActionSectionSelector + ' option[value != ""]').remove()
        }
        ,
        t.prototype.getUserGridOptions = function(e) {
            $.get(this.getUserGridOptionUrl, {
                typeOfCertificate: this.getTypeOfCertificate()
            }).then(function(t) {
                t && e.setOptions({
                    columns: JSON.parse(t)
                })
            })
        }
        ,
        t
    }(g.CascadeLists);
    g.Search = t
}(Common || (Common = {})),
function(t) {
    var e = function() {
        function t(t, e, o, i, n, r) {
            var a = this;
            this.deleteItemsUrl = t,
            this.exportActionUrl = e,
            this.printPreviewActionUrl = o,
            this.confirmationDialog = i,
            this.savedSearchCookieName = n,
            this.printPreviewSortColumn = r,
            this.selectedItemsIds = [],
            this.searchButtonSelector = "#searchBtn",
            this.newSearchButtonSelector = "#newSearchBtn",
            this.deleteButtonSelector = "#deleteBtn",
            this.exportButtonSelector = "#exportBtn",
            this.totalItemsSelector = "#totalItems",
            this.printPreviewButtonSelector = "#printPreview",
            this.selectHazardsButtonSelector = "#selectBtn",
            this.jsonGridDataSelector = "#SelectedChildsJson",
            this.pageNumberSelector = "#Page",
            this.hazardGroupDropdownSelector = "#HazardGroupId",
            this.gridSelector = "#searchGrid";
            var c = this;
            this.$grid = $(this.gridSelector),
            $(this.searchButtonSelector).click(function() {
                a.onSearchButtonClick(!1, 1)
            }),
            $(this.newSearchButtonSelector).click(function() {
                a.onNewSearchButtonclick()
            }),
            $(this.deleteButtonSelector).click(function() {
                a.onDeleteButtonClick()
            }),
            $(this.exportButtonSelector).click(function() {
                exportCsv(a.gridSelector, a.exportActionUrl, a.selectedItemsIds)
            }),
            $(this.printPreviewButtonSelector).click(function() {
                a.onPrintPreviewButtonClick()
            }),
            $(this.selectHazardsButtonSelector).click(function() {
                a.onSelectButtonClick()
            }),
            $(document).ready(function() {
                a.onSearchButtonClick(!1, $(c.pageNumberSelector).val())
            })
        }
        return t.prototype.onDataBound = function(t) {
            setupGridCheckboxes(t, this),
            $(this.totalItemsSelector).text(t.sender.dataSource.total()),
            initializeHeaderCheckBoxChangeEvent(),
            onPageableSelectGridDataBound(t)
        }
        ,
        t.prototype.onDeleteButtonClick = function() {
            var t = this;
            this.selectedItemsIds.length && (jQuery.ajaxSettings.traditional = !0,
            this.confirmationDialog.showConfirmation().then(function() {
                $.post(t.deleteItemsUrl, t.getDeleteQueryString()).done(function() {
                    t.onDeleteComplete()
                })
            }))
        }
        ,
        t.prototype.onDeleteComplete = function() {
            this.$grid.data("kendoGrid").dataSource.read()
        }
        ,
        t.prototype.onSelectButtonClick = function() {
            var t = this.$grid.data("kendoGrid")
              , e = this.selectedItemsIds
              , o = t.dataSource.data()
              , i = [];
            o.forEach(function(t) {
                e.indexOf(t.get("Id")) + 1 && i.push(t)
            });
            var n = JSON.stringify(i);
            $(this.jsonGridDataSelector).val(n)
        }
        ,
        t.prototype.getDeleteQueryString = function() {
            return {
                ItemIds: this.selectedItemsIds
            }
        }
        ,
        t.prototype.onSearchButtonClick = function(t, e) {
            void 0 === t && (t = !1),
            void 0 === e && (e = null);
            var o = this.$grid.data("kendoGrid")
              , r = []
              , a = {}
              , i = o.dataSource.sort();
            a.Page = e || o.dataSource.page(),
            $("#FilterInputs :input.filter").each(function(t, e) {
                var o = $(e);
                if ("null" != o.val() && "" != o.val()) {
                    var i = o.attr("id")
                      , n = o.attr("filtermember") || i;
                    r.push({
                        field: n,
                        operator: o.attr("filteroperator"),
                        value: getFilterValue(o)
                    }),
                    a[i] = tryParseInt(o.val())
                }
            }),
            $.cookie(this.savedSearchCookieName, kendo.stringify(a), {
                path: "/"
            }),
            t || o.dataSource.query({
                filter: r,
                sort: i,
                page: Math.max(e, 1),
                pageSize: o.dataSource.pageSize()
            }),
            clearSelectedItems(this)
        }
        ,
        t.prototype.onNewSearchButtonclick = function() {
            var e = this
              , t = this.$grid.data("kendoGrid").dataSource;
            t.query({
                sort: t.sort(),
                filter: {},
                page: 1,
                pageSize: t.pageSize()
            }).then(function() {
                $("input[filter=True]").val(null);
                var t = $(e.hazardGroupDropdownSelector).data("kendoDropDownList");
                void 0 !== t && t.select(0)
            }),
            $.cookie(this.savedSearchCookieName, "", {
                path: "/"
            })
        }
        ,
        t.prototype.onPrintPreviewButtonClick = function() {
            var t = this.$grid.getKendoGrid().dataSource;
            t.sort({
                field: this.printPreviewSortColumn,
                dir: "asc"
            }),
            void 0 !== t.filter() && "" === t.filter().filters[0].value && t.filter([]),
            exportCsv(this.gridSelector, this.printPreviewActionUrl)
        }
        ,
        t
    }();
    t.BaseDictionarySearch = e
}(Common || (Common = {}));
function(t) {
    var e = function() {
        function t(t, e, o) {
            this.getgetAvailabilityStatusUrl = t,
            this.acceptLocalizedString = e,
            this.stateWatcherSelector = o
        }
        return t.ConvertLikelihood = function(t) {
            return String.fromCharCode("A".charCodeAt(0) + t)
        }
        ,
        t.prototype.GetAvailabilityStatus = function(t, e) {
            var o;
            return $.ajax({
                url: this.getgetAvailabilityStatusUrl,
                data: {
                    severity: t,
                    likehood: e
                },
                async: !1,
                success: function(t) {
                    o = parseInt(t)
                }
            }),
            o
        }
        ,
        t.prototype.GetChangeStateAcceptanceState = function() {
            return 0 < document.getElementsByName(this.stateWatcherSelector).length
        }
        ,
        t
    }();
    t.RiskAvailabilityStatusFunctions = e
}(CC || (CC = {}));
!function(t) {
    var e = function(m) {
        function t(t, e, o, i, n, r, a, c, s, l, d, u, h, f) {
            var p = m.call(this, u, h, f) || this;
            return p.plotPlanCanvasSelector = t,
            p.iconPositionX = e,
            p.iconPositionY = o,
            p.positionIconButtonSelector = i,
            p.positionSecondaryIconButtonSelector = n,
            p.hasPlotPlan = r,
            p.getPlotPlanIdActionUrl = a,
            p.installationId = c,
            p.locationId = s,
            p.certificatePositionSearchActionUrl = l,
            p.navigateButtonSelector = d,
            $(document).ready(function() {
                p.configurePositionIconButtons(),
                $(p.navigateButtonSelector).click(function() {
                    p.onNavigateButtonClick()
                }),
                p.configureStateIcon()
            }),
            p
        }
        return __extends(t, m),
        t.prototype.onNavigateButtonClick = function() {
            var o = this;
            $.post(this.getPlotPlanIdActionUrl, {
                installationId: this.installationId,
                locationId: this.locationId
            }).then(function(t) {
                if (t) {
                    var e = {
                        plotPlanId: t
                    };
                    assignLocation(o.certificatePositionSearchActionUrl + e.toQueryString())
                }
            })
        }
        ,
        t.prototype.configurePositionIconButtons = function() {
            $(this.positionIconButtonSelector + "," + this.positionSecondaryIconButtonSelector).attr("disabled", "False" === this.hasPlotPlan)
        }
        ,
        t.prototype.configureStateIcon = function() {
            var i = this;
            if (this.iconPositionX && this.iconPositionY) {
                var n = new fabric.Canvas("plotPlanCanvas")
                  , e = $("svg.icon-state");
                0 == e.length && console.error("Could not find svg.replaced-svg"),
                $.when(e.makeCssInline()).then(function() {
                    var t = (new XMLSerializer).serializeToString(e[0]);
                    fabric.loadSVGFromString(t, function(t, e) {
                        var o = fabric.util.groupSVGElements(t, e);
                        o.left = +i.iconPositionX,
                        o.top = +i.iconPositionY,
                        o.hasControls = o.hasBorders = !1,
                        o.lockMovementX = o.lockMovementY = !0,
                        o.hoverCursor = "default",
                        n.add(o)
                    })
                })
            }
        }
        ,
        t
    }(Common.Details);
    t.Details = e
}(WCC || (WCC = {}));
!function(t) {
    var e = function(f) {
        function t(t, e, o, i, n, r, a, c, s, l, d) {
            var u = f.call(this, t, "#initialData") || this;
            u.selectedItemsIds = [],
            u.deleteButtonSelector = e,
            u.numberFieldSelector = o,
            u.exportButtonSelector = i,
            u.detailedExportButtonSelector = n,
            u.exportActionUrl = r,
            u.exportDetailsActionUrl = a,
            u.deleteUrl = c,
            u.confirmationDialog = s,
            u.permissionsDialog = l,
            u.pageNumberSelector = d,
            u.$grid = $(u.gridSelector),
            $(u.exportButtonSelector).click(function() {
                exportCsv(u.gridSelector, u.exportActionUrl, u.selectedItemsIds)
            }),
            $(u.detailedExportButtonSelector).click(function() {
                exportCsv(u.gridSelector, u.exportDetailsActionUrl, u.selectedItemsIds)
            }),
            $(u.deleteButtonSelector).click(function() {
                u.onDeleteButtonClick()
            });
            var h = u;
            return $(document).ready(function() {
                $("#HeaderCheckBox").click(function() {
                    u.setCheckboxesState($("#HeaderCheckBox").is(":checked"))
                }),
                window.searchData(!1, $(h.pageNumberSelector).val(), $("#Sort").val() || JSON.stringify({
                    field: "Name",
                    dir: "asc"
                }))
            }),
            $("#Name").on("keypress", function(t) {
                13 === t.charCode && (t.preventDefault(),
                $("#SearchBtn").click())
            }),
            u
        }
        return __extends(t, f),
        t.prototype.setCheckboxesState = function(t) {
            $("[name=userSearchResult]").each(function() {
                $(this).is(":checked") != t && $(this).click()
            })
        }
        ,
        t.prototype.onGridDataBound = function(t) {
            setupGridCheckboxes(t, this),
            $(this.numberFieldSelector).text(this.$grid.data("kendoGrid").dataSource.total())
        }
        ,
        t.prototype.onDeleteButtonClick = function() {
            if (jQuery.ajaxSettings.traditional = !0,
            this.selectedItemsIds.length) {
                var e = this;
                $.ajax({
                    type: "POST",
                    url: "/User/CheckInstAdminHasPermissions",
                    data: this.getDeleteQueryString(),
                    dataType: "json",
                    success: function(t) {
                        t ? e.showDeleteConfirmDialog() : e.showHasPermissions()
                    }
                })
            }
        }
        ,
        t.prototype.showDeleteConfirmDialog = function() {
            var e = this;
            this.confirmationDialog.showConfirmation().then(function(t) {
                $.post(e.deleteUrl, e.getDeleteQueryString()).done(function(t) {
                    e.onDeleteComplete(t)
                })
            })
        }
        ,
        t.prototype.showHasPermissions = function() {
            this.permissionsDialog.showConfirmation().then(function(t) {})
        }
        ,
        t.prototype.onDeleteComplete = function(t) {
            this.$grid.data("kendoGrid").dataSource.read(),
            this.selectedItemsIds = []
        }
        ,
        t.prototype.getDeleteQueryString = function() {
            return {
                ItemIds: this.selectedItemsIds
            }
        }
        ,
        t.prototype.removeAction = function(t) {
            assignLocation(t)
        }
        ,
        t
    }(Common.GridInitialDataLoad);
    t.Search = e
}(User || (User = {}));
!function(t) {
    var e = function(i) {
        function t(t) {
            var e = i.call(this, null, null, "#CertificateCategoryId", "#DefaultSiteId", "#DefaultInstallationId", "#LocationId", "#TaskAreaId", "#IsolationTypeId", "#ValidityPeriod", t, null, null, null) || this;
            $("#NodeAdmin").change(function() {
                var t = $("#defaultRoleId")
                  , e = $("#DefaultRoleId").data("kendoDropDownList")
                  , o = $("#NodeAdmin").is(":checked");
                e.enable(!o),
                t.toggle(o)
            });
            var o = $("#CompanyId");
            return o.change(function() {
                var t = o.getKendoDropDownList().text();
                $("#companyTitle").val(t)
            }),
            $(document).ready(function() {
                $("#NodeAdmin").is(":checked") && $("#DefaultRoleId").data("kendoDropDownList").enable(!1)
            }),
            e
        }
        return __extends(t, i),
        t.prototype.addNew = function(t, e) {
            var o = $("#" + t).getKendoDropDownList()
              , i = o.dataSource
              , n = e.length;
            if (!(n <= 0 || 100 <= n) && e.trim().length) {
                var r = i.data();
                if (0 === r.filter(function(t) {
                    return t.Title === e
                }).length) {
                    var a = r[r.length - 1];
                    null != a && a.get("Id") <= 0 && i.remove(a),
                    i.add({
                        Id: -r.length,
                        Title: e
                    }),
                    $("#companyTitle").val(e),
                    $("#CompanyId").data("kendoDropDownList").select(1),
                    i.one("sync", function() {
                        o.select(i.view().length - 1)
                    }),
                    i.sync(),
                    o.close()
                }
            }
        }
        ,
        t
    }(Common.CascadeLists);
    t.CreateEdit = e
}(User || (User = {})),
function(t) {
    var e = function() {
        function t(t, e, o, i, n, r, a, c, s, l, d, u, h, f, p, m, g, S, v, C, y, I, k, b, x, w, P, D, B, A, T, O, R) {
            var G = this;
            this.identifierCounter = 0,
            this.ExistingControlsWereAdded = !1,
            this.MandatoryControlsWereAdded = !1,
            this.isInitialRiskMatrix = !0,
            this.letterACharCode = 65,
            this.AlarpStatuses = {
                never: 1,
                always: -1,
                selectable: 0
            },
            this.controlsGridSelector = t,
            this.chosenControlsGridSelector = e,
            this.controlCheckboxSelector = o,
            this.selectControlsBtnSelector = i,
            this.chosenControlsJsonSelector = n,
            this.selectAllChosenControlsSelector = r,
            this.selectAllControlsSelector = a,
            this.chosenControlsCheckboxSelector = c,
            this.removeControlsBtnSelector = s,
            this.additionalControlNameInputSelector = l,
            this.addAdditionalControlBtnSelector = d,
            this.alarpCheckBoxSelector = u,
            this.initialSeveritySelector = h,
            this.initialLikelihoodSelector = p,
            this.initialSeverityTextSelector = f,
            this.initialLikelihoodTextSelector = m,
            this.residualSeveritySelector = g,
            this.residualSeverityTextSelector = S,
            this.residualLikelihoodSelector = v,
            this.residualLikelihoodTextSelector = C,
            this.getInitialRiskBtnSelector = y,
            this.getResidualRiskBtnSelector = I,
            this.riskMatrixSelector = k,
            this.acceptRiskMatrixBtnSelector = b,
            this.matrixSeverityText = x,
            this.matrixLikelihoodText = w,
            this.getAvailabilityStatusUrl = P,
            this.acceptControlsChangesString = D,
            this.rejectControlsChangesString = B,
            this.confirmControlsChangesBtnSelector = A,
            this.IsPrerequisiteSelectorString = T,
            this.IsCompletionSelectorString = O,
            this.hazardAndControlDuplicationError = R,
            $(this.removeControlsBtnSelector).click(function() {
                G.deselectControls()
            }),
            $(this.selectControlsBtnSelector).click(function() {
                G.selectControls()
            }),
            $(this.addAdditionalControlBtnSelector).click(function() {
                G.addAdditionalControl()
            }),
            $(this.additionalControlNameInputSelector).change(function() {
                G.additionalControlNameChanged()
            }),
            $(this.getInitialRiskBtnSelector).click(function() {
                G.showRiskMatrix(!0)
            }),
            $(this.getResidualRiskBtnSelector).click(function() {
                G.showRiskMatrix(!1)
            }),
            $(this.acceptRiskMatrixBtnSelector).click(function() {
                G.acceptRiskMatrix()
            })
        }
        return t.prototype.selectControls = function() {
            var o = this
              , i = this
              , n = [];
            $(i.controlCheckboxSelector).each(function(t, e) {
                if ($(e).is(":checked")) {
                    var o = $(i.controlsGridSelector).data("kendoGrid").dataItem($(e).closest(".control-row"));
                    n.push(o)
                }
            }),
            $(n).each(function(t, e) {
                $(o.chosenControlsGridSelector).data("kendoGrid").dataSource.add(e),
                $(o.controlsGridSelector).data("kendoGrid").dataSource.remove(e)
            }),
            i.ExistingControlsWereAdded = !0
        }
        ,
        t.prototype.deselectControls = function() {
            var o = this
              , i = this
              , n = [];
            $(i.chosenControlsCheckboxSelector).each(function(t, e) {
                $(e).is(":checked") && n.push($(i.chosenControlsGridSelector).data("kendoGrid").dataItem($(e).closest(".control-row")))
            }),
            $(n).each(function(t, e) {
                $(o.controlsGridSelector).data("kendoGrid").dataSource.add(e),
                $(o.chosenControlsGridSelector).data("kendoGrid").dataSource.remove(e)
            })
        }
        ,
        t.prototype.saveControlsFromGrid = function() {
            var t = $(this.chosenControlsGridSelector).data("kendoGrid").dataSource.data().toJSON();
            $(this.chosenControlsJsonSelector).val(JSON.stringify(t))
        }
        ,
        t.prototype.savePrerequisiteValue = function(t) {
            var e = $(t)
              , o = $(this.chosenControlsGridSelector).data("kendoGrid")
              , i = o.dataItem(e.closest("tr"));
            i.IsPrerequisite = e.is(":checked"),
            i.IsCompletion && (i.IsCompletion = !1),
            o.refresh()
        }
        ,
        t.prototype.saveCompletionValue = function(t) {
            var e = $(t)
              , o = $(this.chosenControlsGridSelector).data("kendoGrid")
              , i = o.dataItem(e.closest("tr"));
            i.IsCompletion = e.is(":checked"),
            i.IsPrerequisite && (i.IsPrerequisite = !1),
            o.refresh()
        }
        ,
        t.prototype.changeAllControls = function() {
            var t = $(this.selectAllControlsSelector).is(":checked");
            $(this.controlCheckboxSelector).each(function() {
                $(this).is(":checked") != t && $(this).click()
            })
        }
        ,
        t.prototype.additionalControlNameChanged = function() {
            var t = !$(this.additionalControlNameInputSelector).val();
            $(this.additionalControlNameInputSelector).attr("disabled", t)
        }
        ,
        t.prototype.changeAllChosenControls = function() {
            var t = $(this.selectAllChosenControlsSelector).is(":checked");
            $(this.chosenControlsCheckboxSelector).prop("checked", t)
        }
        ,
        t.prototype.addAdditionalControl = function() {
            var t = $(this.additionalControlNameInputSelector).val().trim();
            t && !this.isExistControlNameDuplicate(t) && (this.addAdditionalControlObject(t, null, null),
            $(this.additionalControlNameInputSelector).val(""))
        }
        ,
        t.prototype.addAdditionalControlObject = function(t, e, o) {
            $(this.controlsGridSelector).data("kendoGrid").dataSource.insert(0, {
                IsCustomControl: !0,
                HazardControlName: t,
                Id: --this.identifierCounter,
                EnglishControlName: e,
                IsPrerequisite: !1,
                IsCompletion: !1,
                HazardControlNameLocalization: {
                    Value: o
                }
            })
        }
        ,
        t.prototype.isExistControlNameDuplicate = function(e) {
            var t = ($(this.controlsGridSelector).data("kendoGrid").dataSource.data() || []).slice(0)
              , o = ($(this.chosenControlsGridSelector).data("kendoGrid").dataSource.data() || []).slice(0)
              , i = t.concat(o).some(function(t) {
                return nullable(t.EnglishControlName).toUpperCase() === e.toUpperCase() || nullable(t.HazardControlName).toUpperCase() === e.toUpperCase() || nullable(nullable(t.HazardControlNameLocalization).Value).toUpperCase() === e.toUpperCase()
            });
            return new Core.ShowValidation(this.hazardAndControlDuplicationError,i),
            i
        }
        ,
        t.prototype.findAndCheckExistingControl = function(o, i, n) {
            var r = this
              , a = !1
              , c = $(r.controlsGridSelector).data("kendoGrid");
            return $(".control-row").each(function(t, e) {
                $(e).find(".control-name-cell").text().trim() == o && ($(e).find(r.controlCheckboxSelector).click(),
                c.dataItem(e).IsPrerequisite = i,
                c.dataItem(e).IsCompletion = n,
                a = !0)
            }),
            a
        }
        ,
        t.prototype.addMandatoryControls = function() {
            var t = this;
            if (!this.MandatoryControlsWereAdded) {
                var e = $(this.controlsGridSelector).data("kendoGrid").dataSource.data().filter(function(t) {
                    return 1 == t.IsMandatoryPreselected
                });
                $(e).each(function() {
                    t.findAndCheckExistingControl(this.HazardControlName, this.IsPrerequisite, this.IsCompletion)
                }),
                this.MandatoryControlsWereAdded = !0,
                this.selectControls()
            }
        }
        ,
        t.prototype.checkMandatoryControls = function(t) {
            var e = $(t)
              , o = $(t).closest(".k-grid").data("kendoGrid");
            o.dataItem(e.closest("tr")).IsMandatoryPreselected && e.closest(".k-grid").find(".control-item-checkbox").each(function() {
                o.dataItem($(this).closest("tr")).IsMandatoryPreselected && $(this).is(":checked") !== e.is(":checked") && $(this).click()
            })
        }
        ,
        t.prototype.updateCheckBoxState = function() {
            var t = !$(this.chosenControlsCheckboxSelector).is(":checked");
            $(this.removeControlsBtnSelector).attr("disabled", t)
        }
        ,
        t.prototype.addExistingControls = function() {
            var t = this
              , e = $(this.chosenControlsJsonSelector).val();
            if (!this.ExistingControlsWereAdded) {
                if (e) {
                    var o = JSON.parse(e)
                      , i = $(this.chosenControlsGridSelector).data("kendoGrid").dataSource;
                    $(o).each(function() {
                        this.IsCustomControl && t.addAdditionalControlObject(nullable(this.HazardControlName), this.EnglishControlName, null != this.HazardControlNameLocalization ? nullable(this.HazardControlNameLocalization.Value) : "")
                    }),
                    $(o).each(function() {
                        t.findAndCheckExistingControl(nullable(this.HazardControlName), this.IsPrerequisite, this.IsCompletion) || i.add(this)
                    })
                }
                this.selectControls()
            }
        }
        ,
        t.prototype.setAlarpCheckbox = function(t, e, o) {
            var i = this.getAvailabilityStatus(e, t)
              , n = i !== this.AlarpStatuses.selectable
              , r = i === this.AlarpStatuses.always;
            o || $(this.alarpCheckBoxSelector).prop("checked", r),
            $(this.alarpCheckBoxSelector).prop("disabled", n)
        }
        ,
        t.prototype.showRiskMatrix = function(t) {
            var e = (this.isInitialRiskMatrix = t) ? $(this.initialSeveritySelector).val() : $(this.residualSeveritySelector).val()
              , o = t ? $(this.initialLikelihoodSelector).val() : $(this.residualLikelihoodSelector).val();
            "" !== e ? $("[likelihood=" + this.convertNumberToLetter(o) + "][severity=" + e + "]").click() : this.clearRiskMatrix(),
            $(this.riskMatrixSelector).data("kendoWindow").center().open()
        }
        ,
        t.prototype.clearRiskMatrix = function() {
            $(".risk-cell").removeClass("risk-cell-selected"),
            $(this.matrixSeverityText).text(""),
            $(this.matrixLikelihoodText).text("")
        }
        ,
        t.prototype.acceptRiskMatrix = function() {
            var t = $(this.matrixSeverityText).text()
              , e = $(this.matrixLikelihoodText).text();
            this.isInitialRiskMatrix ? ($(this.initialSeveritySelector).val(t),
            $(this.initialSeverityTextSelector).text(t),
            $(this.initialLikelihoodSelector).val(this.convertLetterToNumber(e)),
            $(this.initialLikelihoodTextSelector).text(e)) : ($(this.residualSeveritySelector).val(t),
            $(this.residualSeverityTextSelector).text(t),
            $(this.residualLikelihoodSelector).val(this.convertLetterToNumber(e)),
            $(this.residualLikelihoodTextSelector).text(e),
            this.setAlarpCheckbox(this.convertLetterToNumber(e), t, !1),
            this.refreshStatusBtnLabel()),
            $(this.riskMatrixSelector).data("kendoWindow").center().close()
        }
        ,
        t.prototype.loadInitialRiskValues = function() {
            var t = $(this.initialSeveritySelector).val()
              , e = this.convertNumberToLetter($(this.initialLikelihoodSelector).val())
              , o = $(this.residualSeveritySelector).val()
              , i = this.convertNumberToLetter($(this.residualLikelihoodSelector).val());
            $(this.initialSeverityTextSelector).text(t),
            $(this.initialLikelihoodTextSelector).text(e),
            $(this.residualSeverityTextSelector).text(o),
            $(this.residualLikelihoodTextSelector).text(i),
            this.setAlarpCheckbox(this.convertLetterToNumber(i), o, !0),
            this.refreshStatusBtnLabel()
        }
        ,
        t.prototype.getAvailabilityStatus = function(t, e) {
            var o;
            return $.ajax({
                url: this.getAvailabilityStatusUrl,
                async: !1,
                data: {
                    severity: t,
                    likehood: e
                },
                success: function(t) {
                    o = parseInt(t)
                }
            }),
            o
        }
        ,
        t.prototype.convertLetterToNumber = function(t) {
            return t.charCodeAt(0) - this.letterACharCode
        }
        ,
        t.prototype.convertNumberToLetter = function(t) {
            return "" == t ? "" : String.fromCharCode(this.letterACharCode + +t)
        }
        ,
        t.prototype.refreshStatusBtnLabel = function() {
            $(this.confirmControlsChangesBtnSelector).text(null === $(this.initialSeverityTextSelector).text() ? this.rejectControlsChangesString : this.acceptControlsChangesString)
        }
        ,
        t.prototype.setInitialPrerequisiteValues = function() {
            var t = $(this.chosenControlsGridSelector).data("kendoGrid").dataSource.data()
              , e = this;
            $(t).each(function() {
                this.IsPrerequisite && $("#" + e.IsPrerequisiteSelectorString + this.Id).click()
            })
        }
        ,
        t
    }();
    t.EditRA2Controls = e
}(WCC || (WCC = {})),
!function(P) {
    var t = function(w) {
        function t(t, e, o, i, n, r, a, c, s, l, d, u, h, f, p, m, g, S, v, C, y, I, k, b) {
            var x = w.call(this, o, s) || this;
            return x.formSelector = "form",
            x.hazardGroupCounter = 0,
            x.hazardCounter = 0,
            x.controlCounter = 0,
            x.sortApplied = !1,
            x.hazardGroupInnerTableSelector = t,
            x.getControlsByHazardUrl = e,
            x.hazardAndControlsGridSelector = o,
            x.controlsGridSelector = i,
            x.addSelectControlsButtonSelector = n,
            x.customControlNameInputSelector = r,
            x.addControlButtonSelector = a,
            x.hazardsTableSelector = c,
            x.controlsJsonSelector = s,
            x.riskAssessmentId = l,
            x.additionalHazardNameInputSelector = d,
            x.additionalHazardGroupName = u,
            x.addCustomHazardsBtnSelector = h,
            x.removeSelectedHazardAndControlsButtonSelector = f,
            x.selectAllControlsCheckboxSelector = p,
            x.controlsCheckboxSelector = m,
            x.selectedControlsCheckboxSelector = g,
            x.selectAllSelectedControlsCheckboxSelector = S,
            x.isPrerequisiteSelector = v,
            x.controlsGridHazardNameSelector = y,
            x.hazardVisibility = new P.RaHazardgroupHazardVisibility(x.hazardGroupInnerTableSelector),
            x.installationId = k,
            x.hazardAndControlDuplicationError = b,
            $(document).ready(function() {
                initializeLocaleValidation(),
                $(x.addSelectControlsButtonSelector).click(function() {
                    x.onAddSelectedControlsButtonClick()
                }),
                $(x.addCustomHazardsBtnSelector).click(function() {
                    x.addCustomHazard()
                }),
                $(x.addControlButtonSelector).click(function() {
                    x.onAddCustomControlButtonClick()
                }),
                $(x.removeSelectedHazardAndControlsButtonSelector).click(function() {
                    x.onRemoveSelectedHazardAndControlsButtonClick()
                }),
                $(x.selectAllControlsCheckboxSelector).click(function() {
                    x.changeAllControls()
                }),
                $(x.selectAllSelectedControlsCheckboxSelector).click(function() {
                    x.changeAllselectedControls()
                }),
                $("form").submit(function() {
                    x.saveControlsFromGrid()
                }),
                I || ($(x.customControlNameInputSelector).on("input", function() {
                    x.disableBtnWhenTextBoxEmpty(x.addControlButtonSelector, x.customControlNameInputSelector)
                }),
                $(x.additionalHazardNameInputSelector).on("input", function() {
                    x.disableBtnWhenTextBoxEmpty(x.addCustomHazardsBtnSelector, x.additionalHazardNameInputSelector)
                }))
            }),
            x
        }
        return __extends(t, w),
        t.prototype.disableBtnWhenCheckBoxesNotChecked = function(t, e) {
            var o = !$(e).is(":checked");
            $(t).attr("disabled", o)
        }
        ,
        t.prototype.applySorting = function() {
            this.sortApplied || ($(this.controlsGridSelector).getKendoGrid().dataSource.sort([{
                field: "IsMandatoryPreselected",
                dir: "desc"
            }, {
                field: "HazardControlName",
                dir: "asc"
            }]),
            $(this.hazardAndControlsGridSelector).getKendoGrid().dataSource.sort([{
                field: "OrderId",
                dir: "asc"
            }, {
                field: "IsMandatoryPreselected",
                dir: "desc"
            }, {
                field: "ControlName",
                dir: "asc"
            }]),
            this.sortApplied = !0)
        }
        ,
        t.prototype.disableBtnWhenTextBoxEmpty = function(t, e) {
            var o = !$(e).val();
            $(t).attr("disabled", o)
        }
        ,
        t.prototype.onAddSelectedControlsButtonClick = function() {
            var i = this
              , o = $(i.controlsGridSelector).data("kendoGrid")
              , n = $(i.hazardAndControlsGridSelector).data("kendoGrid")
              , r = [];
            $(i.controlsCheckboxSelector).each(function(t, e) {
                $(e).is(":checked") && r.push(o.dataItem($(e).closest("[role=row]")))
            }),
            0 != r.length && ($(r).each(function(t, e) {
                var o = e;
                n.dataSource.add({
                    Id: o.get("Id"),
                    HazardNameLocalization: "object" == typeof i.currentHazard.HazardNameLocalization ? i.currentHazard.HazardNameLocalization : {
                        Value: i.currentHazard.HazardNameLocalization
                    },
                    ControlNameLocalization: o.get("HazardControlNameLocalization"),
                    HazardName: i.currentHazard.HazardName,
                    EnglishHazardName: i.currentHazard.EnglishHazardName,
                    ControlName: o.get("HazardControlName"),
                    EnglishControlName: o.get("EnglishControlName"),
                    IsCustomControl: o.get("IsCustomControl"),
                    IsCustomHazard: o.get("IsCustomHazard") && i.currentHazard.Id < 0,
                    IsPrerequisite: !1,
                    IsCompletion: !1,
                    RiskAssessmentId: i.riskAssessmentId,
                    IsMandatoryPreselected: o.get("IsMandatoryPreselected"),
                    OrderId: i.getMaxOrderId() + 1
                })
            }),
            $(r).each(function(t, e) {
                o.dataSource.remove(e)
            }),
            n.refresh(),
            i.saveControlsFromGrid(),
            0 == o.items().length && $(i.addSelectControlsButtonSelector).attr("disabled", "disabled")),
            this.disableBtnWhenCheckBoxesNotChecked(this.removeSelectedHazardAndControlsButtonSelector, this.selectedControlsCheckboxSelector),
            this.disableBtnWhenCheckBoxesNotChecked(this.addSelectControlsButtonSelector, this.controlsCheckboxSelector)
        }
        ,
        t.prototype.saveControlsFromGrid = function() {
            var t = $(this.hazardAndControlsGridSelector).data("kendoGrid").dataSource.data().toJSON();
            $(this.controlsJsonSelector).val(JSON.stringify(t))
        }
        ,
        t.prototype.selectHazard = function(t) {
            var e = this;
            e.selectedHazardGroup = $(t).closest(".hazard-row");
            var o = $(this.hazardsTableSelector).data("kendoGrid").dataItem(e.selectedHazardGroup)
              , i = $(t).parent().parent().children().index($(t).parent())
              , n = o.Hazards[i];
            e.currentHazard = n,
            $.post({
                url: this.getControlsByHazardUrl,
                data: {
                    hazardId: n.Id,
                    installationId: this.installationId
                }
            }).done(function(t) {
                t = e.getNotSelectedControls(t),
                $(e.controlsGridSelector).data("kendoGrid").dataSource.data(t)
            }).fail(function() {
                $(e.controlsGridSelector).data("kendoGrid").dataSource.data([])
            }).always(function() {
                e.hideOrShowControlsOnControlsGrid(!0),
                $(e.controlsGridHazardNameSelector).text(e.currentHazard.HazardName + " - "),
                e.disableBtnWhenCheckBoxesNotChecked(e.addSelectControlsButtonSelector, e.controlsCheckboxSelector)
            })
        }
        ,
        t.prototype.checkHazardMandatoryControls = function(t) {
            var e = $(t)
              , o = $(this.hazardAndControlsGridSelector).data("kendoGrid")
              , i = o.dataItem(e.closest("tr"));
            i.IsMandatoryPreselected && $(this.selectedControlsCheckboxSelector).each(function() {
                var t = o.dataItem($(this).closest("tr"));
                t.IsMandatoryPreselected && i.HazardName === t.HazardName && $(this).is(":checked") != e.is(":checked") && $(this).click()
            })
        }
        ,
        t.prototype.changeAllControls = function() {
            var t = $(this.selectAllControlsCheckboxSelector).is(":checked");
            $(this.controlsCheckboxSelector).each(function() {
                $(this).is(":checked") != t && $(this).click()
            })
        }
        ,
        t.prototype.changeAllselectedControls = function() {
            var t = $(this.selectAllSelectedControlsCheckboxSelector).is(":checked");
            $(this.selectedControlsCheckboxSelector).each(function() {
                $(this).is(":checked") != t && $(this).click()
            })
        }
        ,
        t.prototype.savePrerequisiteValue = function(t) {
            var e = $(t)
              , o = $(this.hazardAndControlsGridSelector).getKendoGrid()
              , i = o.dataItem(e.closest("tr"));
            i.IsPrerequisite = e.is(":checked"),
            i.IsCompletion && (i.IsCompletion = !1),
            o.refresh()
        }
        ,
        t.prototype.saveCompletionValue = function(t) {
            var e = $(t)
              , o = $(this.hazardAndControlsGridSelector).getKendoGrid()
              , i = o.dataItem(e.closest("tr"));
            i.IsCompletion = e.is(":checked"),
            i.IsPrerequisite && (i.IsPrerequisite = !1),
            o.refresh()
        }
        ,
        t.prototype.onRemoveSelectedHazardAndControlsButtonClick = function() {
            var o = this
              , i = $(o.controlsGridSelector).data("kendoGrid")
              , n = $(o.hazardAndControlsGridSelector).data("kendoGrid")
              , r = [];
            $(o.selectedControlsCheckboxSelector).each(function(t, e) {
                $(e).is(":checked") && r.push($(o.hazardAndControlsGridSelector).data("kendoGrid").dataItem($(e).closest("[role=row]")))
            }),
            $(r).each(function(t, e) {
                o.currentHazard && e.get("HazardName") === o.currentHazard.HazardName && i.dataSource.add({
                    Id: e.get("Id"),
                    HazardControlName: e.get("ControlName"),
                    IsChecked: !1,
                    IsCustomControl: e.get("IsCustomControl"),
                    IsMandatoryPreselected: e.get("IsMandatoryPreselected")
                })
            }),
            $(r).each(function(t, e) {
                n.dataSource.remove(e)
            }),
            i.dataSource.sort({
                field: "HazardControlName",
                dir: "asc"
            }),
            i.refresh(),
            this.disableBtnWhenCheckBoxesNotChecked(this.removeSelectedHazardAndControlsButtonSelector, this.selectedControlsCheckboxSelector),
            this.disableBtnWhenCheckBoxesNotChecked(this.addSelectControlsButtonSelector, this.controlsCheckboxSelector),
            this.saveControlsFromGrid()
        }
        ,
        t.prototype.onAddCustomControlButtonClick = function() {
            var t = this;
            if (null != t.currentHazard) {
                var e = $(t.customControlNameInputSelector).val().trim();
                if (t.isExistControlNameDuplicate(e))
                    return;
                $(t.customControlNameInputSelector).val("");
                var o = $(t.controlsGridSelector).data("kendoGrid");
                if ("" !== e) {
                    var i = [];
                    o.select().each(function(t, e) {
                        i.push(e.getAttribute("data-uid"))
                    }),
                    o.dataSource.insert(0, {
                        HazardControlName: e,
                        IsCustomControl: !0,
                        Id: --t.controlCounter,
                        IsCustomHazard: t.currentHazard.IsCustomHazard
                    }),
                    i.forEach(function(t) {
                        var e = o.table.find('tr[data-uid="' + t + '"]');
                        o.select(e)
                    }),
                    this.disableBtnWhenCheckBoxesNotChecked(this.addSelectControlsButtonSelector, this.controlsCheckboxSelector),
                    this.disableBtnWhenTextBoxEmpty(this.addControlButtonSelector, this.customControlNameInputSelector)
                }
            }
            $(t.addSelectControlsButtonSelector).show()
        }
        ,
        t.prototype.isExistControlNameDuplicate = function(e) {
            var o = this;
            e = e.trim();
            var t = ($(this.controlsGridSelector).data("kendoGrid").dataSource.data() || []).slice(0)
              , i = ($(this.hazardAndControlsGridSelector).data("kendoGrid").dataSource.data() || []).slice(0)
              , n = t.concat(i).filter(function(t) {
                return o.compareNames(t.EnglishControlName, e) || o.compareNames(t.ControlName, e) || o.compareNames(t.HazardControlName, e) || o.compareNames(nullable(t.ControlNameLocalization).Value, e) || o.compareNames(nullable(t.HazardControlNameLocalization).Value, e)
            }).some(function(t) {
                return o.compareNames(t.EnglishHazardName, o.currentHazard.EnglishHazardName) || o.compareNames(t.HazardName, o.currentHazard.HazardName) || o.compareNames(nullable(t.HazardNameLocalization).Value, nullable(o.currentHazard.HazardNameLocalization).Value)
            });
            return new Core.ShowValidation(this.hazardAndControlDuplicationError,n),
            n
        }
        ,
        t.prototype.isExistHazardNameDuplicate = function(e) {
            var o = this
              , t = ($(this.hazardsTableSelector).data("kendoGrid").dataSource.data().slice(0).reduce(function(t, e) {
                return t.concat(nullable(e.Hazards).slice(0))
            }, []) || []).some(function(t) {
                return o.compareNames(t.EnglishHazardName, e) || o.compareNames(t.HazardName, e) || o.compareNames(nullable(t.HazardNameLocalization).Value, e)
            });
            return new Core.ShowValidation(this.hazardAndControlDuplicationError,t),
            t
        }
        ,
        t.prototype.addCustomHazard = function() {
            var o = this
              , t = $(this.additionalHazardNameInputSelector).val().trim();
            t && !o.isExistHazardNameDuplicate(t) && this.addCustomHazardObject(t),
            $(this.additionalHazardNameInputSelector).val(""),
            this.disableBtnWhenCheckBoxesNotChecked(this.removeSelectedHazardAndControlsButtonSelector, this.selectedControlsCheckboxSelector),
            this.disableBtnWhenTextBoxEmpty(this.addCustomHazardsBtnSelector, this.additionalHazardNameInputSelector),
            this.hazardVisibility.showHazards($(".hazards-hazardGroup-name").filter(function(t, e) {
                return $.trim(e.innerHTML) === o.additionalHazardGroupName
            }), !0)
        }
        ,
        t.prototype.addCustomHazardObject = function(t, e, o, i) {
            void 0 === e && (e = null),
            void 0 === o && (o = null),
            void 0 === i && (i = !1);
            var n = $(this.hazardsTableSelector).data("kendoGrid").dataSource
              , r = this.findAdditionalHazard()
              , a = {
                HazardName: t,
                IsCustomHazard: !i,
                Id: --this.hazardCounter,
                HazardNameLocalization: {
                    Value: e
                },
                EnglishHazardName: o
            };
            r ? r.Hazards.push(a) : n.insert(0, {
                HazardGroupName: this.additionalHazardGroupName,
                Hazards: [a],
                IconName: "Additional.gif",
                IsCustomHazardGroup: !0,
                Id: --this.hazardGroupCounter
            })
        }
        ,
        t.prototype.findAdditionalHazard = function() {
            for (var t = $(this.hazardsTableSelector).data("kendoGrid").dataSource, e = 0; e < t.total(); e++)
                if (t.data()[e].HazardGroupName == this.additionalHazardGroupName)
                    return t.data()[e];
            return null
        }
        ,
        t.prototype.getMaxOrderId = function() {
            var t = $(this.hazardAndControlsGridSelector).data("kendoGrid").dataSource
              , e = Math.max.apply(Math, t.data().map(function(t) {
                return t.OrderId
            }));
            return isFinite(e) ? e : 0
        }
        ,
        t.prototype.addAdditionalCustomHazards = function() {
            var e = this
              , t = $(this.hazardAndControlsGridSelector).data("kendoGrid").dataSource.data()
              , i = $(this.hazardsTableSelector).data("kendoGrid").dataSource.data().map(function(t) {
                return t.Hazards.map(function(t) {
                    return t.HazardName
                })
            }).reduce(function(t, e) {
                return t.concat(e)
            });
            t.filter(function(t, e, o) {
                return $.inArray(t.HazardName.trim(), i) < 0 && o.map(function(t) {
                    return t.HazardName
                }).indexOf(t.HazardName) === e
            }).forEach(function(t) {
                return e.addCustomHazardObject(t.HazardName, nullable(t.HazardNameLocalization).Value, t.EnglishHazardName, !t.IsCustomHazard)
            })
        }
        ,
        t.prototype.getNotSelectedControls = function(t) {
            var e = $(this.hazardAndControlsGridSelector).data("kendoGrid").dataSource.data().toJSON()
              , o = [];
            return e.forEach(function(t) {
                o.push(t.ControlName)
            }),
            t.filter(function(t) {
                return o.indexOf(t.HazardControlName) < 0
            })
        }
        ,
        t.prototype.hideOrShowControlsOnControlsGrid = function(t) {
            $(this.addSelectControlsButtonSelector).toggle(t),
            $(this.customControlNameInputSelector).toggle(t),
            $(this.addControlButtonSelector).toggle(t)
        }
        ,
        t.prototype.compareNames = function(t, e) {
            var o = nullable(t).toUpperCase();
            return !!o && o === nullable(e).toUpperCase()
        }
        ,
        t
    }(Common.GridInitialDataLoad);
    P.UpdateRA = t
}(WCC || (WCC = {})),
!function(t) {
    var e = function(s) {
        function t(t, e, o, i, n, r, a) {
            var c = s.call(this, o, r) || this;
            return c.parentId = t,
            c.deleteButtonSelector = e,
            c.deleteSelectedItemsUrl = i,
            c.listParametrName = n,
            c.confirmDialog = a,
            $(c.deleteButtonSelector).click(function() {
                c.onDeleteButtonClick()
            }),
            c
        }
        return __extends(t, s),
        t.prototype.onDeleteButtonClick = function() {
            var e = this
              , o = $(this.gridSelector).data("kendoGrid")
              , i = this.getDeleteItemsData();
            i.ItemIds.length && this.confirmDialog.showConfirmation().then(function(t) {
                $.post(e.deleteSelectedItemsUrl, i).done(function(t) {
                    o.dataSource.read()
                })
            })
        }
        ,
        t.prototype.getDeleteItemsData = function() {
            var e = $(this.gridSelector).data("kendoGrid")
              , t = e.select()
              , o = $.map(t, function(t) {
                return e.dataItem(t).get("Id")
            });
            return {
                ParentId: this.parentId,
                ItemIds: o
            }
        }
        ,
        t
    }(t.GridInitialDataLoad);
    t.CreateDelete = e
}(Common || (Common = {}));
function(t) {
    var e = function() {
        function t(t, e, o) {
            var i = this;
            this.certificateCategorySelector = t,
            this.validityPeriodSelector = e,
            this.getDefaultValidityPeriodUrl = o,
            $(this.certificateCategorySelector).change(function(t) {
                i.updateValidityPeriod(t)
            })
        }
        return t.prototype.updateValidityPeriod = function(t) {
            var o = this
              , e = $(t.target).val();
            $.get({
                url: o.getDefaultValidityPeriodUrl + "?categoryId=" + e,
                success: function(t) {
                    var e = $(o.validityPeriodSelector).data("kendoNumericTextBox");
                    e.max(t),
                    e.value(t)
                }
            })
        }
        ,
        t
    }();
    t.CreateEdit = e
}(SCC || (SCC = {}));
!function(t) {
    var e = function(P) {
        function t(t, e, o, i, n, r, a, c, s, l, d, u, h, f, p, m, g, S, v, C, y, I, k, b, x) {
            var w = P.call(this, null, null, null, null, null, null, null, null, null, t, null, null, null) || this;
            w.isUpdateMode = !1,
            w.isLoadingDataFromObject = !1,
            w.availableIsolationStateIndexes = [1, 2],
            w.rowForEditUid = null;
            return w.kendoGridRowReorder = new Common.KendoGridRowReorder(g,{
                rowNumberCellSelector: ".point-index"
            }),
            w.tagNumberSelector = r,
            w.descriptionSelector = a,
            w.commentSelector = c,
            w.isLockedOpenSelector = s,
            w.addPointBtnSelector = u,
            w.pointIndexLabelSelector = m,
            w.isolationPointsGridSelector = g,
            w.updatePointBtnSelector = h,
            w.editPointBtnSelector = f,
            w.removePointBtnSelector = p,
            w.isolationPointTypeSelector = e,
            w.isolationPointMethodSelector = o,
            w.isolationPointStateSelector = i,
            w.deisolationPointStateSelector = n,
            w.getIsolationMethodsByTypeUrl = l,
            w.getIsolationStatesByMethodUrl = d,
            w.disabledBeforeDataBoundBtnsSelector = S,
            w.pointRadioBtnSelector = v,
            w.cancelPointBtnSelector = C,
            w.acceptBtnSelector = y,
            w.certificateId = I,
            w.pointsJsonSelector = k,
            w.newText = b,
            w.orderIdFieldName = x,
            $(w.isolationPointTypeSelector).change(function() {
                w.updateIsolationPointMethods()
            }),
            $(w.isolationPointMethodSelector).change(function() {
                w.updateIsolationPointStates()
            }),
            $(w.isolationPointStateSelector).change(function() {
                w.selectDeisolationStateWhenSelectedIsolationState()
            }),
            $(w.updatePointBtnSelector).click(function() {
                w.updateIsolationPoint()
            }),
            $(w.editPointBtnSelector).click(function() {
                w.editIsolationPointsBtnClick()
            }),
            $(w.removePointBtnSelector).click(function() {
                w.removeIsolationPoint()
            }),
            $(w.cancelPointBtnSelector).click(function() {
                w.onCancelBtnClick()
            }),
            w
        }
        return __extends(t, P),
        t.prototype.onBoundPointMethod = function() {
            this.isLoadingDataFromObject && $(this.isolationPointMethodSelector).data("kendoDropDownList").value(this.tempPointObject.IsolationPointMethodId)
        }
        ,
        t.prototype.selectDeisolationStateWhenSelectedIsolationState = function() {
            if (!this.isUpdateMode) {
                var t = $(this.isolationPointStateSelector).data("kendoDropDownList").select()
                  , e = $(this.deisolationPointStateSelector).data("kendoDropDownList");
                0 < t ? e.select(this.getOppositeIsolationStateIndex(t)) : e.select(0)
            }
        }
        ,
        t.prototype.getOppositeIsolationStateIndex = function(e) {
            return this.availableIsolationStateIndexes.filter(function(t) {
                return t != e
            })[0]
        }
        ,
        t.prototype.selectPoint = function(t) {
            $("".concat(this.editPointBtnSelector, ",").concat(this.removePointBtnSelector)).toggle(!$(t.currentTarget).data("hasCurrentState"))
        }
        ,
        t.prototype.onCancelBtnClick = function() {
            this.isUpdateMode = !1,
            $(this.addPointBtnSelector).show(),
            $(this.editPointBtnSelector).hide(),
            $(this.removePointBtnSelector).hide(),
            $(this.updatePointBtnSelector).hide(),
            $(this.cancelPointBtnSelector).hide(),
            this.rowForEditUid = null,
            this.resetInputs()
        }
        ,
        t.prototype.initializeDataInGrid = function() {
            var t = $(this.pointsJsonSelector).val();
            if (t) {
                var e = JSON.parse(t)
                  , o = new kendo.data.DataSource({
                    data: e,
                    sort: {
                        field: this.orderIdFieldName,
                        dir: "asc"
                    }
                });
                $(this.isolationPointsGridSelector).data("kendoGrid").setDataSource(o)
            }
        }
        ,
        t.prototype.updateIsolationPointMethods = function() {
            var e = this
              , t = $(this.isolationPointTypeSelector).val();
            $.ajax({
                method: "GET",
                url: this.getIsolationMethodsByTypeUrl + "/" + t,
                success: function(t) {
                    fillDropDown(e.isolationPointMethodSelector, t),
                    e.onBoundPointMethod(),
                    e.updateIsolationPointStates()
                }
            })
        }
        ,
        t.prototype.updateIsolationPointStates = function() {
            var e = this
              , t = $(this.isolationPointMethodSelector).val();
            $.ajax({
                method: "GET",
                url: this.getIsolationStatesByMethodUrl + "/" + t,
                success: function(t) {
                    $(e.isolationPointStateSelector).data("kendoDropDownList").value(null),
                    $(e.deisolationPointStateSelector).data("kendoDropDownList").value(null),
                    fillDropDown(e.isolationPointStateSelector, t),
                    fillDropDown(e.deisolationPointStateSelector, t),
                    e.onBoundPointStates()
                }
            })
        }
        ,
        t.prototype.isFormValid = function() {
            var t = $('[data-role="validator"]').data("kendoValidator").validate();
            return this.markInvalidItems(),
            t
        }
        ,
        t.prototype.markInvalidItems = function() {
            var o = this;
            $(".k-valid").each(function(t, e) {
                o.setValidationState(e, !0)
            }),
            $(".k-invalid").each(function(t, e) {
                o.setValidationState(e, !1)
            })
        }
        ,
        t.prototype.addIsolationPoint = function() {
            if (this.isFormValid()) {
                this.kendoGridRowReorder.updateOrderForGridData();
                var t = $(this.isolationPointsGridSelector).data("kendoGrid").dataSource
                  , e = this.getPointObjectFilledWithInputs();
                e.OrderId = this.GetMaxPointIndex() + 1,
                e.PointIndex = this.GetMaxPointIndex() + 1,
                e.IsolationCertificateId = this.certificateId,
                t.add(e),
                this.resetInputs(),
                this.resetValidationStates()
            }
        }
        ,
        t.prototype.onBoundPointStates = function() {
            this.isLoadingDataFromObject && ($(this.isolationPointStateSelector).data("kendoDropDownList").value(this.tempPointObject.IsolationPointStateId),
            $(this.deisolationPointStateSelector).data("kendoDropDownList").value(this.tempPointObject.DeisolationPointStateId),
            this.isLoadingDataFromObject = !1)
        }
        ,
        t.prototype.IsolationPointsGridBound = function() {
            $(this.disabledBeforeDataBoundBtnsSelector).removeAttr("disabled"),
            this.kendoGridRowReorder.initializeReorder()
        }
        ,
        t.prototype.GetMaxPointIndex = function() {
            var t = $(this.isolationPointsGridSelector).data("kendoGrid").dataSource.data().map(function(t) {
                return t.PointIndex
            });
            return 0 < t.length ? Math.max.apply(Math, t) : 0
        }
        ,
        t.prototype.acceptChanges = function() {
            this.kendoGridRowReorder.updateOrderForGridData();
            var t = $(this.isolationPointsGridSelector).data("kendoGrid").dataSource.data().toJSON()
              , e = JSON.stringify(t);
            $(this.pointsJsonSelector).val(e),
            document.forms[0].submit()
        }
        ,
        t.prototype.loadObjectToInputs = function() {
            var t = this.getSelectedPoint();
            $(this.pointIndexLabelSelector).html(t.PointIndex),
            $(this.tagNumberSelector).val(t.TagNumber),
            $(this.commentSelector).val(t.Comment),
            $(this.descriptionSelector).val(t.Description),
            this.tempPointObject = t,
            this.isLoadingDataFromObject = !0,
            $(this.isolationPointTypeSelector).data("kendoDropDownList").value(t.IsolationPointTypeId),
            $(this.isLockedOpenSelector).data("kendoDropDownList").value(t.IsLockedOpen),
            this.updateIsolationPointMethods()
        }
        ,
        t.prototype.getSelectedPoint = function() {
            var t = $("[name=iccpoint]:checked").closest("tr").data("uid");
            return $(this.isolationPointsGridSelector).data("kendoGrid").dataSource.getByUid(t)
        }
        ,
        t.prototype.removeIsolationPoint = function() {
            this.kendoGridRowReorder.updateOrderForGridData();
            var t = this.getSelectedPoint();
            $(this.isolationPointsGridSelector).data("kendoGrid").dataSource.remove(t),
            this.optimizeOrderId(),
            $(this.addPointBtnSelector).show(),
            $(this.editPointBtnSelector).hide(),
            $(this.removePointBtnSelector).hide(),
            $(this.updatePointBtnSelector).hide(),
            $(this.cancelPointBtnSelector).hide()
        }
        ,
        t.prototype.editIsolationPointsBtnClick = function() {
            this.isUpdateMode = !0,
            this.rowForEditUid = $("[name=iccpoint]:checked").closest("tr").data("uid"),
            this.loadObjectToInputs(),
            $(this.pointRadioBtnSelector).attr("disabled", "disabled"),
            $(this.updatePointBtnSelector).show(),
            $(this.cancelPointBtnSelector).show(),
            $(this.addPointBtnSelector).hide(),
            $(this.editPointBtnSelector).hide()
        }
        ,
        t.prototype.updateIsolationPoint = function() {
            if (this.isUpdateMode = !1,
            this.isFormValid()) {
                this.kendoGridRowReorder.updateOrderForGridData();
                var t = $(this.isolationPointsGridSelector).data("kendoGrid").dataSource.getByUid(this.rowForEditUid)
                  , e = this.getPointObjectFilledWithInputs();
                e.PointIndex = t.PointIndex,
                e.Id = t.Id,
                e.OrderId = t.OrderId,
                e.IsolationCertificateId = t.IsolationCertificateId,
                $(this.isolationPointsGridSelector).data("kendoGrid").dataSource.remove(t),
                $(this.isolationPointsGridSelector).data("kendoGrid").dataSource.add(e),
                $(this.isolationPointsGridSelector).data("kendoGrid").refresh(),
                this.resetInputs(),
                this.resetValidationStates(),
                $(this.updatePointBtnSelector).hide(),
                $(this.cancelPointBtnSelector).hide(),
                $(this.addPointBtnSelector).show(),
                $(this.removePointBtnSelector).hide(),
                $(this.editPointBtnSelector).hide(),
                $(this.pointRadioBtnSelector).removeAttr("disabled"),
                this.rowForEditUid = null
            }
        }
        ,
        t.prototype.getPointObjectFilledWithInputs = function() {
            var t = this;
            return {
                TagNumber: $(t.tagNumberSelector).val(),
                Description: $(t.descriptionSelector).val(),
                IsolationPointTypeId: $(t.isolationPointTypeSelector).val(),
                IsolationPointType: {
                    Title: $(t.isolationPointTypeSelector).data("kendoDropDownList").text()
                },
                IsolationPointMethodId: $(t.isolationPointMethodSelector).val(),
                IsolationPointMethod: {
                    Title: $(t.isolationPointMethodSelector).data("kendoDropDownList").text()
                },
                Comment: $(t.commentSelector).val(),
                IsolationPointStateId: $(t.isolationPointStateSelector).val(),
                IsolationPointState: {
                    Title: $(t.isolationPointStateSelector).data("kendoDropDownList").text()
                },
                DeisolationPointStateId: $(t.deisolationPointStateSelector).val(),
                DeisolationPointState: {
                    Title: $(t.deisolationPointStateSelector).data("kendoDropDownList").text()
                },
                IsLockedOpen: $(t.isLockedOpenSelector).val(),
                CurrentState: null
            }
        }
        ,
        t.prototype.resetInputs = function() {
            $(this.pointIndexLabelSelector).html(this.newText),
            $(this.tagNumberSelector).val(""),
            $(this.descriptionSelector).val(""),
            $(this.isolationPointTypeSelector).data("kendoDropDownList").value(null),
            $(this.isolationPointMethodSelector).data("kendoDropDownList").value(null),
            $(this.isolationPointStateSelector).data("kendoDropDownList").value(null),
            $(this.deisolationPointStateSelector).data("kendoDropDownList").value(null),
            $(this.commentSelector).val(""),
            $(this.isLockedOpenSelector).data("kendoDropDownList").value(null)
        }
        ,
        t.prototype.optimizeOrderId = function() {
            for (var t = $(this.isolationPointsGridSelector).data("kendoGrid"), o = t.dataSource.data(), e = function(e) {
                o.find(function(t) {
                    return t.OrderId === e
                }) || o.forEach(function(t) {
                    return t.OrderId > e && t.OrderId--
                })
            }, i = 1; i <= this.GetMaxPointIndex(); i++)
                e(i);
            t.refresh()
        }
        ,
        t.prototype.resetValidationStates = function() {
            var t = this;
            $(".k-valid, .k-invalid").each(function() {
                t.setValidationState(this, !1)
            })
        }
        ,
        t.prototype.setValidationState = function(t, e) {
            $(t).closest("tbody").find("[valid-state-for=" + $(t).attr("id") + "]").children("img").attr("src", ["/images/star.svg", "/images/star-green.svg"][+e])
        }
        ,
        t
    }(Common.CascadeLists);
    t.EditIsolationPoints = e
}(ICC || (ICC = {})),
function(t) {
    var e = function() {
        function t(t, e, o) {
            var i = this;
            this.getSitesUrl = t,
            this.getInstallationsBySiteUrl = e,
            this.loginAsGuestCheckboxSelector = o,
            this.sitesDownloaded = !1,
            this.loginInputBlockSelector = "#login-inputs",
            this.loginAsGuestInputBlockSelector = "#guest-inputs",
            this.summaryContainerSelector = ".validation-summary-errors",
            this.siteSelector = "[name=SiteId]",
            this.installationSelector = "[name=InstallationId]",
            $(document).ready(function() {
                i.showPanel()
            }),
            $(this.loginAsGuestCheckboxSelector).change(function() {
                i.onLoginAsGuestCheckboxChange()
            }),
            $(this.siteSelector).change(function() {
                i.updateInstallations()
            }),
            $("#loginHelpButton").kendoTooltip({
                showOn: "click",
                autoHide: !0,
                content: function(t) {
                    return t.target.data("tooltipText")
                },
                animation: {
                    open: {
                        effects: "fade:in",
                        duration: 100
                    },
                    close: {
                        effects: "fade:out",
                        duration: 100
                    }
                },
                callout: !1
            })
        }
        return t.prototype.onLoginAsGuestCheckboxChange = function() {
            $(this.summaryContainerSelector).empty(),
            this.showPanel()
        }
        ,
        t.prototype.showPanel = function() {
            $(this.loginAsGuestCheckboxSelector).is(":checked") ? (this.setSites(),
            $(this.loginAsGuestInputBlockSelector).children().removeAttr("disabled"),
            $(this.loginAsGuestInputBlockSelector).show(),
            $(this.loginInputBlockSelector).children().attr("disabled", "disabled"),
            $(this.loginInputBlockSelector).hide()) : ($(this.loginAsGuestInputBlockSelector).children().attr("disabled", "disabled"),
            $(this.loginAsGuestInputBlockSelector).hide(),
            $(this.loginInputBlockSelector).children().removeAttr("disabled"),
            $(this.loginInputBlockSelector).show())
        }
        ,
        t.prototype.setSites = function() {
            var e = this;
            this.sitesDownloaded || $.get({
                url: "".concat(this.getSitesUrl, "?ui-culture=").concat(getCurrentCulture()),
                cache: !0,
                success: function(t) {
                    fillDropDown(e.siteSelector, t),
                    e.sitesDownloaded = !0
                }
            })
        }
        ,
        t.prototype.updateInstallations = function() {
            var e = this
              , t = $(this.siteSelector).val();
            $.get({
                url: this.getInstallationsBySiteUrl,
                data: {
                    siteId: t,
                    "ui-culture": getCurrentCulture()
                },
                cache: !0,
                success: function(t) {
                    fillDropDown(e.installationSelector, t)
                }
            })
        }
        ,
        t
    }();
    t.CreateLogin = e
}(Account || (Account = {})),
function(t) {
    var e = function() {
        function t(n, r) {
            var a = this;
            this.filterArray = [],
            $(document).ready(function() {
                var i = new Core.ValidationFromScript({
                    rules: {
                        requiredPath: function(t) {
                            var e = $(t);
                            return !e.is("[data-required]") || e.hasValue()
                        }
                    },
                    messages: {
                        requiredPath: function(t) {
                            return $(t).data("required")
                        }
                    }
                });
                $(".confirmBtn").click(function() {
                    var t = $("#path");
                    if (t.valid() && i.validateFields()) {
                        nullable(n.DataSourceRequest.Filters).length && a.getFilters(n.DataSourceRequest.Filters),
                        $.cookie("filters", JSON.stringify(a.filterArray));
                        var e = getFormRowsFromDataArray(n.SelectedIds, "itemsIdsForExport")
                          , o = $('<form action="'.concat(r, '" method="POST" enctype="application/x-www-form-urlencoded">\n                                <input type="hidden" name="path" value="').concat(t.val(), '">\n                                ').concat(e, "\n                            </form>"));
                        $(document.body).append(o),
                        $(o).submit()
                    }
                })
            })
        }
        return t.prototype.getFilters = function(t) {
            for (var e in t)
                if (t.hasOwnProperty(e)) {
                    var o = t[e];
                    "object" == typeof o && (o && o.Member && this.filterArray.push(o),
                    this.getFilters(o))
                }
        }
        ,
        t
    }();
    t.ExportCsv = e
}(Common || (Common = {})),
function(t) {
    var e = function() {
        function t(t, e, o, i, n, r, a, c, s, l) {
            var d = this;
            this.substanceGridSelector = t,
            this.locationFactorGridSelector = e,
            this.releaseFactorGridSelector = o,
            this.substanceFieldSelector = i,
            this.locationFactorFieldSelector = n,
            this.releaseFactorFieldSelector = r,
            this.minimumIsolationStandardFieldSelector = a,
            this.minimumIsolationStandardBlockSelector = c,
            this.confirmButtonSelector = s,
            this.getMinimumIsolationStandardUrl = l,
            $(document).ready(function() {
                $(d.confirmButtonSelector).click(function() {
                    d.onConfirmButtonClick()
                })
            })
        }
        return t.prototype.onConfirmButtonClick = function() {
            var t = $(this.substanceGridSelector).data("kendoGrid")
              , e = $(this.locationFactorGridSelector).data("kendoGrid")
              , o = $(this.releaseFactorGridSelector).data("kendoGrid")
              , i = t.dataItem($(t.select()[0]).parent("tr"))
              , n = e.dataItem($(e.select()[0]).parent("tr"))
              , r = o.select().children("input").val();
            i ? $(this.substanceFieldSelector).val(i.get("Id")) : $(this.substanceFieldSelector).val(null),
            n ? $(this.locationFactorFieldSelector).val(n.get("Id")) : $(this.locationFactorFieldSelector).val(null),
            $(this.releaseFactorFieldSelector).val(r)
        }
        ,
        t.prototype.onGridDataBound = function(t) {
            var e = t.sender
              , o = $("#" + e.element.attr("relative-field-name")).val();
            if (o) {
                var i = e.tbody.find("input[value=".concat(o, "]")).parent("td");
                e.select(i)
            }
        }
        ,
        t.prototype.onGridChange = function() {
            var t = $(this.substanceGridSelector).data("kendoGrid")
              , e = $(this.releaseFactorGridSelector).data("kendoGrid")
              , o = $(this.locationFactorGridSelector).data("kendoGrid");
            if (t.select().length && e.select().length && o.select().length) {
                var i = t.dataItem(t.select().parent("tr")).get("Id")
                  , n = e.select().children("input").val()
                  , r = o.dataItem(o.select().parent("tr")).get("Id")
                  , a = this;
                $.post(this.getMinimumIsolationStandardUrl, {
                    substanceId: i,
                    releaseFactorId: n,
                    locationFactorId: r
                }, function(t) {
                    $(a.minimumIsolationStandardFieldSelector).val(t.Id),
                    $(a.minimumIsolationStandardBlockSelector).text(t.Value)
                })
            } else
                $(this.minimumIsolationStandardBlockSelector).empty()
        }
        ,
        t
    }();
    t.IsolationCreateEdit = e
}(ICC || (ICC = {})),
function(Common) {
    var SearchFunctions = function() {
        function SearchFunctions(t) {
            var e = this;
            $(document).ready(function() {
                e.initializeConfiguration(t),
                e.setDropDownListEnabledDependencies(),
                e.setDropDownListsDependencies(),
                e.initializeLimitedPrintSearchResults(),
                $(e.configuration.selectors.searchButton).click(function() {
                    e.onSearchButtonClick(!1, 1)
                })
            })
        }
        return SearchFunctions.prototype.blockBySccAndIcc = function(t, e) {
            var o = tryParseInt($(t).val());
            if ($(t).is(this.configuration.selectors.locationSelector)) {
                var i = $(e).getKendoDropDownList();
                return i.select(1 < i.dataSource.total() ? this.configuration.constants.allValueCode : this.configuration.constants.firstValueCode),
                !e.prop("disabled")
            }
            return o !== this.configuration.constants.sccCode && o !== this.configuration.constants.iccCode
        }
        ,
        SearchFunctions.prototype.blockByIcc = function(t) {
            return tryParseInt($(t).val()) !== this.configuration.constants.iccCode
        }
        ,
        SearchFunctions.prototype.onDataBound = function(t) {
            $(this.configuration.selectors.searchResult).text(t.sender.dataSource.total())
        }
        ,
        SearchFunctions.prototype.initializeLimitedPrintSearchResults = function() {
            var i = this;
            $("[data-limited-print-preview=true]").on("click", function() {
                var t = i.configuration.url.printPreviewAction
                  , e = $(".k-grid").getKendoGrid().dataSource
                  , o = e.filter();
                o && "" === o.filters[0].value && e.filter([]),
                e.total() > i.configuration.constants.maxItemsLimitForPrinting ? i.configuration.confirmationDialogs.confirmPrintPreviewDialog.showConfirmation().then(function() {
                    exportCsv(".k-grid", t)
                }) : exportCsv(".k-grid", t)
            })
        }
        ,
        SearchFunctions.prototype.onSearchButtonClick = function(t, e, o) {
            var s = this;
            void 0 === t && (t = !1),
            void 0 === e && (e = null),
            void 0 === o && (o = null);
            var i = $(this.configuration.selectors.searchTable).data("kendoGrid")
              , l = []
              , d = {};
            d.Sort = o || JSON.stringify($(i.dataSource.sort())[0]),
            d.Page = e || i.dataSource.page(),
            $(this.configuration.selectors.filters).each(function(t, e) {
                var o = $(e);
                if (o.prop("disabled"))
                    return !0;
                var i = o.data(s.configuration.attributes.ignoreIfRelatedFieldIsNotEmpty);
                if (i && $("#" + i).val())
                    return d[o.attr("id")] = tryParseInt(o.val()),
                    !0;
                var n = tryParseInt(o.val());
                if ("" !== n) {
                    var r = o.attr("id")
                      , a = o.data(s.configuration.attributeNames.fieldName) || r
                      , c = o.attr(s.configuration.attributeNames.filterOperator);
                    "nullOrEq" === c ? l.push({
                        logic: "or",
                        filters: [{
                            field: a,
                            operator: "eq",
                            value: tryParseInt(n)
                        }, {
                            field: a,
                            operator: "isnull"
                        }]
                    }) : l.push({
                        field: a,
                        operator: c,
                        value: n
                    }),
                    d[r] = tryParseInt(n)
                }
            });
            var n = this.getDateValue(this.configuration.selectors.fromDatePicker);
            n && (l.push({
                field: this.configuration.fieldName.fromDate,
                operator: "gte",
                value: n
            }),
            d.FromDate = n);
            var r = this.getDateValue(this.configuration.selectors.toDatePicker);
            r && (l.push({
                field: this.configuration.fieldName.toDate,
                operator: "lte",
                value: r
            }),
            d.ToDate = r),
            t || i.dataSource.query({
                filter: this.configuration.appendFilters(l),
                sort: JSON.parse(d.Sort || null),
                page: Math.max(e, 1),
                pageSize: this.configuration.pageInformation.pageSize
            }),
            $.cookie(this.configuration.pageInformation.searchCookieName, kendo.stringify(d), {
                path: "/"
            })
        }
        ,
        SearchFunctions.prototype.getDateValue = function(t) {
            var e = $(t);
            return 0 < e.length ? e.getKendoDatePicker().value() : null
        }
        ,
        SearchFunctions.prototype.setDropDownListsDependencies = function() {
            var c = this;
            $(this.configuration.attributes.owned).each(function() {
                var i = $(this)
                  , n = i.attr(c.configuration.attributeNames.owned)
                  , r = i.data("kendoDropDownList")
                  , a = $("#" + n);
                a.change(function(t) {
                    var e = $(t.target).val()
                      , o = {};
                    o[a.attr(c.configuration.attributeNames.propertyName) || n] = e,
                    $.ajax({
                        url: i.attr(c.configuration.attributeNames.filterMethod),
                        method: i.attr(c.configuration.attributeNames.filterMethodType) || c.configuration.constants.ajaxType,
                        data: o
                    }).then(function(t) {
                        r.dataSource.data(t),
                        a.trigger("changeWithData", t),
                        i.trigger("change")
                    })
                })
            })
        }
        ,
        SearchFunctions.prototype.setDropDownListEnabledDependencies = function() {
            var self = this;
            $(this.configuration.attributes.disableByOwner).each(function() {
                var _this = this
                  , ownerSelector = $(this).data(self.configuration.attributeNames.disableByOwner);
                ownerSelector.split(",").map(function(t) {
                    return t.trim()
                }).forEach(function(selector) {
                    $(selector).on("changeWithData", function(event, arg) {
                        var handler = eval($(_this).data(self.configuration.attributeNames.disableExpression)) || function() {}
                        ;
                        $(_this).getKendoDropDownList().enable(handler(selector, _this, arg))
                    })
                })
            })
        }
        ,
        SearchFunctions.prototype.initializeConfiguration = function(t) {
            this.configuration = $.extend(!0, {
                selectors: {
                    searchButton: "#SearchBtn",
                    searchResult: "#Total",
                    locationSelector: "#LocationId",
                    filters: "input.k-input[filteroperator]",
                    fromDatePicker: "#FromDate",
                    toDatePicker: "#ToDate",
                    pageNumber: "#Page"
                },
                constants: {
                    allValueCode: 0,
                    firstValueCode: 1,
                    sccCode: 2,
                    iccCode: 3,
                    ajaxType: "POST"
                },
                attributes: {
                    disableByOwner: "[data-disable-by-owner]",
                    owned: "[owned][filtermethod]",
                    ignoreIfRelatedFieldIsNotEmpty: "ignore-if-related-field-not-empty"
                },
                attributeNames: {
                    disableByOwner: "disableByOwner",
                    disableExpression: "disableExpression",
                    owned: "owned",
                    propertyName: "propertyName",
                    filterMethod: "filtermethod",
                    filterMethodType: "filtermethodtype",
                    fieldName: "field-name",
                    filterOperator: "filteroperator"
                },
                pageInformation: {
                    returnUrl: "",
                    searchCookieName: "SearchFilters",
                    pageSize: 25
                },
                fieldName: {
                    fromDate: "CreationDate",
                    toDate: "CreationDate"
                },
                appendFilters: function(t) {
                    return t
                }
            }, t)
        }
        ,
        SearchFunctions
    }();
    Common.SearchFunctions = SearchFunctions
}(Common || (Common = {}));
function(t) {
    var e = function() {
        function t(t) {
            var e = this;
            this.initializeConfiguration(t),
            $(document).ready(function() {
                $(e.configuration.selectors.confirmButton).click(function() {
                    e.onConfirmButtonClick()
                }),
                $(e.configuration.selectors.isolationPointsGrid).on("change", e.configuration.selectors.selectedForTestCheckbox, function(t) {
                    e.onSelectedForTestCheckboxChange(t)
                })
            })
        }
        return t.prototype.onGridDataBound = function() {
            var r = this;
            $(this.configuration.selectors.testStateDropList).each(function(t, e) {
                var o = $(e).parents("tr")
                  , i = $(r.configuration.selectors.isolationPointsGrid).getKendoGrid().dataItem(o)
                  , n = i.get(r.configuration.viewModelFields.isolationPointMethodId);
                $.post(r.configuration.url.getIsolationPointsStatesByMethod, {
                    id: n
                }, function(t) {
                    t.forEach(function(t) {
                        $(e).append(kendo.format('<option value="{0}">{1}</option>', t.Id, t.Title))
                    })
                }).then(function() {
                    var t = i.get(r.configuration.viewModelFields.testStateId);
                    t || (t = i.get(r.configuration.viewModelFields.deisolationPointStateId)),
                    $(e).val(t)
                })
            })
        }
        ,
        t.prototype.HasEmptyTestState = function() {
            var o = this
              , i = !1;
            return $(this.configuration.selectors.selectedForTestCheckbox + ":checked").each(function(t, e) {
                null !== $(e).parents("tr").find(o.configuration.selectors.testStateDropList).val() || (i = !0)
            }),
            i
        }
        ,
        t.prototype.onConfirmButtonClick = function() {
            var t, e, o = this, i = $(this.configuration.selectors.isolationPointsGrid).getKendoGrid(), n = "";
            e = this.configuration.pageInformation.isMarkInFinalPositionAction ? (t = this.getInFinalPositionData(i),
            this.configuration.url.markInFinalPosition) : (this.HasEmptyTestState() && (n += "[TEST_STATE_ID_ISSUE] Empty TestState found when SelectedForTest checkbox was checked. "),
            t = this.getTestPlanData(i),
            this.configuration.url.updateIsolationPointTestState),
            $.post(e, {
                points: t,
                msg: n
            }).then(function() {
                return assignLocation(o.configuration.url.returnUrl)
            })
        }
        ,
        t.prototype.getInFinalPositionData = function(n) {
            var r = this
              , a = [];
            return $(this.configuration.selectors.selectedForTestCheckbox).each(function(t, e) {
                var o = $(e).parents("tr")
                  , i = n.dataItem(o);
                a.push({
                    Id: i.get(r.configuration.viewModelFields.id),
                    IsFinalPosition: o.find(r.configuration.selectors.inFinalPositionCheckbox).prop("checked")
                })
            }),
            a
        }
        ,
        t.prototype.getTestPlanData = function(r) {
            var a = this
              , c = [];
            return $(this.configuration.selectors.selectedForTestCheckbox).each(function(t, e) {
                var o = $(e).parents("tr")
                  , i = r.dataItem(o)
                  , n = o.find(a.configuration.selectors.testStateDropList).val();
                c.push({
                    Id: i.get(a.configuration.viewModelFields.id),
                    TestStateId: $(e).prop("checked") ? n : null,
                    IsSelectedForTestPlan: $(e).prop("checked"),
                    IsFinalPosition: o.find(a.configuration.selectors.inFinalPositionCheckbox).prop("checked")
                })
            }),
            c
        }
        ,
        t.prototype.onSelectedForTestCheckboxChange = function(t) {
            var e = $(t.target)
              , o = e.prop("checked")
              , i = e.parents("tr")
              , n = i.find(this.configuration.selectors.testStateDropList);
            this.configuration.certificateInformation.isDftInPlaceState && this.configureInFinalPositionCheckbox(i, o);
            var r = $(this.configuration.selectors.isolationPointsGrid).getKendoGrid().dataItem(i);
            n.val(r.get(this.configuration.viewModelFields.deisolationPointStateId))
        }
        ,
        t.prototype.configureInFinalPositionCheckbox = function(t, e) {
            var o = t.find(this.configuration.selectors.inFinalPositionCheckbox);
            e ? o.removeAttr("disabled") : (o.prop("checked", !1),
            o.attr("disabled", "disabled"))
        }
        ,
        t.prototype.initializeConfiguration = function(t) {
            this.configuration = $.extend(!0, {
                selectors: {
                    isolationPointsGrid: "#IsolationPoints",
                    testStateDropList: ".test-state select",
                    selectedForTestCheckbox: ".selected-for-test .k-checkbox[name*='bound-checkbox']",
                    confirmButton: "[name=confirm]",
                    inFinalPositionCheckbox: ".in-final-position input[type=checkbox]"
                },
                viewModelFields: {
                    isolationPointMethodId: "IsolationPointMethod.Id",
                    testStateId: "TestStateId",
                    deisolationPointStateId: "DeisolationPointStateId",
                    isolationPointTypeCode: "IsolationPointType.Code",
                    id: "Id"
                },
                url: {
                    getIsolationPointsStatesByMethod: "GetIsolationPointStatesByMethod",
                    updateIsolationPointTestState: "UpdateIsolationPointTestState",
                    markInFinalPosition: "MarkInFinalPosition"
                },
                certificateInformation: {
                    isDftInPlaceState: !1
                },
                pageInformation: {
                    isMarkInFinalPositionAction: !1
                }
            }, t)
        }
        ,
        t
    }();
    t.PlanTestManageFunctions = e
}(ICC || (ICC = {})),
!function(t) {
    var e = function(o) {
        function t(t) {
            var e = o.call(this, t) || this;
            return $(document).ready(function() {
                e.confirmReferencesFromAnotherInstallationAndSite(),
                $(e.configuration.selectors.deleteReference).click(function() {
                    e.deleteReferenceFromGrid()
                }),
                $(e.configuration.selectors.addReferencesName).click(function() {
                    e.saveReferencedCertificateIdsToSessionStorage()
                }),
                $("body").on("click", e.configuration.selectors.confirmSelector, function() {
                    e.saveReferences(e.referencedCertificatesIds.join(","))
                }),
                onGridRadioButtonChange(e.configuration.selectors.certificateRadioButtonName, e.configuration.selectors.deleteReference)
            }),
            e
        }
        return __extends(t, o),
        t.prototype.initializeConfiguration = function(t) {
            o.prototype.initializeConfiguration.apply(this, arguments),
            this.configuration = $.extend(!0, {
                selectors: {
                    addReferencesName: "#addReferencesButton",
                    deleteReference: "#deleteReferenceButton",
                    confirmSelector: "[name=confirmButton]",
                    validationSummary: "#validationSummaryContainer",
                    certificateRadioButtonName: "certificateRadioButton"
                }
            }, this.configuration)
        }
        ,
        t.prototype.initializeReferences = function() {
            var t = (sessionStorage.getItem(this.referencesSessionStorageName) || "").split(",").map(Number);
            this.validateDuplicates(t);
            var e = this.getCertificates(t);
            e = this.validateReceivedCertificateViewModels(e),
            e = this.validateCertificateState(e),
            e = this.validateUserRoleWithStates(e),
            this.loadReferenceGrid(e),
            this.showValidation()
        }
        ,
        t.prototype.removeReferencesFromAnotherInstallation = function(e) {
            this.receivedReferences = this.receivedReferences.filter(function(t) {
                return e.indexOf(t) < 0
            })
        }
        ,
        t.prototype.deleteReferenceFromGrid = function() {
            this.clearValidationMessage();
            var t = $(this.configuration.selectors.grid).data("kendoGrid")
              , e = t.tbody.find("input[name=".concat(this.configuration.selectors.certificateRadioButtonName, "]:checked"))
              , o = e.closest("tr")
              , i = Number(e.attr("id"))
              , n = t.dataItem(o);
            if (n && !this.isCertificateStateAllowed(n.CertificateState))
                e.prop("checked", !1),
                this.addValidationMessage(this.configuration.errors.cannotRemove + kendo.toString(n.Id, this.configuration.constants.kendoIdFormat)),
                this.showValidation();
            else {
                var r = i;
                this.referencedCertificatesIds = this.referencedCertificatesIds.filter(function(t) {
                    return t !== r
                }),
                null != o && t.removeRow(o)
            }
            onGridRadioButtonChange(this.configuration.selectors.certificateRadioButtonName, this.configuration.selectors.deleteReference)
        }
        ,
        t.prototype.saveReferencedCertificateIdsToSessionStorage = function() {
            sessionStorage.setItem(this.referencesSessionStorageName, this.referencedCertificatesIds.join(","))
        }
        ,
        t.prototype.getCertificates = function(t) {
            var e;
            return $.post({
                url: this.configuration.url.getReferencedCertificates,
                data: {
                    referencedCertificatesIdsString: t.concat(this.receivedReferences).join(","),
                    mainCertificateId: this.configuration.reference.mainCertificateId
                },
                async: !1,
                success: function(t) {
                    e = t
                }
            }),
            JSON.parse(e || "[]")
        }
        ,
        t.prototype.validateDuplicates = function(t) {
            var o = !1;
            this.receivedReferences = this.receivedReferences.filter(function(e) {
                return !t.some(function(t) {
                    return t === e
                }) || !(o = !0)
            }),
            o && this.addValidationMessage(this.configuration.errors.duplicateCertificate)
        }
        ,
        t.prototype.validateReceivedCertificateViewModels = function(t) {
            return t
        }
        ,
        t.prototype.validateCertificateState = function(t) {
            var o = this
              , i = []
              , e = t.filter(function(e) {
                var t = o.configuration.reference.cameFromSearch && o.receivedReferences.some(function(t) {
                    return t === e.Id
                }) && !o.isCertificateStateAllowed(e.CertificateState);
                return t && i.push(kendo.toString(e.DisplayId, o.configuration.constants.kendoIdFormat)),
                !t
            });
            return 0 < i.length && this.addValidationMessage(this.configuration.errors.notValidState + i.join(", ")),
            e
        }
        ,
        t.prototype.validateUserRoleWithStates = function(t) {
            var o, i = this, e = this.configuration.reference.notAllowedUserRolesWithCertificateStates, n = this.configuration.reference.currentRole;
            if (e && n && (o = e[n]),
            this.configuration.reference.cameFromSearch && o) {
                var r = []
                  , a = t.filter(function(e) {
                    return -1 === $.inArray(e.CertificateState, o) || !i.receivedReferences.some(function(t) {
                        return t === e.Id
                    }) || (r.push(kendo.toString(e.DisplayId, i.configuration.constants.kendoIdFormat)),
                    !1)
                });
                return 0 < r.length && this.addValidationMessage(this.configuration.errors.unsuitableRoleForReferencing + r.join(", ")),
                a
            }
            return t
        }
        ,
        t.prototype.loadReferenceGrid = function(t) {
            $(this.configuration.selectors.initialDataHidden).val(JSON.stringify(t)),
            this.loadInitialData(),
            this.referencedCertificatesIds = t.map(function(t) {
                return t.Id
            })
        }
        ,
        t.prototype.isCertificateStateAllowed = function(e) {
            return 0 === this.configuration.reference.notAllowedCertificateStates.length && this.configuration.reference.allowedCertificateStates.some(function(t) {
                return t === e
            }) || 0 === this.configuration.reference.allowedCertificateStates.length && this.configuration.reference.notAllowedCertificateStates.every(function(t) {
                return t !== e
            })
        }
        ,
        t
    }(t.ManageReferences);
    t.IsolationReferences = e
}(Common || (Common = {}));
!function(t) {
    var e = function(B) {
        function t(t, e, o, i, n, r, a, c, s, l, d, u, h, f, p, m, g, S, v, C, y, I, k, b, x, w, P) {
            var D = B.call(this, null, null, null, null, null, null, null, null, null, t, null, null, null) || this;
            D.isUpdateMode = !1,
            D.isLoadingDataFromObject = !1,
            D.rowForEditUid = null;
            return D.kendoGridRowReorder = new Common.KendoGridRowReorder(S,{
                rowNumberCellSelector: ".override-index"
            }),
            D.tagNumberSelector = a,
            D.descriptionSelector = c,
            D.commentSelector = s,
            D.additionalValueAppliedSelector = l,
            D.addOverrideBtnSelector = h,
            D.overrideIndexLabelSelector = g,
            D.overridesGridSelector = S,
            D.updateOverrideBtnSelector = f,
            D.editOverrideBtnSelector = p,
            D.removeOverrideBtnSelector = m,
            D.overrideTypeSelector = e,
            D.overrideMethodSelector = o,
            D.appliedStateSelector = i,
            D.removedStateSelector = n,
            D.currentStateSelector = r,
            D.getOverrideMethodsByTypeUrl = d,
            D.getOverrideStatesByMethodUrl = u,
            D.disabledBeforeDataBoundBtnsSelector = v,
            D.overrideRadioBtnSelector = C,
            D.cancelOverrideBtnSelector = y,
            D.certificateId = I,
            D.overridesJsonSelector = k,
            D.newText = b,
            D.orderIdFieldName = x,
            D.overrideFrozenStateId = w,
            D.overrideForcedStateId = P,
            $(D.overrideTypeSelector).change(function() {
                D.updateOverrideMethods()
            }),
            $(D.overrideMethodSelector).change(function() {
                D.updateOverrideStates()
            }),
            $(D.appliedStateSelector).change(function() {
                D.updateAdditionalValue(D.appliedStateSelector, D.additionalValueAppliedSelector),
                D.selectRemovedStateWhenSelectedAppliedState()
            }),
            $(D.updateOverrideBtnSelector).click(function() {
                D.updateOverride()
            }),
            $(D.editOverrideBtnSelector).click(function() {
                D.editOverrideBtnClick()
            }),
            $(D.removeOverrideBtnSelector).click(function() {
                D.removeOverride()
            }),
            $(D.cancelOverrideBtnSelector).click(function() {
                D.onCancelBtnClick()
            }),
            D.hideAdditionalValueTextBox(D.additionalValueAppliedSelector),
            D
        }
        return __extends(t, B),
        t.prototype.onBoundOverrideMethod = function() {
            this.isLoadingDataFromObject && $(this.overrideMethodSelector).data("kendoDropDownList").value(this.tempOverrideObject.OverrideMethodId)
        }
        ,
        t.prototype.selectRemovedStateWhenSelectedAppliedState = function() {
            if (!this.isUpdateMode) {
                var o = $(this.appliedStateSelector).data("kendoDropDownList").select()
                  , t = $(this.removedStateSelector).data("kendoDropDownList")
                  , i = 1;
                t.dataSource.data().forEach(function(t, e) {
                    e + 1 == o || (i = e + 1)
                }),
                t.select(0 < o ? i : 0)
            }
        }
        ,
        t.prototype.selectOverride = function(t) {
            $("".concat(this.editOverrideBtnSelector, ",").concat(this.removeOverrideBtnSelector)).show()
        }
        ,
        t.prototype.onCancelBtnClick = function() {
            this.isUpdateMode = !1,
            $(this.addOverrideBtnSelector).show(),
            $(this.editOverrideBtnSelector).hide(),
            $(this.removeOverrideBtnSelector).hide(),
            $(this.updateOverrideBtnSelector).hide(),
            $(this.cancelOverrideBtnSelector).hide(),
            this.rowForEditUid = null,
            this.resetInputs()
        }
        ,
        t.prototype.initializeDataInGrid = function() {
            var t = $(this.overridesJsonSelector).val();
            if (t) {
                var e = JSON.parse(t)
                  , o = new kendo.data.DataSource({
                    data: e,
                    sort: {
                        field: this.orderIdFieldName,
                        dir: "asc"
                    }
                });
                $(this.overridesGridSelector).data("kendoGrid").setDataSource(o)
            }
        }
        ,
        t.prototype.updateOverrideMethods = function() {
            var e = this
              , t = $(this.overrideTypeSelector).val();
            $.ajax({
                method: "GET",
                url: this.getOverrideMethodsByTypeUrl + "?overrideTypeId=" + t,
                success: function(t) {
                    fillDropDown(e.overrideMethodSelector, t),
                    e.onBoundOverrideMethod(),
                    e.updateOverrideStates()
                }
            }),
            this.hideAdditionalValueTextBox(this.additionalValueAppliedSelector)
        }
        ,
        t.prototype.updateOverrideStates = function() {
            var e = this
              , t = $(this.overrideMethodSelector).val();
            $.ajax({
                method: "GET",
                url: this.getOverrideStatesByMethodUrl + "?overrideMethodId=" + t,
                success: function(t) {
                    $(e.appliedStateSelector).data("kendoDropDownList").value(null),
                    $(e.removedStateSelector).data("kendoDropDownList").value(null),
                    fillDropDown(e.appliedStateSelector, t.filter(function(t) {
                        return 0 === t.Type || 1 === t.Type
                    })),
                    fillDropDown(e.removedStateSelector, t.filter(function(t) {
                        return 0 === t.Type || 2 === t.Type
                    })),
                    e.onBoundOverrideStates(),
                    e.updateAdditionalValue(e.appliedStateSelector, e.additionalValueAppliedSelector)
                }
            })
        }
        ,
        t.prototype.isFormValid = function() {
            var t = $('[data-role="validator"]').data("kendoValidator").validate();
            return this.markInvalidItems(),
            t
        }
        ,
        t.prototype.markInvalidItems = function() {
            var o = this;
            $(".k-valid").each(function(t, e) {
                o.setValidationState(e, !0)
            }),
            $(".k-invalid").each(function(t, e) {
                o.setValidationState(e, !1)
            })
        }
        ,
        t.prototype.addOverride = function() {
            if (this.isFormValid()) {
                this.kendoGridRowReorder.updateOrderForGridData();
                var t = $(this.overridesGridSelector).data("kendoGrid").dataSource
                  , e = this.getOverrideObjectFilledWithInputs();
                e.OrderId = this.GetMaxOverrideIndex() + 1,
                e.OverrideIndex = this.GetMaxOverrideIndex() + 1,
                e.SystemOverrideCertificateId = this.certificateId,
                t.add(e),
                this.resetInputs(),
                this.resetValidationStates(),
                this.hideAdditionalValueTextBox(this.additionalValueAppliedSelector)
            }
        }
        ,
        t.prototype.onBoundOverrideStates = function() {
            this.isLoadingDataFromObject && ($(this.appliedStateSelector).data("kendoDropDownList").value(this.tempOverrideObject.OverrideAppliedStateId),
            $(this.removedStateSelector).data("kendoDropDownList").value(this.tempOverrideObject.OverrideRemovedStateId),
            this.isLoadingDataFromObject = !1)
        }
        ,
        t.prototype.OverridesGridBound = function() {
            $(this.disabledBeforeDataBoundBtnsSelector).removeAttr("disabled"),
            this.kendoGridRowReorder.initializeReorder()
        }
        ,
        t.prototype.GetMaxOverrideIndex = function() {
            var t = $(this.overridesGridSelector).data("kendoGrid").dataSource.data().map(function(t) {
                return t.OverrideIndex
            });
            return 0 < t.length ? Math.max.apply(Math, t) : 0
        }
        ,
        t.prototype.acceptOverrideChanges = function() {
            this.kendoGridRowReorder.updateOrderForGridData();
            var t = $(this.overridesGridSelector).data("kendoGrid").dataSource.data().toJSON()
              , e = JSON.stringify(t);
            $(this.overridesJsonSelector).val(e),
            document.forms[0].submit()
        }
        ,
        t.prototype.loadObjectToInputs = function() {
            var t = this.getSelectedOverride();
            $(this.overrideIndexLabelSelector).html(t.OverrideIndex),
            $(this.tagNumberSelector).val(t.TagNumber),
            $(this.commentSelector).val(t.Comment),
            $(this.descriptionSelector).val(t.Description),
            this.tempOverrideObject = t,
            this.isLoadingDataFromObject = !0,
            $(this.overrideTypeSelector).data("kendoDropDownList").value(t.OverrideTypeId),
            $(this.currentStateSelector).data("kendoDropDownList").value(t.CurrentOverrideStateId),
            this.updateOverrideMethods(),
            $(this.additionalValueAppliedSelector).val(t.AdditionalValueAppliedState)
        }
        ,
        t.prototype.getSelectedOverride = function() {
            var t = $("[name=socoverride]:checked").closest("tr").data("uid");
            return $(this.overridesGridSelector).data("kendoGrid").dataSource.getByUid(t)
        }
        ,
        t.prototype.removeOverride = function() {
            this.kendoGridRowReorder.updateOrderForGridData();
            var t = this.getSelectedOverride();
            $(this.overridesGridSelector).data("kendoGrid").dataSource.remove(t),
            this.optimizeOrderId(),
            $(this.addOverrideBtnSelector).show(),
            $(this.editOverrideBtnSelector).hide(),
            $(this.removeOverrideBtnSelector).hide(),
            $(this.updateOverrideBtnSelector).hide(),
            $(this.cancelOverrideBtnSelector).hide()
        }
        ,
        t.prototype.editOverrideBtnClick = function() {
            this.isUpdateMode = !0,
            this.rowForEditUid = $("[name=socoverride]:checked").closest("tr").data("uid"),
            this.loadObjectToInputs(),
            $(this.overrideRadioBtnSelector).attr("disabled", "disabled"),
            $(this.updateOverrideBtnSelector).show(),
            $(this.cancelOverrideBtnSelector).show(),
            $(this.addOverrideBtnSelector).hide(),
            $(this.editOverrideBtnSelector).hide()
        }
        ,
        t.prototype.updateOverride = function() {
            if (this.isUpdateMode = !1,
            this.isFormValid()) {
                this.kendoGridRowReorder.updateOrderForGridData();
                var t = $(this.overridesGridSelector).data("kendoGrid").dataSource.getByUid(this.rowForEditUid)
                  , e = this.getOverrideObjectFilledWithInputs();
                e.OverrideIndex = t.OverrideIndex,
                e.Id = t.Id,
                e.OrderId = t.OrderId,
                e.SystemOverrideCertificateId = t.SystemOverrideCertificateId,
                $(this.overridesGridSelector).data("kendoGrid").dataSource.remove(t),
                $(this.overridesGridSelector).data("kendoGrid").dataSource.add(e),
                $(this.overridesGridSelector).data("kendoGrid").refresh(),
                this.resetInputs(),
                this.resetValidationStates(),
                $(this.updateOverrideBtnSelector).hide(),
                $(this.cancelOverrideBtnSelector).hide(),
                $(this.addOverrideBtnSelector).show(),
                $(this.removeOverrideBtnSelector).hide(),
                $(this.editOverrideBtnSelector).hide(),
                $(this.overrideRadioBtnSelector).removeAttr("disabled"),
                this.rowForEditUid = null
            }
        }
        ,
        t.prototype.getOverrideObjectFilledWithInputs = function() {
            var t = this;
            return {
                TagNumber: $(t.tagNumberSelector).val(),
                Description: $(t.descriptionSelector).val(),
                OverrideTypeId: $(t.overrideTypeSelector).val(),
                OverrideType: {
                    Title: $(t.overrideTypeSelector).data("kendoDropDownList").text()
                },
                OverrideMethodId: $(t.overrideMethodSelector).val(),
                OverrideMethod: {
                    Title: $(t.overrideMethodSelector).data("kendoDropDownList").text()
                },
                Comment: $(t.commentSelector).val(),
                OverrideAppliedStateId: $(t.appliedStateSelector).val(),
                OverrideAppliedState: {
                    Title: $(t.appliedStateSelector).data("kendoDropDownList").text()
                },
                OverrideRemovedStateId: $(t.removedStateSelector).val(),
                OverrideRemovedState: {
                    Title: $(t.removedStateSelector).data("kendoDropDownList").text()
                },
                CurrentOverrideStateId: $(t.currentStateSelector).val(),
                CurrentState: {
                    Title: $(t.currentStateSelector).data("kendoDropDownList").text()
                },
                AdditionalValueAppliedState: $(t.additionalValueAppliedSelector).val()
            }
        }
        ,
        t.prototype.resetInputs = function() {
            $(this.overrideIndexLabelSelector).html(this.newText),
            $(this.tagNumberSelector).val(""),
            $(this.descriptionSelector).val(""),
            $(this.overrideTypeSelector).data("kendoDropDownList").value(null),
            $(this.overrideMethodSelector).data("kendoDropDownList").value(null),
            $(this.appliedStateSelector).data("kendoDropDownList").value(null),
            $(this.removedStateSelector).data("kendoDropDownList").value(null),
            $(this.currentStateSelector).data("kendoDropDownList").select(0),
            $(this.commentSelector).val(""),
            $(this.additionalValueAppliedSelector).val("")
        }
        ,
        t.prototype.optimizeOrderId = function() {
            for (var t = $(this.overridesGridSelector).data("kendoGrid"), o = t.dataSource.data(), e = function(e) {
                o.find(function(t) {
                    return t.OrderId === e
                }) || o.forEach(function(t) {
                    return t.OrderId > e && t.OrderId--
                })
            }, i = 1; i <= this.GetMaxOverrideIndex(); i++)
                e(i);
            t.refresh()
        }
        ,
        t.prototype.resetValidationStates = function() {
            var t = this;
            $(".k-valid, .k-invalid").each(function() {
                t.setValidationState(this, !1)
            })
        }
        ,
        t.prototype.setValidationState = function(t, e) {
            $(t).closest("tbody").find("[valid-state-for=" + $(t).attr("id") + "]").children("img").attr("src", ["/images/star.svg", "/images/star-green.svg"][+e])
        }
        ,
        t.prototype.hideAdditionalValueTextBox = function(t) {
            $(t).val(""),
            $(t).hide()
        }
        ,
        t.prototype.updateAdditionalValue = function(t, e) {
            var o = $(t).val();
            o === this.overrideFrozenStateId.toString() || o === this.overrideForcedStateId.toString() ? $(e).show() : this.hideAdditionalValueTextBox(e)
        }
        ,
        t
    }(Common.CascadeLists);
    t.EditOverrides = e
}(SOC || (SOC = {})),
function(t) {
    var e = function() {
        function t(t) {
            var e = this;
            this.initializeConfiguration(t),
            $(document).ready(function() {
                checkAndShowValidationContainer(),
                $(e.configuration.selectors.confirmButton).click(function() {
                    e.onConfirmButtonClick()
                }),
                $(e.configuration.selectors.overridesGrid).on("change", e.configuration.selectors.unabletoImplementCheckbox, function(t) {
                    return e.onUnableToImplementCheckboxChange(t)
                })
            })
        }
        return t.prototype.onUnableToImplementCheckboxChange = function(t) {
            var e = $(t.currentTarget).parents("tr")
              , o = e.find(this.configuration.selectors.reasonInput)
              , i = e.find(this.configuration.selectors.overrideCurrentState)
              , n = e.find(this.configuration.selectors.confirmUpdateDropdownList);
            $(t.currentTarget).prop("checked") ? (o.removeAttr("disabled"),
            i.prop("selectedIndex", 0),
            n.prop("disabled", "disabled")) : (n.removeAttr("disabled"),
            o.prop("disabled", "disabled"),
            o.val(""))
        }
        ,
        t.prototype.onGridDataBound = function() {
            var n = this
              , r = this;
            $(r.configuration.selectors.confirmUpdateDropdownList).each(function(t, e) {
                var o = $(e).parents("tr")
                  , i = $(r.configuration.selectors.overridesGrid).getKendoGrid().dataItem(o);
                $.post(r.configuration.url.getAvailableOverrideStates, {
                    certificateId: $(n.configuration.selectors.certificateId).val(),
                    overrideId: i.get(r.configuration.viewModelFields.id)
                }, function(t) {
                    t.forEach(function(t) {
                        $(e).append(kendo.format('<option value="{0}">{1}</option>', t.Id, t.Title))
                    }),
                    $(e).val(t[0].Id).change()
                })
            })
        }
        ,
        t.prototype.onConfirmButtonClick = function() {
            var t = this.checkAllUtaReasonFilled();
            new Core.ShowValidation(this.configuration.validation.notFilledReasonMessage,!t);
            t && this.saveDataAndSubmitForm()
        }
        ,
        t.prototype.saveDataAndSubmitForm = function() {
            this.saveData(),
            $("form").submit()
        }
        ,
        t.prototype.saveData = function() {
            var t = $(this.configuration.selectors.overridesGrid).getKendoGrid()
              , e = this.getOverridesData(t);
            $(this.configuration.selectors.overridesJson).val(JSON.stringify(e))
        }
        ,
        t.prototype.getOverridesData = function(s) {
            var l = this
              , d = [];
            return $(l.configuration.selectors.confirmUpdateDropdownList).each(function(t, e) {
                var o, i = $(e).closest("tr"), n = i.find(l.configuration.selectors.confirmUpdateDropdownList).val(), r = s.dataItem(i), a = l.getProcessedInputValue(i.find(l.configuration.selectors.reasonInput)), c = null === (o = i.find(l.configuration.selectors.unabletoImplementCheckbox).get()[0]) || void 0 === o ? void 0 : o.checked;
                d.push({
                    Id: r.get(l.configuration.viewModelFields.id),
                    CurrentOverrideStateId: n,
                    UnableToImplementReason: a,
                    IsUnableToImplement: c
                })
            }),
            d
        }
        ,
        t.prototype.getProcessedInputValue = function(t) {
            var e = t.val();
            return void 0 !== e && e.trim() || null
        }
        ,
        t.prototype.checkAllUtaReasonFilled = function() {
            var o = this
              , i = !0;
            return $(o.configuration.selectors.unableToImplementCheckedCheckbox).each(function(t, e) {
                !!$(e).parents("tr").find(o.configuration.selectors.reasonInput).first().val().trim() || (i = !1)
            }),
            i
        }
        ,
        t.prototype.initializeConfiguration = function(t) {
            this.configuration = $.extend(!0, {
                selectors: {
                    overridesGrid: "#Overrides",
                    overridesJson: "#OverridesJson",
                    overrideCurrentState: "#CurrentStateSelect",
                    certificateId: "#Id",
                    confirmButton: "[name=confirm]",
                    confirmUpdateDropdownList: ".confirm-position select",
                    reasonInput: ".reason input",
                    unabletoImplementCheckbox: ".uti input[type=checkbox]",
                    unableToImplementNotCheckedCheckbox: ".uti input[type=checkbox]:not(:checked)",
                    unableToImplementCheckedCheckbox: ".uti input[type=checkbox]:checked"
                },
                viewModelFields: {
                    id: "Id",
                    currentStateId: "CurrentOverrideStateId"
                },
                validation: {
                    notFilledReasonMessage: ""
                },
                pageInformation: {
                    returnUrl: "/"
                }
            }, t)
        }
        ,
        t
    }();
    t.UpdateOverride = e
}(SOC || (SOC = {}));