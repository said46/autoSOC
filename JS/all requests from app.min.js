function setPingTime() {
    var t, e = new Date, o = null !== (t = localStorage.getItem("eptw-ping-time")) && void 0 !== t ? t : "1970-01-01Z00:00:00:000", i = new Date(o);
    e.getTime() - i.getTime() < 18e5 || $.post("/User/SetPingTime").then(function(t) {
        return t ? localStorage.setItem("eptw-ping-time", e.toISOString()) : localStorage.removeItem("eptw-ping-time")
    })
}

function u() {
        a = !1,
        t = setInterval(function() {
            a && !d() && (a = !1,
            p()),
            !a && d() && ($("#SessionExpireNotification").data("kendoWindow").center().open(),
            a = !0,
            function() {
                var e, t = localStorage.getItem(c);
                if (t)
                    e = new Date(+t);
                else {
                    var o = (new Date).getTime() + 6e4 * i.sessionExpireNotificationMinutes;
                    localStorage.setItem(c, o.toString()),
                    e = new Date(o)
                }
                n = setInterval(function() {
                    a && !d() && (a = !1,
                    p());
                    var t = Math.max(0, e - new Date) / 1e3;
                    0 === t ? ($.get("/Account/LogoutSessionExpired/"),
                    $("#SessionExpireNotificationOut").data("kendoWindow").center().open(),
                    $("#SessionExpireNotification").data("kendoWindow").center().close(),
                    a = !0,
                    f()) : r.text("0".concat(Math.floor(t / 60)).substr(-2) + ":" + "0".concat(Math.floor(t % 60)).substr(-2))
                }, s)
            }(),
            clearInterval(t))
        }, o)
    }
	
function deleteGridElementsIds(t, o, e, i, n) {
    void 0 === n && (n = function(t) {}
    );
    var r = [];
    $(t + ":checked").each(function(t, e) {
        r.push($(e).attr(o))
    });
    var a = $(i)
      , c = {
        url: e,
        data: {
            itemsIds: r
        },
        success: function(t) {
            t.StatusCode || 0 === t.length ? a.data("kendoGrid").dataSource.read() : n(t)
        }
    };
    kendo.ui.progress(a, !0),
    $.post(c).then(function() {
        kendo.ui.progress(a, !1)
    })
}

function downloadFile(e, o, i) {
    $.get("/".concat(o, "/CheckAccessToFile/").concat(e), function(t) {
        t.Error ? alert(i) : window.location.href = "/".concat(o, "/DownloadFile/").concat(e)
    })
}

t.prototype.sendActionRequest = function(e, t) {
            var r = this;
            "0" !== e && t.some(function(t) {
                return 0 < e.indexOf(t)
            }) ? (showOverlay(),
            $.get({
                url: e,
                cache: !1,
                success: function(t) {
                    if (t && 0 === t.Result) {
                        var e = [];
                        e.push(t);
                        var o = r.showChangeStateErrorsUrl + "?data=" + encodeURIComponent(JSON.stringify(e));
                        assignLocation(addReturnUrl(o, window.location.href))
                    } else if (t && 2 === t.Result) {
                        var i = $.param({
                            id: t.CertificateId,
                            questionMessages: t.Message,
                            trigger: t.Trigger
                        })
                          , n = "".concat(r.changeSiteStateUrl, "?").concat(i);
                        assignLocation(addReturnUrl(n, window.location.href))
                    } else
                        window.location.reload()
                }
            }).fail(showOverlay.bind(null, !1))) : assignLocation(addReturnUrl(e))
        }
        ,
        t
    }();
		
function(t) {
    var e = function() {
        function t(t, e, o, i, n, r, a, c, s, l, d, u, h, f, p) {
            void 0 === f && (f = !0),
            void 0 === p && (p = null);
            var m = this;
            this.defaultDropdownValueFieldName = "Id",
            this.defaultDropdownTextFieldName = "Title",
            this.updateStates = function() {
                var e = this
                  , t = $(this.stateGroupSelector).val();
                "" === t && (t = 0),
                $.ajax({
                    url: "".concat(e.getCertificateStatesUrl, "?stateGroupId=").concat(t, "&type=").concat(e.typeOfCertificate, "&ui-culture=").concat(getCurrentCulture()),
                    cache: !0,
                    success: function(t) {
                        fillDropDown($(e.stateSelector), t)
                    }
                })
            }
            ,
            this.typeOfCertificate = t,
            this.getAreasByLocationUrl = "/data/getAreasByLocation",
            this.getAreasByInstallationUrl = "/data/GetAreasByInstallation",
            this.getInstallationsBySiteUrl = "/data/getInstallationsBySite",
            this.getLocationsByInstallationUrl = f ? "/data/GetNotIntermediateLocationsByInstallation" : "/data/getLocationsByInstallation",
            this.getTagsByInstallationUrl = "/Tag/GetTagsForInstallation",
            this.getIsolationTypesByCategoryUrl = "/data/getIsolationTypesByCategory",
            this.getDefaultValidityPeriodUrl = "/data/getDefaultValidityPeriod",
            this.getCertificateCategoriesUrl = "/data/GetCategorySearchByType",
            this.getCertificateStatesUrl = "/data/GetStatesByStateGroup",
            this.getRolesByInstallationUrl = "/data/GetInstallationRoles",
            this.certificateCategorySelector = o,
            this.siteSelector = i,
            this.installationSelector = n,
            this.locationSelector = r,
            this.tagsSelector = p,
            this.isolationTypeSelector = c,
            this.validityPeriodSelector = s,
            this.taskAreasSelector = a,
            this.availableSecondaryAreasSelector = "#availableSecondaryLocationArea",
            this.selectedSecondaryAreasSelector = "#SelectedSecondaryAreaIds",
            this.availableInstalationRolesSelector = "#availableInstalationRoles",
            this.selectedInstalationRolesSelector = "#SelectedRoleIds",
            this.availablePrivilegeSelector = "#availablePrivilege",
            this.selectedPrivilegeSelector = "#SelectedPrivilegeIds",
            this.pleaseSelectLocalizedText = l,
            this.certificateTypeSelector = e,
            this.stateSelector = d,
            this.stateGroupSelector = u,
            this.roleSelector = h,
            $(this.certificateCategorySelector).change(function() {
                m.updateIsolationTypes(),
                s && m.updateValidityPeriod()
            }),
            $(this.locationSelector).change(function() {
                m.updateTaskAreaAndSecondaryAreas()
            }),
            $(this.taskAreasSelector).change(function() {
                m.updateSecondaryAreas()
            }),
            $(this.siteSelector).change(function() {
                m.updateInstallations()
            }),
            $(this.installationSelector).change(function() {
                m.updateLocations(),
                m.updateTags()
            }),
            $(this.certificateTypeSelector).change(function() {
                m.updateCategories()
            }),
            $(this.stateGroupSelector).change(function() {
                m.updateStates()
            })
        }
        return t.prototype.updateTaskAreaAndSecondaryAreas = function() {
            var e = this
              , o = this
              , t = $(this.locationSelector).val();
            $.ajax({
                url: this.getAreasByLocationUrl,
                data: {
                    locationId: t,
                    "ui-culture": getCurrentCulture()
                },
                cache: !0,
                success: function(t) {
                    fillDropDown(o.taskAreasSelector, t),
                    $(e.availableSecondaryAreasSelector).length && 1 === t.length && e.updateSecondaryAreas()
                }
            })
        }
        ,
        t.prototype.updateCategories = function() {
            var e = this
              , t = $(this.certificateTypeSelector).val();
            $.ajax({
                url: "".concat(this.getCertificateCategoriesUrl, "?typeId=").concat(t, "&ui-culture=").concat(getCurrentCulture()),
                cache: !0,
                success: function(t) {
                    fillDropDown($(e.certificateCategorySelector), t)
                }
            })
        }
        ,
        t.prototype.updateRoles = function() {
            var e = this
              , t = $(this.installationSelector).val();
            return $.ajax({
                url: this.getRolesByInstallationUrl,
                data: {
                    installationId: t
                }
            }).then(function(t) {
                e.fillRolesDropDown($(e.roleSelector), t)
            })
        }
        ,
        t.prototype.updateSecondaryAreas = function() {
            var e = this
              , t = $(this.installationSelector).val()
              , o = tryParseInt($(e.taskAreasSelector).getKendoDropDownList().value());
            if (void 0 !== $(e.selectedSecondaryAreasSelector).getKendoListBox()) {
                var i = $(e.selectedSecondaryAreasSelector).getKendoListBox().dataSource
                  , n = i.data().map(function(t) {
                    return t.Value
                });
                if (o) {
                    n.push(o);
                    var r = i.data().find(function(t) {
                        return t.Value == o
                    });
                    r && i.remove(r)
                }
                $.post({
                    url: this.getAreasByInstallationUrl,
                    data: {
                        installationId: t,
                        areaIdsToExclude: n,
                        "ui-culture": getCurrentCulture()
                    },
                    cache: !0,
                    success: function(t) {
                        e.fillSecondaryAreas(e, t)
                    }
                })
            }
        }
        ,
        t.prototype.fillSecondaryAreas = function(t, e) {
            var o = createDataSource(e)
              , i = $(t.availableSecondaryAreasSelector).data("kendoListBox");
            i && i.setDataSource(o)
        }
        ,
        t.prototype.fillInstalationRoles = function(t, e) {
            var o = createDataSource(e);
            $(t.availableInstalationRolesSelector).data("kendoListBox").setDataSource(o),
            $(t.selectedInstalationRolesSelector).data("kendoListBox").setDataSource(createDataSource())
        }
        ,
        t.prototype.fillPrivilege = function(t, e) {
            var o = createDataSource(e);
            $(t.availablePrivilegeSelector).data("kendoListBox").setDataSource(o),
            $(t.selectedPrivilegeSelector).data("kendoListBox").setDataSource(createDataSource())
        }
        ,
        t.prototype.updateIsolationTypes = function() {
            var e = this
              , t = $(this.certificateCategorySelector).val();
            $.ajax({
                method: "GET",
                url: "".concat(this.getIsolationTypesByCategoryUrl, "?categoryId=").concat(t, "&ui-culture=").concat(getCurrentCulture()),
                cache: !0,
                success: function(t) {
                    e.isolationTypeCodes = t,
                    fillDropDown(e.isolationTypeSelector, t)
                }
            })
        }
        ,
        t.prototype.updateValidityPeriod = function() {
            var o = this
              , t = $(this.certificateCategorySelector).val();
            $.ajax({
                method: "GET",
                url: this.getDefaultValidityPeriodUrl + "?categoryId=" + t,
                success: function(t) {
                    var e = $(o.validityPeriodSelector).data("kendoNumericTextBox");
                    e.max(t),
                    e.value(null != t ? t : 1)
                }
            })
        }
        ,
        t.prototype.updateLocations = function() {
            var e = this
              , t = $(this.installationSelector).val();
            $.ajax({
                method: "GET",
                url: "".concat(this.getLocationsByInstallationUrl, "?installationId=").concat(t, "&ui-culture=").concat(getCurrentCulture()),
                cache: !0,
                success: function(t) {
                    fillDropDown(e.locationSelector, t),
                    e.updateTaskAreaAndSecondaryAreas()
                }
            })
        }
        ,
        t.prototype.updateTags = function() {
            if (this.tagsSelector) {
                var e = this
                  , t = $(this.installationSelector).val();
                $.ajax({
                    method: "GET",
                    url: "".concat(this.getTagsByInstallationUrl, "?installationId=").concat(t),
                    cache: !0,
                    success: function(t) {
                        fillMultiSelect(e.tagsSelector, t.Data)
                    }
                })
            }
        }
        ,
        t.prototype.updateInstallations = function() {
            var e = this
              , t = $(this.siteSelector).val();
            $.ajax({
                method: "GET",
                url: "".concat(this.getInstallationsBySiteUrl, "?siteId=").concat(t, "&ui-culture=").concat(getCurrentCulture()),
                cache: !0,
                success: function(t) {
                    fillDropDown(e.installationSelector, t),
                    $(e.installationSelector).trigger("change"),
                    $(e.installationSelector).data("kendoDropDownList").select(0),
                    e.updateLocations(),
                    e.updateTags()
                }
            })
        }
        ,
        t.prototype.fillRolesDropDown = function(t, e) {
            return fillDropDown(t, e, "NormalizedName", "Name")
        }
        ,
        t.prototype.getTypeOfCertificate = function() {
            return this.typeOfCertificate
        }
        ,
        t
    }();
    t.CascadeLists = e
}(Common || (Common = {}));	
	