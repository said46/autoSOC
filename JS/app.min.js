function initializeKendoListBoxFocus() {
    var t = ".k-widget.k-listbox ul"
      , e = ".k-list-scroller.k-selectable";
    $("body").on("focus", t, function(t) {
        $(t.currentTarget).closest(e).addClass("focus")
    }).on("focusout", t, function(t) {
        $(t.currentTarget).closest(e).removeClass("focus")
    })
}
function CopyButtons(t, e) {
    t = "#" + t + ".panel-line-btns",
    e = "#" + e + ".panel-line-btns";
    $(e).first().html($(t).first().html())
}
function nullable(t) {
    return t || ""
}
function serializeFilter(t, i) {
    if (t) {
        if (t.filters)
            return $.map(t.filters, function(t) {
                var e = t.filters && 1 < t.filters.length
                  , o = serializeFilter(t, i);
                return o && e && (o = "(" + o + ")"),
                o
            }).join("~" + t.logic + "~");
        if (t.field)
            return t.field + "~" + t.operator + "~" + encodeFilterValue(t.value, i)
    }
}
function replaceSearchUrl() {
    this.window.onscroll = function() {
        sessionStorage.setItem("scrollTop", String($(this).scrollTop()))
    }
    ,
    this.window.onunload = function() {
        var t = {
            requestId: kendo.guid(),
            loadSavedSearch: "True"
        }
          , e = "?" + $.param(t);
        window.history.pushState({}, "", e)
    }
}
function scrollToStoredOffset() {
    var t = sessionStorage.getItem("scrollTop");
    t && $(window).scrollTop(Number(t))
}
function encodeFilterValue(t, e) {
    if ("string" == typeof t) {
        if (!(-1 < t.indexOf("Date(")))
            return t = t.replace(/'/gi, "''"),
            e && (t = encodeURIComponent(t)),
            "'" + t + "'";
        t = new Date(parseInt(t.replace(/^\/Date\((.*?)\)\/$/, "$1"), 10))
    }
    return t && t.getTime ? "datetime'" + kendo.format("{0:yyyy-MM-ddTHH-mm-ss}", t) + "'" : t
}
function initializeGridCheckboxes() {
    var onChange = function($el) {
        var methodForExecute = $el.data("onChange");
        methodForExecute && methodForExecute.length && eval(methodForExecute)
    };
    $("body").on("change", ".k-grid thead input[type=checkbox]:not(.custom-behaviour-checkbox)", function(t) {
        var e = $(t.currentTarget)
          , o = e.parents(".k-grid")
          , i = e.parents("th").index();
        o.find("tr").find(kendo.format("td:eq({0}) input[type=checkbox]", i)).prop("checked", e.prop("checked")),
        onChange(e)
    }),
    $(document).ready(function() {
        var t = $("[data-role=grid]:has(input[type=checkbox])").getKendoGrid();
        t && t.bind("dataBound", function() {
            return t.tbody.find("tr input[type=checkbox]:first-child").trigger("change")
        })
    }),
    $("body").on("change", ".k-grid tbody input[type=checkbox]", function(t) {
        var e = $(t.currentTarget)
          , o = e.parents(".k-grid")
          , i = e.parents("td").index()
          , n = 0 === o.find("tr").find(kendo.format("td:eq({0}) input[type=checkbox]:not(:checked)", i)).length
          , r = o.find(kendo.format("th:eq({0}) input[type=checkbox]:not(.custom-behaviour-checkbox)", i));
        r.prop("checked", n),
        onChange(r)
    })
}
function initializePrintSearchResults() {
    $("[data-print-preview]").on("click", function() {
        var t = $(this).data("printPreview")
          , e = $(".k-grid").getKendoGrid().dataSource
          , o = e.filter();
        o && "" === o.filters[0].value && e.filter([]),
        exportCsv(".k-grid", t)
    })
}
function setPingTime() {
    var t, e = new Date, o = null !== (t = localStorage.getItem("eptw-ping-time")) && void 0 !== t ? t : "1970-01-01Z00:00:00:000", i = new Date(o);
    e.getTime() - i.getTime() < 18e5 || $.post("/User/SetPingTime").then(function(t) {
        return t ? localStorage.setItem("eptw-ping-time", e.toISOString()) : localStorage.removeItem("eptw-ping-time")
    })
}
function schedulePingTime() {
    setPingTime(),
    setInterval(function() {
        return setPingTime()
    }, 6e4)
}
function MakeHiddablePanels() {
    var e = Array.prototype.slice.call(document.getElementsByClassName("panel-content"));
    $(".panel-hiddable").prepend("<input type='button' class='panelhide-btn panel-line-btn btn-xs k-button' value='-'/>");
    for (var t = 0; t < e.length; t++) {
        var o = "false" != localStorage.getItem(window.location.href + "/" + t.toString());
        $(e[t]).toggle(o),
        $(e[t]).parent().find(".panelhide-btn").val(o ? "-" : "+")
    }
    $(".panelhide-btn").click(function() {
        $(this).parent().parent().children(".panel-content").toggle();
        var t = $(this).parent().parent().children(".panel-content")[0];
        localStorage.setItem(window.location.href + "/" + e.indexOf(t), String($(t).is(":visible"))),
        $(this).val($(t).is(":visible") ? "-" : "+")
    })
}
function MakePaddedPanels() {
    $(".panel-padded").css("padding", "5px")
}
function MakeRequiredFields() {
    var t = $("[class*=field-validation-]");
    t.each(function() {
        var t, e = $(this), o = e.closest("td"), i = o.find("select:last"), n = !(i.length ? 0 < nullable((t = i.first()).val()).length : (t = o.find("input:not([type=hidden]), textarea")).val()) || e.text() && "none" !== e.css("display") ? "<img src='/images/star.svg' />" : "<img src='/images/star-green.svg' />", r = $("[valid-state-for=".concat(t.attr("id"), "]"));
        (r.length ? r : $(this).closest("tr").find(".required-field")).html(n)
    })
}
function MakeValidationSummary() {
    $("form").each(function() {
        var t = $(this).data("validator");
        if (t) {
            var o = t.settings.errorPlacement;
            t.settings.errorPlacement = function(t, e) {
                (o || function() {}
                )(t, e)
            }
        }
    }),
    $("#validationSummaryContainer").hide()
}
function getOptionsFromIEnumerable(t) {
    var o = "";
    return $.each(t, function(t, e) {
        o += '<option value="' + e.Id + '">' + e.Title + "</option>"
    }),
    o
}
function isInternetExplorer() {
    var t = navigator.userAgent.toLowerCase();
    return -1 != t.indexOf("msie") && parseInt(t.split("msie")[1])
}
function refreshSvg() {
    var e = [];
    return $("img.svg").each(function() {
        var o = jQuery(this)
          , i = o.attr("id")
          , n = o.attr("class")
          , t = o.attr("src")
          , r = o.attr("title")
          , a = o.attr("name");
        e.push($.get(t, function(t) {
            var e = jQuery(t).find("svg");
            return void 0 !== i && (e = e.attr("id", i)),
            void 0 !== n && (e = e.attr("class", n + " replaced-svg")),
            void 0 !== r && (e = e.attr("title", r)),
            void 0 !== a && (e = e.attr("name", a)),
            !(e = e.removeAttr("xmlns:a")).attr("viewBox") && e.attr("height") && e.attr("width") && e.attr("viewBox", "0 0 " + e.attr("height") + " " + e.attr("width")),
            o.attr("height") && o.attr("width") && (e.attr("height", o.attr("height")),
            e.attr("width", o.attr("width"))),
            o.replaceWith(e),
            $.Deferred().resolve()
        }, "xml"))
    }),
    $.when.apply($, e)
}
function addReturnUrl(t, o, e) {
    return void 0 === o && (o = null),
    void 0 === e && (e = null),
    null != o && "" != o || (o = window.location.href.replace(new RegExp(window.location.origin,"g"), "")),
    $.each(e || {}, function(t, e) {
        o = addUrlParameter(o, t + "=" + e)
    }),
    addUrlParameter(t, "returnUrl=".concat(encodeURIComponent(decodeURI(o))))
}
function addUrlParameter(t, e) {
    var o = t
      , i = new RegExp(kendo.format("[?&]+{0}", e),"g");
    return 0 < (o = o.replace(i, "")).indexOf("?") ? o += "&" : o += "?",
    o += e
}
function showTickOrCross(t) {
    return t ? "<img src='/images/ReportIcons/Accepted.png' width='20' height='20'/>" : "<img src='/images/ReportIcons/Rejected.png' width='20' height='20'/>"
}
function showTick(t) {
    return t ? "<img src='/images/ReportIcons/Accepted.png' width='20' height='20'/>" : "<img/>"
}
function removeDuplicates(t, i) {
    return t.filter(function(t, e, o) {
        return o.map(function(t) {
            return t[i]
        }).indexOf(t[i]) === e
    })
}
function removeDuplicatesExceptNull(t, i) {
    return t.filter(function(t, e, o) {
        return null === t[i] || o.map(function(t) {
            return t[i]
        }).indexOf(t[i]) === e
    })
}
function initializeGridJsonBinding(t, o) {
    var i = t.sender;
    $(":submit").off().on("click", function() {
        $(i.element).prepend("<input jsonData hidden type='text' id=".concat(o, " name=").concat(o, " />"));
        var t = i.dataSource.data()
          , e = JSON.stringify(t);
        $(i.element).find("input[jsonData]").val(e)
    })
}
function onGridCheckBoxChange(t) {
    var e = $(t);
    e.data("isSelectAll") || e.parents("tr").toggleClass("k-state-selected", e.prop("checked")),
    $("[data-disable-if-row-not-checked=true]").prop("disabled", 0 === $("[name*=_checkbox_]:checked, [disable-remove-button-if-not-checked]:checked").length)
}
function onGridRadioButtonChange(t, e) {
    $(e).prop("disabled", 0 === $(kendo.format("[name={0}]:checked", t)).length)
}
function initializeHeaderCheckBoxChangeEvent() {
    var i = $("[id$=_header_checkbox]");
    i.click(function(t) {
        var o = $(t.target).prop("checked")
          , e = $(t.target).parents(".k-grid").data("kendoGrid");
        e.items().length && e.element.find("tbody>tr").each(function(t, e) {
            $(e).toggleClass("k-state-selected", o),
            $(e).find("[type=checkbox]").prop("checked", o)
        }),
        onGridCheckBoxChange(i)
    })
}
function onPageableSelectGridDataBound(t) {
    $(t.sender.element).data("kendoGrid").select().find("input[type=checkbox]").each(function(t, e) {
        $(e).prop("checked", !0)
    })
}
function checkAndShowValidationContainer() {
    var t = $("#validationSummaryContainer").find("ul").children();
    $("#validationSummaryContainer").toggle(!(t.length <= 0 || !t[0].innerHTML))
}
function initializeOnEnterSearch() {
    $("#FilterInputs input").keydown(function(t) {
        if (13 === t.keyCode)
            return $("#SearchBtn").click(),
            t.preventDefault(),
            !1
    }),
    $('[data-disable-enter-submit="true"]').keypress(function(t) {
        13 === t.keyCode && event.preventDefault()
    })
}
function InitializeConfirmationWindowOnCreateEditPage(n) {
    n = $.extend(!0, {
        submitButtonSelector: "[type=submit]",
        kendoDropDownSelector: "#TranslationRequired",
        initialValue: "",
        resources: {
            Title: "",
            Text: ""
        },
        override: []
    }, n),
    $(n.submitButtonSelector).on("click", function(t) {
        var e = $(n.kendoDropDownSelector).getKendoDropDownList();
        if (e) {
            var o = n.initialValue
              , i = e.value();
            o && o !== i && "False" === i && (t.preventDefault(),
            new Common.ConfirmationDialog(n.resources.Title,n.resources.Text,{
                buttons: n.override
            }).showConfirmation().then(function(t) {
                $("form").trigger("submit")
            }))
        }
    })
}
function switchOffJQueryValidator() {
    $("form").validate().cancelSubmit = !0
}
function exportCsv(t, e, o) {
    var i = getExportCsvForm(e, $(t), o);
    return $(document.body).append(i),
    $(i).submit(),
    !1
}
function getExportCsvForm(t, e, o) {
    var i = getGridParameters(e)
      , n = getFormRowsFromDataArray(o, "selectedIds");
    return $('<form id="export-csv-form" action="'.concat(t, '" method="POST" enctype="application/x-www-form-urlencoded">\n            <input type="hidden" name="filter" value="').concat(i.filter, '">\n            <input type="hidden" name="sort" value="').concat(i.sort, '">\n            ').concat(n, "\n        </form>"))
}
function getGridParameters(t) {
    var e = t.data("kendoGrid");
    return (e.dataSource.transport.parameterMap || function(t) {
        return t
    }
    )({
        sort: e.dataSource.sort(),
        filter: e.dataSource.filter(),
        group: e.dataSource.group()
    })
}
function getFormRowsFromDataArray(t, o) {
    if (!Array.isArray(t))
        return "";
    var i = "";
    return t.forEach(function(t, e) {
        i += '<input type="hidden" name="'.concat(o, "[").concat(e, ']" value="').concat(t, '" />')
    }),
    i
}
function clearSessionStorageOnButtonClick(t, e) {
    $(e).click(function() {
        sessionStorage.removeItem(t)
    })
}
function initializeSessionExpire(i) {
    var t, n, r, a, e = "logoutDate", c = "timeoutTime", s = 800, o = 5e3;
    function l() {
        localStorage.setItem(e, ((new Date).getTime() + 6e4 * i.expireMinutes).toString()),
        localStorage.removeItem(c)
    }
    function d() {
        var t = new Date;
        return t >= new Date(+localStorage.getItem(e) || t.getTime())
    }
    function u() {
        a = !1,
        t = setInterval(function() {
            a && !d() && (a = !1,
            p()),
            !a && d() && ($("#SessionExpireNotification").data("kendoWindow").center().open(),
            a = !0,
            function() {
                var e, t = localStorage.getItem(c);
                if (t)
                    e = new Date(+t);
                else {
                    var o = (new Date).getTime() + 6e4 * i.sessionExpireNotificationMinutes;
                    localStorage.setItem(c, o.toString()),
                    e = new Date(o)
                }
                n = setInterval(function() {
                    a && !d() && (a = !1,
                    p());
                    var t = Math.max(0, e - new Date) / 1e3;
                    0 === t ? ($.get("/Account/LogoutSessionExpired/"),
                    $("#SessionExpireNotificationOut").data("kendoWindow").center().open(),
                    $("#SessionExpireNotification").data("kendoWindow").center().close(),
                    a = !0,
                    f()) : r.text("0".concat(Math.floor(t / 60)).substr(-2) + ":" + "0".concat(Math.floor(t % 60)).substr(-2))
                }, s)
            }(),
            clearInterval(t))
        }, o)
    }
    function h() {
        l(),
        f(),
        null != r && r.text(kendo.format("0{0}:00", i.sessionExpireNotificationMinutes)),
        u()
    }
    function f() {
        clearInterval(t),
        clearInterval(n)
    }
    function p() {
        $("#SessionExpireNotification").data("kendoWindow").center().close(),
        h()
    }
    i = $.extend(!0, {
        sessionExpireNotificationMinutes: 0,
        expireMinutes: 0
    }, i),
    l(),
    $(document).on("keyup mouseup touchend scroll", function() {
        a || h()
    }),
    r = $("#logout-counter-span"),
    u(),
    $("#Refresh").click(p),
    $("#Ok").click(function() {
        location.reload()
    })
}
function initializeTooltips() {
    $("main").kendoTooltip({
        content: function(t) {
            return t.target.data("tooltipText")
        },
        showAfter: 4e3,
        animation: {
            open: {
                effects: "fade:in",
                duration: 100
            },
            close: {
                effects: "fade:out",
                duration: 100
            }
        },
        callout: !1,
        filter: "[data-tooltip-text]"
    })
}
function scrollUp() {
    $("html, body").animate({
        scrollTop: 0
    })
}
function deleteGridElementsIds(t, o, e, i, n) {
    void 0 === n && (n = function(t) {}
    );
    var r = [];
    $(t + ":checked").each(function(t, e) {
        r.push($(e).attr(o))
    });
    var a = $(i)
      , c = {
        url: e,
        data: {
            itemsIds: r
        },
        success: function(t) {
            t.StatusCode || 0 === t.length ? a.data("kendoGrid").dataSource.read() : n(t)
        }
    };
    kendo.ui.progress(a, !0),
    $.post(c).then(function() {
        kendo.ui.progress(a, !1)
    })
}
function onChangeDatePickerForMinWithTemplate(t) {
    var e = t.sender
      , o = e.value();
    null === o && (o = kendo.parseDate(e.element.val(), e.options.parseFormats)),
    o < e.min() ? e.value(e.min()) : o > e.max() && e.value(e.max())
}
function getBool(t) {
    var e = +t;
    return isNaN(e) ? !!String(t).toLowerCase().replace(!1, "") : !!e
}
function initializeLocaleValidation() {
    $("[name=invalidLocaleValidationField][data-locale-validation-required=true][data-for-field]").each(function(t, e) {
        var o = $(e).data("forField");
        $("#" + o).on("change paste keyup", function(t) {
            $(e).toggle(0 < $(t.currentTarget).val().length)
        })
    })
}
function initializeLocaleValidationOnSubmit(e) {
    $("[data-locale-validation=True]:submit").click(function(t) {
        new Core.ShowValidation(e,!0),
        t.preventDefault()
    })
}
function clearCookieByFilter(e) {
    Object.keys($.cookie()).forEach(function(t) {
        -1 !== t.toLowerCase().indexOf(e.toLowerCase()) && $.removeCookie(t, {
            path: "/"
        })
    })
}
function redirectIfResultContainsCheckoutLink(t) {
    return !!t.checkoutWarningLink && (assignLocation(addReturnUrl(t.checkoutWarningLink)),
    !0)
}
function getCurrentBrowser() {
    var t, e = navigator.userAgent, o = e.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
    return /trident/i.test(o[1]) ? {
        name: "IE",
        version: (t = /\brv[ :]+(\d+)/g.exec(e) || [])[1] || ""
    } : "Chrome" === o[1] && null != (t = e.match(/\bOPR|Edge\/(\d+)/)) ? {
        name: "Opera",
        version: t[1]
    } : (o = o[2] ? [o[1], o[2]] : [navigator.appName, navigator.appVersion, "-?"],
    null != (t = e.match(/version\/(\d+)/i)) && o.splice(1, 1, t[1]),
    {
        name: o[0],
        version: o[1]
    })
}
function getKendoItemsFromIEnumerable(t, o, i) {
    var n = [];
    return $.each(t, function(t, e) {
        n.push({
            Value: e[o],
            Text: e[i]
        })
    }),
    n
}
function createDataSource(t, e, o) {
    return void 0 === t && (t = null),
    void 0 === e && (e = "Id"),
    void 0 === o && (o = "Title"),
    t ? new kendo.data.DataSource({
        data: getKendoItemsFromIEnumerable(t, e, o)
    }) : new kendo.data.DataSource
}
function fillDropDown(t, e, o, i) {
    void 0 === o && (o = "Id"),
    void 0 === i && (i = "Title");
    var n = createDataSource(e, o, i)
      , r = $(t).data("kendoDropDownList");
    r && (r.setDataSource(n),
    1 === n.total() && r.select(1))
}
function fillMultiSelect(t, e) {
    var o = $(t).data("kendoMultiSelect");
    if (o) {
        var i = new kendo.data.DataSource({
            data: e
        });
        o.setDataSource(i)
    }
}
$(document).ready(function() {
    MakeHiddablePanels(),
    MakePaddedPanels(),
    MakeValidationSummary(),
    new Common.CreateReorder(".k-grid[reorderable=true]","OrderId"),
    schedulePingTime(),
    initializeOnEnterSearch(),
    initializeGridCheckboxes(),
    initializePrintSearchResults(),
    initializeKendoListBoxFocus(),
    initializeGeneratePdfReportEvents(),
    addListBoxQuickSearch(),
    addListBoxItemsTransferOnDoubleClick(),
    initializeButtonDisablingOnTextboxChange(),
    $.ajaxSetup({
        cache: !1
    })
}),
function(c) {
    c.extend(c.fn, {
        makeCssInline: function() {
            this.each(function(t, e) {
                var o = ["width", "height", "vertical-align", "fill", "display"]
                  , i = e.style
                  , n = [];
                for (var r in i)
                    if (c(this).css(r) && o.indexOf(r) + 1) {
                        var a = c(this).css(r);
                        "NaNpx" == a && (a = "20px"),
                        n.push(r + ":" + a)
                    }
                this.style.cssText = n.join(";"),
                c(this).children().makeCssInline()
            })
        },
        hasValue: function() {
            return 0 < c(this).val().trim().length
        }
    }),
    Object.defineProperty(Object.prototype, "toQueryString", {
        value: function() {
            var t = c.extend({}, this)
              , e = "?";
            return "id"in t && (e = "/" + t.id + "?",
            delete t.Id),
            e + c.param(t).replace(/%5B%5D/g, "")
        }
    })
}(jQuery),
Array.prototype.find || Object.defineProperty(Array.prototype, "find", {
    value: function(t) {
        if (null == this)
            throw new TypeError('"this" is null or not defined');
        var e = Object(this)
          , o = e.length >>> 0;
        if ("function" != typeof t)
            throw new TypeError("predicate must be a function");
        for (var i = arguments[1], n = 0; n < o; ) {
            var r = e[n];
            if (t.call(i, r, n, e))
                return r;
            n++
        }
    }
});
var showOverlay = function() {
    var e = kendo.ui.Validator.prototype.validate;
    return kendo.ui.Validator.prototype.validate = function() {
        var t = e.apply(this, arguments);
        return t || showOverlay(!1),
        t
    }
    ,
    function(t) {
        void 0 === t && (t = !0),
        $(".custom-overlay-loading").remove(),
        t && $('<div class="k-loading-mask custom-overlay-loading">\n                <div class="k-loading-image" style="position: fixed">\n                    <div class="k-loading-color"></div>\n                </div>\n            </div>').appendTo($(document.body))
    }
}();
function setupGridCheckboxes(t, i) {
    var n = i.$grid.data("kendoGrid")
      , e = n.tbody.find("input[type=checkbox]")
      , o = n.thead.find("input[type=checkbox]");
    e.each(function(t, e) {
        var o = n.dataItem($(e).parents("tr:first"));
        i.selectedItemsIds.indexOf(o.get("Id")) + 1 && n.select($(e).parents("tr:first"))
    }),
    o.change(function(t) {
        $(t.target).prop("checked") ? i.selectedItemsIds = $.map(n.items(), function(t) {
            return n.dataItem(t).get("Id")
        }).slice() : i.selectedItemsIds = []
    }),
    e.change(function(t) {
        var e = n.dataItem($(t.target).parents("tr:first")).get("Id");
        if ($(t.target).prop("checked"))
            i.selectedItemsIds.push(e);
        else {
            var o = i.selectedItemsIds.indexOf(e);
            i.selectedItemsIds.splice(o, 1)
        }
    })
}
function addListBoxQuickSearch() {
    var s = this
      , l = ""
      , d = -1;
    $("body").on("keydown", ".k-listbox ul", function(t) {
        var e = t.key;
        if (e.match(/^[-0-9a-zа-я ]$/)) {
            var o = $(t.currentTarget)
              , i = o.closest(".k-listbox")
              , n = s.getSearchInforamationHint(i);
            clearTimeout(d),
            d = window.setTimeout(function() {
                l = "",
                n.fadeOut()
            }, 1e3),
            l += e.toLowerCase(),
            n.text(l).fadeIn();
            var r = i.find("select").getKendoListBox()
              , a = r.items().toArray()
              , c = $(a.filter(function(t) {
                return 0 === $(t).text().toLowerCase().indexOf(l)
            })[0]);
            c.length && (r.clearSelection(),
            r.select(c),
            o.closest(".k-list-scroller").animate({
                scrollTop: r.select().position().top - o.find("li:eq(0)").position().top
            }))
        }
    })
}
function getSearchInforamationHint(t) {
    var e = t.find(".search-hint");
    return 0 === e.length && (e = $("<span>").addClass("badge search-hint"),
    t.append(e)),
    e.css("left", (t.width() - e.width()) / 2),
    e
}
function addListBoxItemsTransferOnDoubleClick() {
    $("body").on("dblclick", ".k-listbox .k-item", function(t) {
        var e, o = $(t.currentTarget).closest(".k-listbox").find("select"), i = $(o.data("mainListbox"));
        i.length ? e = "transferFrom" : (e = "transferTo",
        i = o),
        i.getKendoListBox()._executeCommand(e)
    })
}
function initializeButtonDisablingOnTextboxChange() {
    $("[data-disable-on-empty-textbox]").each(function(t, e) {
        var o = $(e);
        getBool(o.data("disableOnEmptyTextboxRequired")) && $(o.data("disableOnEmptyTextbox")).on("input", function(t) {
            o.removeClass("k-state-disabled"),
            o.attr("disabled", !$(t.target).val().trim())
        })
    })
}
function getFilterValue(t) {
    var e = !0 === t.data("isStringFilter")
      , o = t.val().trim();
    return e ? o : tryParseInt(o)
}
function clearSelectedItems(t) {
    t.selectedItemsIds = [],
    $("input[type=checkbox]:checked").prop("checked", !1)
}
function getCurrentCulture() {
    var t = $.cookie(".AspNetCore.Culture") || "c=en-GB|uic=en-GB";
    return /([a-zA-Z\-]{2,5})/.exec(t)[0]
}
function checkDateLimit(t, e, o) {
    if (t) {
        var i = new Date(e);
        return o ? t < i : i < t
    }
    return !1
}
function setDefaultDateValue(t, e) {
    t.sender.value() || t.sender.value(new Date(e))
}
function saveReturnUrlAndRedirectWhenClick(e, t, o, i) {
    "/" !== t && sessionStorage.setItem(e, t),
    $('[id="'.concat(o, '"]')).click(function(t) {
        t.preventDefault(),
        assignLocation(sessionStorage.getItem(e) || i),
        sessionStorage.removeItem(e)
    })
}
var assignLocation = function(t) {
    return -1 !== t.indexOf("/GeneratePdf") ? window.open(nullable(t).replace(/(&|\?)returnUrl=.+?(&|$)/, "$2")) : window.location.assign(t)
}, Common, Common;
function initializeGeneratePdfReportEvents() {
    var t = function(t) {
        var e = $(t.currentTarget);
        -1 !== (e.attr("action") || e.attr("href") || "/").indexOf("/GeneratePdf") && e.attr("target", "_blank")
    };
    $(document).on("submit", "form", t),
    $(document).on("click", "a", t)
}
function downloadFile(e, o, i) {
    $.get("/".concat(o, "/CheckAccessToFile/").concat(e), function(t) {
        t.Error ? alert(i) : window.location.href = "/".concat(o, "/DownloadFile/").concat(e)
    })
}
jQuery.fn.extend({
    kendoTextBox: function() {
        return this
    }
}),
function(t) {
    var e = function() {
        function t(t, e, o) {
            var i = this;
            this.showChangeStateErrorsUrl = t,
            this.defaultChangeStateUrl = e,
            this.changeSiteStateUrl = o,
            this.changeStateDropdownSelector = "#ActionsList",
            this.changeStateBtnSelector = "#ApplyActionButton",
            this.goPrintBtnSelector = "[name=GoPrintHeader]",
            this.printDropDownListSelector = ".details-print-drop-down-list",
            $(this.changeStateBtnSelector).click(function() {
                i.sendChangeStateActionsRequest()
            });
            var n = this;
            $(document).ready(function() {
                $(n.goPrintBtnSelector).click(function(t) {
                    n.sendPrintActionRequest(t)
                })
            }),
            refreshSvg().then(function() {
                return n.refreshSvgDone()
            })
        }
        return t.prototype.refreshSvgDone = function() {}
        ,
        t.prototype.sendChangeStateActionsRequest = function() {
            var t = $(this.changeStateDropdownSelector).val();
            this.sendActionRequest(t, this.defaultChangeStateUrl)
        }
        ,
        t.prototype.sendPrintActionRequest = function(t) {
            var e = $(t.target).closest("table").find(this.printDropDownListSelector).find("select").getKendoDropDownList().value();
            this.sendActionRequest(e, this.defaultChangeStateUrl)
        }
        ,
        t.prototype.sendActionRequest = function(e, t) {
            var r = this;
            "0" !== e && t.some(function(t) {
                return 0 < e.indexOf(t)
            }) ? (showOverlay(),
            $.get({
                url: e,
                cache: !1,
                success: function(t) {
                    if (t && 0 === t.Result) {
                        var e = [];
                        e.push(t);
                        var o = r.showChangeStateErrorsUrl + "?data=" + encodeURIComponent(JSON.stringify(e));
                        assignLocation(addReturnUrl(o, window.location.href))
                    } else if (t && 2 === t.Result) {
                        var i = $.param({
                            id: t.CertificateId,
                            questionMessages: t.Message,
                            trigger: t.Trigger
                        })
                          , n = "".concat(r.changeSiteStateUrl, "?").concat(i);
                        assignLocation(addReturnUrl(n, window.location.href))
                    } else
                        window.location.reload()
                }
            }).fail(showOverlay.bind(null, !1))) : assignLocation(addReturnUrl(e))
        }
        ,
        t
    }();
    t.Details = e
}(Common || (Common = {})),
function(t) {
    var e = function() {
        function t(t, e, o, i, n, r, a, c, s, l, d, u, h, f, p) {
            void 0 === f && (f = !0),
            void 0 === p && (p = null);
            var m = this;
            this.defaultDropdownValueFieldName = "Id",
            this.defaultDropdownTextFieldName = "Title",
            this.updateStates = function() {
                var e = this
                  , t = $(this.stateGroupSelector).val();
                "" === t && (t = 0),
                $.ajax({
                    url: "".concat(e.getCertificateStatesUrl, "?stateGroupId=").concat(t, "&type=").concat(e.typeOfCertificate, "&ui-culture=").concat(getCurrentCulture()),
                    cache: !0,
                    success: function(t) {
                        fillDropDown($(e.stateSelector), t)
                    }
                })
            }
            ,
            this.typeOfCertificate = t,
            this.getAreasByLocationUrl = "/data/getAreasByLocation",
            this.getAreasByInstallationUrl = "/data/GetAreasByInstallation",
            this.getInstallationsBySiteUrl = "/data/getInstallationsBySite",
            this.getLocationsByInstallationUrl = f ? "/data/GetNotIntermediateLocationsByInstallation" : "/data/getLocationsByInstallation",
            this.getTagsByInstallationUrl = "/Tag/GetTagsForInstallation",
            this.getIsolationTypesByCategoryUrl = "/data/getIsolationTypesByCategory",
            this.getDefaultValidityPeriodUrl = "/data/getDefaultValidityPeriod",
            this.getCertificateCategoriesUrl = "/data/GetCategorySearchByType",
            this.getCertificateStatesUrl = "/data/GetStatesByStateGroup",
            this.getRolesByInstallationUrl = "/data/GetInstallationRoles",
            this.certificateCategorySelector = o,
            this.siteSelector = i,
            this.installationSelector = n,
            this.locationSelector = r,
            this.tagsSelector = p,
            this.isolationTypeSelector = c,
            this.validityPeriodSelector = s,
            this.taskAreasSelector = a,
            this.availableSecondaryAreasSelector = "#availableSecondaryLocationArea",
            this.selectedSecondaryAreasSelector = "#SelectedSecondaryAreaIds",
            this.availableInstalationRolesSelector = "#availableInstalationRoles",
            this.selectedInstalationRolesSelector = "#SelectedRoleIds",
            this.availablePrivilegeSelector = "#availablePrivilege",
            this.selectedPrivilegeSelector = "#SelectedPrivilegeIds",
            this.pleaseSelectLocalizedText = l,
            this.certificateTypeSelector = e,
            this.stateSelector = d,
            this.stateGroupSelector = u,
            this.roleSelector = h,
            $(this.certificateCategorySelector).change(function() {
                m.updateIsolationTypes(),
                s && m.updateValidityPeriod()
            }),
            $(this.locationSelector).change(function() {
                m.updateTaskAreaAndSecondaryAreas()
            }),
            $(this.taskAreasSelector).change(function() {
                m.updateSecondaryAreas()
            }),
            $(this.siteSelector).change(function() {
                m.updateInstallations()
            }),
            $(this.installationSelector).change(function() {
                m.updateLocations(),
                m.updateTags()
            }),
            $(this.certificateTypeSelector).change(function() {
                m.updateCategories()
            }),
            $(this.stateGroupSelector).change(function() {
                m.updateStates()
            })
        }
        return t.prototype.updateTaskAreaAndSecondaryAreas = function() {
            var e = this
              , o = this
              , t = $(this.locationSelector).val();
            $.ajax({
                url: this.getAreasByLocationUrl,
                data: {
                    locationId: t,
                    "ui-culture": getCurrentCulture()
                },
                cache: !0,
                success: function(t) {
                    fillDropDown(o.taskAreasSelector, t),
                    $(e.availableSecondaryAreasSelector).length && 1 === t.length && e.updateSecondaryAreas()
                }
            })
        }
        ,
        t.prototype.updateCategories = function() {
            var e = this
              , t = $(this.certificateTypeSelector).val();
            $.ajax({
                url: "".concat(this.getCertificateCategoriesUrl, "?typeId=").concat(t, "&ui-culture=").concat(getCurrentCulture()),
                cache: !0,
                success: function(t) {
                    fillDropDown($(e.certificateCategorySelector), t)
                }
            })
        }
        ,
        t.prototype.updateRoles = function() {
            var e = this
              , t = $(this.installationSelector).val();
            return $.ajax({
                url: this.getRolesByInstallationUrl,
                data: {
                    installationId: t
                }
            }).then(function(t) {
                e.fillRolesDropDown($(e.roleSelector), t)
            })
        }
        ,
        t.prototype.updateSecondaryAreas = function() {
            var e = this
              , t = $(this.installationSelector).val()
              , o = tryParseInt($(e.taskAreasSelector).getKendoDropDownList().value());
            if (void 0 !== $(e.selectedSecondaryAreasSelector).getKendoListBox()) {
                var i = $(e.selectedSecondaryAreasSelector).getKendoListBox().dataSource
                  , n = i.data().map(function(t) {
                    return t.Value
                });
                if (o) {
                    n.push(o);
                    var r = i.data().find(function(t) {
                        return t.Value == o
                    });
                    r && i.remove(r)
                }
                $.post({
                    url: this.getAreasByInstallationUrl,
                    data: {
                        installationId: t,
                        areaIdsToExclude: n,
                        "ui-culture": getCurrentCulture()
                    },
                    cache: !0,
                    success: function(t) {
                        e.fillSecondaryAreas(e, t)
                    }
                })
            }
        }
        ,
        t.prototype.fillSecondaryAreas = function(t, e) {
            var o = createDataSource(e)
              , i = $(t.availableSecondaryAreasSelector).data("kendoListBox");
            i && i.setDataSource(o)
        }
        ,
        t.prototype.fillInstalationRoles = function(t, e) {
            var o = createDataSource(e);
            $(t.availableInstalationRolesSelector).data("kendoListBox").setDataSource(o),
            $(t.selectedInstalationRolesSelector).data("kendoListBox").setDataSource(createDataSource())
        }
        ,
        t.prototype.fillPrivilege = function(t, e) {
            var o = createDataSource(e);
            $(t.availablePrivilegeSelector).data("kendoListBox").setDataSource(o),
            $(t.selectedPrivilegeSelector).data("kendoListBox").setDataSource(createDataSource())
        }
        ,
        t.prototype.updateIsolationTypes = function() {
            var e = this
              , t = $(this.certificateCategorySelector).val();
            $.ajax({
                method: "GET",
                url: "".concat(this.getIsolationTypesByCategoryUrl, "?categoryId=").concat(t, "&ui-culture=").concat(getCurrentCulture()),
                cache: !0,
                success: function(t) {
                    e.isolationTypeCodes = t,
                    fillDropDown(e.isolationTypeSelector, t)
                }
            })
        }
        ,
        t.prototype.updateValidityPeriod = function() {
            var o = this
              , t = $(this.certificateCategorySelector).val();
            $.ajax({
                method: "GET",
                url: this.getDefaultValidityPeriodUrl + "?categoryId=" + t,
                success: function(t) {
                    var e = $(o.validityPeriodSelector).data("kendoNumericTextBox");
                    e.max(t),
                    e.value(null != t ? t : 1)
                }
            })
        }
        ,
        t.prototype.updateLocations = function() {
            var e = this
              , t = $(this.installationSelector).val();
            $.ajax({
                method: "GET",
                url: "".concat(this.getLocationsByInstallationUrl, "?installationId=").concat(t, "&ui-culture=").concat(getCurrentCulture()),
                cache: !0,
                success: function(t) {
                    fillDropDown(e.locationSelector, t),
                    e.updateTaskAreaAndSecondaryAreas()
                }
            })
        }
        ,
        t.prototype.updateTags = function() {
            if (this.tagsSelector) {
                var e = this
                  , t = $(this.installationSelector).val();
                $.ajax({
                    method: "GET",
                    url: "".concat(this.getTagsByInstallationUrl, "?installationId=").concat(t),
                    cache: !0,
                    success: function(t) {
                        fillMultiSelect(e.tagsSelector, t.Data)
                    }
                })
            }
        }
        ,
        t.prototype.updateInstallations = function() {
            var e = this
              , t = $(this.siteSelector).val();
            $.ajax({
                method: "GET",
                url: "".concat(this.getInstallationsBySiteUrl, "?siteId=").concat(t, "&ui-culture=").concat(getCurrentCulture()),
                cache: !0,
                success: function(t) {
                    fillDropDown(e.installationSelector, t),
                    $(e.installationSelector).trigger("change"),
                    $(e.installationSelector).data("kendoDropDownList").select(0),
                    e.updateLocations(),
                    e.updateTags()
                }
            })
        }
        ,
        t.prototype.fillRolesDropDown = function(t, e) {
            return fillDropDown(t, e, "NormalizedName", "Name")
        }
        ,
        t.prototype.getTypeOfCertificate = function() {
            return this.typeOfCertificate
        }
        ,
        t
    }();
    t.CascadeLists = e
}(Common || (Common = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), Common, Common, Common, Common, Common;
function tryParseInt(t) {
    var e = t;
    return null !== t && 0 < t.length && !isNaN(t) && (e = parseInt(t)),
    e
}
!function(g) {
    var t = function(m) {
        function t(t, e, o, i, n, r, a, c, s, l, d, u, h, f) {
            var p = m.call(this, t, "[name=CertificateTypeId]", "[name=CertificateCategoryId]", "[name=SiteId]", "[name=InstallationId]", "[name=LocationId]", "[name=TaskAreaId]", null, null, e, "[name=CertificateState]", "[name=StateGroup]", null, !0, "[name=SelectedTagIds]") || this;
            return p.changeStateSectionSelector = ".ChangeStateBtnBox",
            p.changeStateDropdownSelector = "input[id^=action_dropdown]",
            p.certificateActionSectionSelector = ".certificateActionSelectBox",
            p.getCertificateActionsMethodName = "GetChangeStateAvailableActions?certificateId=",
            p.defaultMultipleChangeSiteStateUrl = "MultipleChangeSiteState",
            p.preIssueTriggerId = 25,
            p.issueTriggerId = 26,
            p.issueForDftTriggerId = 27,
            p.getUserGridOptionUrl = "/User/GetUserGridOptions",
            p.setUserGridOptionUrl = "/User/SetUserGridOptions",
            p.resetUserGridOptionUrl = "/User/ResetUserGridOptions",
            p.saveUserGridOptionSelector = "#saveGridOptions",
            p.resetUserGridOptionSelector = "#resetGridOptions",
            p.defaultChangeStateUrl = "TriggerChangeWorkflowState",
            p.defaultChangeSiteStateUrl = "ChangeSiteState",
            p.defaultCountersignUrl = "Countersign",
            p.certificatecopyUrl = l,
            p.exportSearchUrl = o,
            p.changeStateBtnSelector = ".ChangeStateBtn",
            p.gridSelector = "#grid",
            p.exportBtnSelector = "#ExportHeader",
            p.certificateActionConfirmSelector = ".certificateActionConfirmButton",
            p.certificateActionSelector = ".certificateActionSelect",
            p.getChangeStateActionsUrl = i,
            p.showChangeStateErrorsUrl = n,
            p.getActionsUrl = r,
            p.defaultSite = a,
            p.defaultInstallation = c,
            p.idFormat = f,
            p.confirmationMessage = u,
            p.confirmationTitle = d,
            p.confirmationDialog = new g.ConfirmationDialog(d,u,"#relationConfirmationTemplate",{
                buttons: [{
                    text: h,
                    selector: ".confirm_no"
                }]
            }),
            $(p.certificateActionSectionSelector).hide(),
            $(p.changeStateSectionSelector).hide(),
            $(p.changeStateBtnSelector).click(function(t) {
                var e = $(t.target);
                e.attr("disabled", "disabled"),
                p.sendChangeStateActionsRequests().then(function() {
                    $(p.changeStateSectionSelector).hide()
                }).always(function() {
                    return e.removeAttr("disabled")
                })
            }),
            $(p.exportBtnSelector).click(function() {
                exportCsv(p.gridSelector, p.exportSearchUrl)
            }),
            $(p.certificateActionConfirmSelector).click(function(t) {
                p.confirmCertificateAction(t)
            }),
            $(p.saveUserGridOptionSelector).click(function() {
                $.post(p.setUserGridOptionUrl, {
                    typeOfCertificate: p.getTypeOfCertificate(),
                    options: JSON.stringify($(p.gridSelector).getKendoGrid().getOptions().columns)
                })
            }),
            $(p.resetUserGridOptionSelector).click(function() {
                $.post(p.resetUserGridOptionUrl, {
                    typeOfCertificate: p.getTypeOfCertificate()
                }).then(function() {
                    $(p.gridSelector).getKendoGrid().setOptions({
                        columns: p.gridDefaultColumnsOptions
                    }),
                    p.initTopPagination()
                })
            }),
            $(document).ready(function() {
                $.ajaxSetup({
                    cache: !1
                });
                var t = $(p.gridSelector).getKendoGrid();
                p.gridDefaultColumnsOptions = t.getOptions().columns,
                p.getUserGridOptions(t),
                p.initTopPagination()
            }),
            p
        }
        return __extends(t, m),
        t.prototype.sendChangeStateActionsRequests = function() {
            var e = this
              , c = this
              , s = []
              , l = []
              , d = ""
              , u = ""
              , h = [];
            $(this.changeStateDropdownSelector).each(function(t, e) {
                var o = $(e)
                  , i = o.val();
                if (i && 0 <= i.indexOf(c.defaultChangeStateUrl))
                    h.push($.ajax({
                        url: i,
                        async: !1
                    }));
                else if (i) {
                    var n = o.getKendoDropDownList().dataItem();
                    u = i,
                    d = n.InternalUrl;
                    var r = o.data("certificateId");
                    s.push(r);
                    var a = n.Trigger;
                    l.push(a)
                }
            });
            var t = addUrlParameter(window.location.href, "loadSavedSearch=true");
            if (1 < s.length && 0 === h.length && l.every(function(t) {
                return t === e.issueTriggerId || t === e.preIssueTriggerId || t === e.issueForDftTriggerId
            })) {
                var o = "/".concat(this.getTypeOfCertificate(), "/").concat(this.defaultMultipleChangeSiteStateUrl, "?ids=").concat(s.join("&ids="), "&trigger=").concat(l[0]);
                assignLocation(addReturnUrl(o, t))
            } else if (0 < s.length && 1 < s.length + h.length)
                this.confirmationDialog.setTitleAndMessage(this.confirmationTitle, kendo.format(this.confirmationMessage, s.map(function(t) {
                    return kendo.toString(parseInt(t), e.idFormat)
                }).join(", "))),
                this.confirmationDialog.showConfirmation(),
                $(this.gridSelector).data("kendoGrid").dataSource.read();
            else {
                if (0 === s.length && 0 < h.length)
                    return this.tryChangeCertificatesState(h, t);
                if (1 === s.length && 0 <= d.indexOf(this.defaultChangeSiteStateUrl))
                    assignLocation(addReturnUrl(u, t));
                else if (1 === s.length) {
                    o = "".concat(d, "?id=").concat(s, "&trigger=").concat(l);
                    var i = $.get(addReturnUrl(o, t));
                    return this.tryChangeCertificatesState([i], t)
                }
            }
            return $.Deferred()
        }
        ,
        t.prototype.confirmCertificateAction = function(t) {
            var e = $("#" + $(t.currentTarget).data("selectId") + " option:selected").val();
            "" !== e && assignLocation(addReturnUrl(e, null, {
                loadSavedSearch: "true"
            }))
        }
        ,
        t.prototype.onGridBound = function(t) {
            var o = this;
            this.initializeDropDowns(t);
            var i = $(o.certificateActionSelector);
            this.emptyCertificateActionDropDown();
            $("[name=certificateRadioButton]").change(function() {
                $(o.changeStateSectionSelector).hide(),
                $(this.changeStateDropdownSelector).each(function(t, e) {
                    $(e).val() && $(e).getKendoDropDownList().value(null)
                }),
                $(o.certificateActionSectionSelector + ' option[value != ""]').remove();
                var e = $(this).attr("id");
                $.ajax({
                    url: "".concat(o.getActionsUrl, "?certificateId=").concat(e)
                }).then(function(t) {
                    o.appendActionsToSelect(t, i, e),
                    $(o.certificateActionSectionSelector).show()
                })
            });
            var e = $(this.gridSelector).data("kendoGrid").dataSource.total();
            $("#ExportPanel").toggle(0 !== e)
        }
        ,
        t.prototype.initTopPagination = function() {
            var t = $(this.gridSelector).getKendoGrid()
              , e = $('<div class="k-pager-wrap k-grid-pager pagerTop"/>').insertBefore(t.element.children(".k-grid-header"));
            t.pagerTop = new kendo.ui.Pager(e,$.extend({}, t.options.pageable, {
                dataSource: t.dataSource
            }))
        }
        ,
        t.prototype.initializeDropDowns = function(i) {
            var n = this;
            $(this.changeStateDropdownSelector).each(function(t, e) {
                var o = $(e).data("certificateId");
                $(e).kendoDropDownList({
                    dataTextField: "LocalizedName",
                    dataValueField: "Url",
                    autoBind: !1,
                    autoWidth: !0,
                    optionLabel: i,
                    height: 1280,
                    dataSource: {
                        transport: {
                            read: {
                                dataType: "json",
                                url: n.getCertificateActionsMethodName + o
                            }
                        },
                        requestStart: function() {
                            kendo.ui.progress($(e).siblings(".k-dropdown-wrap"), !0)
                        },
                        requestEnd: function() {
                            kendo.ui.progress($(e).siblings(".k-dropdown-wrap"), !1)
                        },
                        schema: {
                            data: "Data"
                        }
                    },
                    change: function(t) {
                        $("[name=certificateRadioButton]").prop("checked", !1),
                        $(n.certificateActionSectionSelector).hide(),
                        $(n.changeStateSectionSelector).toggle($(n.changeStateDropdownSelector).toArray().some(function(t) {
                            return $(t).val()
                        }))
                    }
                })
            })
        }
        ,
        t.prototype.appendActionsToSelect = function(i, t, n) {
            this.emptyCertificateActionDropDown(),
            t.each(function(t, e) {
                var o = $(e);
                $.each(i, function(t, e) {
                    o.append($(kendo.format("<option certificateId='{0}' internalUrl='{1}' trigger='{2}' internalName='{3}'></option>", n, e.InternalUrl, e.Trigger, e.InternalName)).attr("value", e.Url).text(e.LocalizedName))
                }),
                o.prop("disabled", !1)
            })
        }
        ,
        t.prototype.tryChangeCertificatesState = function(t, l) {
            var d = this
              , u = this;
            return $.when.apply($, t).done(function() {
                for (var t = [], e = 0; e < arguments.length; e++)
                    t[e] = arguments[e];
                var o = t[0];
                if (o && 2 === o.Result) {
                    var i = $.param({
                        id: o.CertificateId,
                        questionMessages: o.Message,
                        trigger: o.Trigger
                    })
                      , n = "".concat(d.defaultChangeSiteStateUrl, "?").concat(i);
                    assignLocation(addReturnUrl(n, l))
                } else {
                    for (var r = [], a = 0; a < t.length; a++) {
                        var c = t[a];
                        if (c instanceof Array && (c = c[0]),
                        null != c.Result && 0 === c.Result) {
                            var s = {};
                            s.CertificateId = c.CertificateId,
                            s.Trigger = c.Trigger,
                            r.push(s)
                        }
                    }
                    if (0 < r.length) {
                        n = "".concat(u.showChangeStateErrorsUrl, "?data=").concat(encodeURIComponent(JSON.stringify(r)));
                        assignLocation(addReturnUrl(n, l))
                    } else
                        $(d.gridSelector).data("kendoGrid").dataSource.read()
                }
            })
        }
        ,
        t.prototype.emptyCertificateActionDropDown = function() {
            $(this.certificateActionSectionSelector + ' option[value != ""]').remove()
        }
        ,
        t.prototype.getUserGridOptions = function(e) {
            $.get(this.getUserGridOptionUrl, {
                typeOfCertificate: this.getTypeOfCertificate()
            }).then(function(t) {
                t && e.setOptions({
                    columns: JSON.parse(t)
                })
            })
        }
        ,
        t
    }(g.CascadeLists);
    g.Search = t
}(Common || (Common = {})),
function(t) {
    var e = function() {
        function t(t, e) {
            this.gridSelector = t,
            this.initialDataHiddenSelector = e;
            var o = this;
            $(document).ready(function() {
                o.loadInitialData()
            })
        }
        return t.prototype.loadInitialData = function() {
            if (this.initialDataHiddenSelector) {
                var t = $(this.initialDataHiddenSelector).val();
                t && $(this.gridSelector).data("kendoGrid").dataSource.data(JSON.parse(t))
            }
        }
        ,
        t
    }();
    t.GridInitialDataLoad = e
}(Common || (Common = {})),
function(t) {
    var e = function() {
        function t(t, e, o, i) {
            void 0 === o && (o = null),
            void 0 === i && (i = null),
            this.confirmationTitle = t,
            this.confirmationMessage = e,
            this.dialogClassName = "confirmationDialog",
            $.isPlainObject(o) && (i = o,
            o = null),
            this.config = $.extend(!0, {
                confirmationTemplateSelector: o || "#confirmationTemplate",
                buttons: [{
                    text: "",
                    selector: ".confirm_yes"
                }, {
                    text: "",
                    selector: ".confirm_no"
                }],
                cssClassNames: {
                    confirmationDialog: "delete-confirmation-dialog"
                },
                template: {
                    width: "450px",
                    modal: !0,
                    title: !1,
                    visible: !1,
                    resizable: !1,
                    actions: []
                }
            }, i)
        }
        return t.prototype.showConfirmation = function() {
            var e = $.Deferred()
              , o = !1
              , t = "confirmationWindow"
              , i = $("<div>");
            $($(this.config.confirmationTemplateSelector).html()).appendTo(i),
            $.each(this.config.buttons, function(t, e) {
                e.text && i.find(e.selector).val(e.text)
            });
            var n = $(kendo.format("<div id='{0}'></div>", t)).appendTo("body").kendoWindow($.extend(!0, this.config.template, {
                close: function(t) {
                    this.destroy(),
                    o ? e.resolve(o) : e.reject()
                }
            })).data("kendoWindow").content(i.html());
            return n.wrapper.addClass(this.dialogClassName),
            n.wrapper.addClass(this.config.cssClassNames.confirmationDialog),
            $(".popupTitle").html(this.confirmationTitle),
            $(".popupMessage").html(this.confirmationMessage),
            n.center().open(),
            $(kendo.format("#{0} .confirm_no", t)).click(function() {
                $(kendo.format("#{0}", t)).data("kendoWindow").close()
            }),
            $(kendo.format("#{0} .confirm_yes", t)).click(function() {
                o = !0,
                $(kendo.format("#{0}", t)).data("kendoWindow").close()
            }),
            e.promise()
        }
        ,
        t.prototype.setTitleAndMessage = function(t, e) {
            this.confirmationTitle = t,
            this.confirmationMessage = e
        }
        ,
        t
    }();
    t.ConfirmationDialog = e
}(Common || (Common = {})),
function(t) {
    var e = function(t, e, o) {
        var i = this;
        this.homePageSelector = t,
        this.previousPageSelector = e,
        this.homeUrlAction = o,
        $(document).ready(function() {
            var t = $(i.homePageSelector);
            $("<a class=error-link href=''>").text(t.text()).replaceAll(t).click(function(t) {
                return assignLocation(i.homeUrlAction),
                t.preventDefault(),
                !1
            });
            var e = $(i.previousPageSelector);
            $("<a class=error-link href=/>").text(e.text()).replaceAll(e).click(function(t) {
                return history.back(),
                t.preventDefault(),
                !1
            })
        })
    };
    (Common || (Common = {})).InitializeLinks = e
}(),
function(t) {
    var e = function() {
        function t(t, e, o, i, n, r) {
            var a = this;
            this.deleteItemsUrl = t,
            this.exportActionUrl = e,
            this.printPreviewActionUrl = o,
            this.confirmationDialog = i,
            this.savedSearchCookieName = n,
            this.printPreviewSortColumn = r,
            this.selectedItemsIds = [],
            this.searchButtonSelector = "#searchBtn",
            this.newSearchButtonSelector = "#newSearchBtn",
            this.deleteButtonSelector = "#deleteBtn",
            this.exportButtonSelector = "#exportBtn",
            this.totalItemsSelector = "#totalItems",
            this.printPreviewButtonSelector = "#printPreview",
            this.selectHazardsButtonSelector = "#selectBtn",
            this.jsonGridDataSelector = "#SelectedChildsJson",
            this.pageNumberSelector = "#Page",
            this.hazardGroupDropdownSelector = "#HazardGroupId",
            this.gridSelector = "#searchGrid";
            var c = this;
            this.$grid = $(this.gridSelector),
            $(this.searchButtonSelector).click(function() {
                a.onSearchButtonClick(!1, 1)
            }),
            $(this.newSearchButtonSelector).click(function() {
                a.onNewSearchButtonclick()
            }),
            $(this.deleteButtonSelector).click(function() {
                a.onDeleteButtonClick()
            }),
            $(this.exportButtonSelector).click(function() {
                exportCsv(a.gridSelector, a.exportActionUrl, a.selectedItemsIds)
            }),
            $(this.printPreviewButtonSelector).click(function() {
                a.onPrintPreviewButtonClick()
            }),
            $(this.selectHazardsButtonSelector).click(function() {
                a.onSelectButtonClick()
            }),
            $(document).ready(function() {
                a.onSearchButtonClick(!1, $(c.pageNumberSelector).val())
            })
        }
        return t.prototype.onDataBound = function(t) {
            setupGridCheckboxes(t, this),
            $(this.totalItemsSelector).text(t.sender.dataSource.total()),
            initializeHeaderCheckBoxChangeEvent(),
            onPageableSelectGridDataBound(t)
        }
        ,
        t.prototype.onDeleteButtonClick = function() {
            var t = this;
            this.selectedItemsIds.length && (jQuery.ajaxSettings.traditional = !0,
            this.confirmationDialog.showConfirmation().then(function() {
                $.post(t.deleteItemsUrl, t.getDeleteQueryString()).done(function() {
                    t.onDeleteComplete()
                })
            }))
        }
        ,
        t.prototype.onDeleteComplete = function() {
            this.$grid.data("kendoGrid").dataSource.read()
        }
        ,
        t.prototype.onSelectButtonClick = function() {
            var t = this.$grid.data("kendoGrid")
              , e = this.selectedItemsIds
              , o = t.dataSource.data()
              , i = [];
            o.forEach(function(t) {
                e.indexOf(t.get("Id")) + 1 && i.push(t)
            });
            var n = JSON.stringify(i);
            $(this.jsonGridDataSelector).val(n)
        }
        ,
        t.prototype.getDeleteQueryString = function() {
            return {
                ItemIds: this.selectedItemsIds
            }
        }
        ,
        t.prototype.onSearchButtonClick = function(t, e) {
            void 0 === t && (t = !1),
            void 0 === e && (e = null);
            var o = this.$grid.data("kendoGrid")
              , r = []
              , a = {}
              , i = o.dataSource.sort();
            a.Page = e || o.dataSource.page(),
            $("#FilterInputs :input.filter").each(function(t, e) {
                var o = $(e);
                if ("null" != o.val() && "" != o.val()) {
                    var i = o.attr("id")
                      , n = o.attr("filtermember") || i;
                    r.push({
                        field: n,
                        operator: o.attr("filteroperator"),
                        value: getFilterValue(o)
                    }),
                    a[i] = tryParseInt(o.val())
                }
            }),
            $.cookie(this.savedSearchCookieName, kendo.stringify(a), {
                path: "/"
            }),
            t || o.dataSource.query({
                filter: r,
                sort: i,
                page: Math.max(e, 1),
                pageSize: o.dataSource.pageSize()
            }),
            clearSelectedItems(this)
        }
        ,
        t.prototype.onNewSearchButtonclick = function() {
            var e = this
              , t = this.$grid.data("kendoGrid").dataSource;
            t.query({
                sort: t.sort(),
                filter: {},
                page: 1,
                pageSize: t.pageSize()
            }).then(function() {
                $("input[filter=True]").val(null);
                var t = $(e.hazardGroupDropdownSelector).data("kendoDropDownList");
                void 0 !== t && t.select(0)
            }),
            $.cookie(this.savedSearchCookieName, "", {
                path: "/"
            })
        }
        ,
        t.prototype.onPrintPreviewButtonClick = function() {
            var t = this.$grid.getKendoGrid().dataSource;
            t.sort({
                field: this.printPreviewSortColumn,
                dir: "asc"
            }),
            void 0 !== t.filter() && "" === t.filter().filters[0].value && t.filter([]),
            exportCsv(this.gridSelector, this.printPreviewActionUrl)
        }
        ,
        t
    }();
    t.BaseDictionarySearch = e
}(Common || (Common = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), Discipline, CC;
!function(t) {
    var e = function(l) {
        function t(t, e, o, i, n, r, a, c) {
            var s = l.call(this, t, e, o, i, n, r) || this;
            return s.failedRemoveTitle = a,
            s.failedRemoveMessage = c,
            s.failedRemoveDialog = new Common.ConfirmationDialog(s.failedRemoveTitle,s.failedRemoveMessage,"#relationConfirmationTemplate"),
            s
        }
        return __extends(t, l),
        t.prototype.onDeleteButtonClick = function() {
            var t = this;
            this.confirmationDialog.showConfirmation().then(function() {
                deleteGridElementsIds("[id*=searchGrid_checkbox_]", "data-id", t.deleteItemsUrl, t.gridSelector, t.showRemoveFailedModalWindow.bind(t))
            })
        }
        ,
        t.prototype.showRemoveFailedModalWindow = function(e) {
            var t = this.$grid.getKendoGrid().dataSource.data().filter(function(t) {
                return 0 <= e.indexOf(t.Id)
            }).map(function(t) {
                return t.Name
            }).join(", ");
            this.failedRemoveDialog.setTitleAndMessage(this.failedRemoveTitle, kendo.format(this.failedRemoveMessage, t)),
            this.failedRemoveDialog.showConfirmation()
        }
        ,
        t
    }(Common.BaseDictionarySearch);
    t.Search = e
}(Discipline || (Discipline = {})),
function(t) {
    var e = function() {
        function t(t, e, o) {
            this.getgetAvailabilityStatusUrl = t,
            this.acceptLocalizedString = e,
            this.stateWatcherSelector = o
        }
        return t.ConvertLikelihood = function(t) {
            return String.fromCharCode("A".charCodeAt(0) + t)
        }
        ,
        t.prototype.GetAvailabilityStatus = function(t, e) {
            var o;
            return $.ajax({
                url: this.getgetAvailabilityStatusUrl,
                data: {
                    severity: t,
                    likehood: e
                },
                async: !1,
                success: function(t) {
                    o = parseInt(t)
                }
            }),
            o
        }
        ,
        t.prototype.GetChangeStateAcceptanceState = function() {
            return 0 < document.getElementsByName(this.stateWatcherSelector).length
        }
        ,
        t
    }();
    t.RiskAvailabilityStatusFunctions = e
}(CC || (CC = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), SOC;
!function(t) {
    var e = function(e) {
        function t(t) {
            return e.call(this, "Soc", null, "#CertificateCategoryId", "#Site_Id", "#Installation_Id", "#LocationId", "#TaskAreaId", null, null, t, null, null, null) || this
        }
        return __extends(t, e),
        t
    }(Common.CascadeLists);
    t.CreateEdit = e
}(SOC || (SOC = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), WCC;
!function(t) {
    var e = function(i) {
        function t(t, e) {
            var o = i.call(this, "Wcc", null, "#CertificateCategoryId", "#Site_Id", "#Installation_Id", "#LocationId", "#TaskAreaId", "#IsolationTypeId", "#ValidityPeriod", t, null, null, null) || this;
            return o.isolationTypeCodes = e,
            o
        }
        return __extends(t, i),
        t.prototype.updateIsolationTypeCode = function(t) {
            if ("" === t.sender.dataItem().Value)
                $("#IsolationTypeCode").val(0);
            else {
                var e = t.sender.dataItem().Text
                  , o = this.isolationTypeCodes.find(function(t) {
                    return t.Title === e
                }).Code;
                $("#IsolationTypeCode").val(o)
            }
        }
        ,
        t
    }(Common.CascadeLists);
    t.CreateEdit = e
}(WCC || (WCC = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), WCC;
!function(t) {
    var e = function(m) {
        function t(t, e, o, i, n, r, a, c, s, l, d, u, h, f) {
            var p = m.call(this, u, h, f) || this;
            return p.plotPlanCanvasSelector = t,
            p.iconPositionX = e,
            p.iconPositionY = o,
            p.positionIconButtonSelector = i,
            p.positionSecondaryIconButtonSelector = n,
            p.hasPlotPlan = r,
            p.getPlotPlanIdActionUrl = a,
            p.installationId = c,
            p.locationId = s,
            p.certificatePositionSearchActionUrl = l,
            p.navigateButtonSelector = d,
            $(document).ready(function() {
                p.configurePositionIconButtons(),
                $(p.navigateButtonSelector).click(function() {
                    p.onNavigateButtonClick()
                }),
                p.configureStateIcon()
            }),
            p
        }
        return __extends(t, m),
        t.prototype.onNavigateButtonClick = function() {
            var o = this;
            $.post(this.getPlotPlanIdActionUrl, {
                installationId: this.installationId,
                locationId: this.locationId
            }).then(function(t) {
                if (t) {
                    var e = {
                        plotPlanId: t
                    };
                    assignLocation(o.certificatePositionSearchActionUrl + e.toQueryString())
                }
            })
        }
        ,
        t.prototype.configurePositionIconButtons = function() {
            $(this.positionIconButtonSelector + "," + this.positionSecondaryIconButtonSelector).attr("disabled", "False" === this.hasPlotPlan)
        }
        ,
        t.prototype.configureStateIcon = function() {
            var i = this;
            if (this.iconPositionX && this.iconPositionY) {
                var n = new fabric.Canvas("plotPlanCanvas")
                  , e = $("svg.icon-state");
                0 == e.length && console.error("Could not find svg.replaced-svg"),
                $.when(e.makeCssInline()).then(function() {
                    var t = (new XMLSerializer).serializeToString(e[0]);
                    fabric.loadSVGFromString(t, function(t, e) {
                        var o = fabric.util.groupSVGElements(t, e);
                        o.left = +i.iconPositionX,
                        o.top = +i.iconPositionY,
                        o.hasControls = o.hasBorders = !1,
                        o.lockMovementX = o.lockMovementY = !0,
                        o.hoverCursor = "default",
                        n.add(o)
                    })
                })
            }
        }
        ,
        t
    }(Common.Details);
    t.Details = e
}(WCC || (WCC = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), WCC, WCC, WCC;
function getSelectedStep() {
    return nullable($("[name=stepRA]:checked").attr("id"))
}
function selectRadioStepId(t) {
    $("#" + t).click()
}
!function(t) {
    var e = function(c) {
        function t(t, e, o, i, n, r, a) {
            return c.call(this, "Wcc", t, "/Wcc/ExportCsv", "/Wcc/GetChangeStateAvailableActions", "/Wcc/ShowChangeStateErrors", "/Wcc/GetAvailableAction", e, o, "#NewSearchBtn", "/Wcc/Copy", i, n, r, a) || this
        }
        return __extends(t, c),
        t
    }(Common.Search);
    t.Search = e
}(WCC || (WCC = {})),
function(t) {
    var e = function() {
        function t(t) {
            this.hazardGroupsVisibilities = [],
            this.hazardGroupInnerTableSelector = t
        }
        return t.prototype.showHazards = function(t, e) {
            $(t).parent().find(this.hazardGroupInnerTableSelector).toggle(e)
        }
        ,
        t.prototype.rememberHazardGroupsVisibility = function() {
            this.hazardGroupsVisibilities = $(this.hazardGroupInnerTableSelector).map(function() {
                return $(this).is(":visible")
            })
        }
        ,
        t.prototype.restoreHazardGroupsVisibility = function() {
            var e = this;
            $(this.hazardGroupInnerTableSelector).each(function(t) {
                $(this).toggle(!!e.hazardGroupsVisibilities.get(t))
            })
        }
        ,
        t
    }();
    t.RaHazardgroupHazardVisibility = e
}(WCC || (WCC = {})),
function(t) {
    var e = function() {
        function t(t, e, o, i) {
            this.radioBtnSelectStepSelector = t,
            this.deselectedButtonsUntilRadioNotCheckedSelector = e,
            this.radioBtnSelectHazardSelector = o,
            this.hazardIdSelector = i
        }
        return t.prototype.checkRadioBtnState = function() {
            var t = !$(this.radioBtnSelectStepSelector).is(":checked") && !$(this.radioBtnSelectHazardSelector).is(":checked");
            $(this.deselectedButtonsUntilRadioNotCheckedSelector).attr("disabled", t)
        }
        ,
        t.prototype.getSelectedHazardId = function() {
            return nullable($(this.radioBtnSelectHazardSelector + ":checked").siblings(this.hazardIdSelector).attr("id"))
        }
        ,
        t
    }();
    t.viewRisk2 = e
}(WCC || (WCC = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), SCC;
!function(t) {
    var e = function(c) {
        function t(t, e, o, i, n, r, a) {
            return c.call(this, "Scc", t, "/Scc/ExportCsv", "/Scc/GetChangeStateAvailableActions", "/Scc/ShowChangeStateErrors", "/Scc/GetAvailableAction", e, o, "#NewSearchBtn", "/Scc/Copy", i, n, r, a) || this
        }
        return __extends(t, c),
        t
    }(Common.Search);
    t.Search = e
}(SCC || (SCC = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), User;
!function(t) {
    var e = function(f) {
        function t(t, e, o, i, n, r, a, c, s, l, d) {
            var u = f.call(this, t, "#initialData") || this;
            u.selectedItemsIds = [],
            u.deleteButtonSelector = e,
            u.numberFieldSelector = o,
            u.exportButtonSelector = i,
            u.detailedExportButtonSelector = n,
            u.exportActionUrl = r,
            u.exportDetailsActionUrl = a,
            u.deleteUrl = c,
            u.confirmationDialog = s,
            u.permissionsDialog = l,
            u.pageNumberSelector = d,
            u.$grid = $(u.gridSelector),
            $(u.exportButtonSelector).click(function() {
                exportCsv(u.gridSelector, u.exportActionUrl, u.selectedItemsIds)
            }),
            $(u.detailedExportButtonSelector).click(function() {
                exportCsv(u.gridSelector, u.exportDetailsActionUrl, u.selectedItemsIds)
            }),
            $(u.deleteButtonSelector).click(function() {
                u.onDeleteButtonClick()
            });
            var h = u;
            return $(document).ready(function() {
                $("#HeaderCheckBox").click(function() {
                    u.setCheckboxesState($("#HeaderCheckBox").is(":checked"))
                }),
                window.searchData(!1, $(h.pageNumberSelector).val(), $("#Sort").val() || JSON.stringify({
                    field: "Name",
                    dir: "asc"
                }))
            }),
            $("#Name").on("keypress", function(t) {
                13 === t.charCode && (t.preventDefault(),
                $("#SearchBtn").click())
            }),
            u
        }
        return __extends(t, f),
        t.prototype.setCheckboxesState = function(t) {
            $("[name=userSearchResult]").each(function() {
                $(this).is(":checked") != t && $(this).click()
            })
        }
        ,
        t.prototype.onGridDataBound = function(t) {
            setupGridCheckboxes(t, this),
            $(this.numberFieldSelector).text(this.$grid.data("kendoGrid").dataSource.total())
        }
        ,
        t.prototype.onDeleteButtonClick = function() {
            if (jQuery.ajaxSettings.traditional = !0,
            this.selectedItemsIds.length) {
                var e = this;
                $.ajax({
                    type: "POST",
                    url: "/User/CheckInstAdminHasPermissions",
                    data: this.getDeleteQueryString(),
                    dataType: "json",
                    success: function(t) {
                        t ? e.showDeleteConfirmDialog() : e.showHasPermissions()
                    }
                })
            }
        }
        ,
        t.prototype.showDeleteConfirmDialog = function() {
            var e = this;
            this.confirmationDialog.showConfirmation().then(function(t) {
                $.post(e.deleteUrl, e.getDeleteQueryString()).done(function(t) {
                    e.onDeleteComplete(t)
                })
            })
        }
        ,
        t.prototype.showHasPermissions = function() {
            this.permissionsDialog.showConfirmation().then(function(t) {})
        }
        ,
        t.prototype.onDeleteComplete = function(t) {
            this.$grid.data("kendoGrid").dataSource.read(),
            this.selectedItemsIds = []
        }
        ,
        t.prototype.getDeleteQueryString = function() {
            return {
                ItemIds: this.selectedItemsIds
            }
        }
        ,
        t.prototype.removeAction = function(t) {
            assignLocation(t)
        }
        ,
        t
    }(Common.GridInitialDataLoad);
    t.Search = e
}(User || (User = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), User, WCC, WCC, WCC, WCC;
!function(t) {
    var e = function(i) {
        function t(t) {
            var e = i.call(this, null, null, "#CertificateCategoryId", "#DefaultSiteId", "#DefaultInstallationId", "#LocationId", "#TaskAreaId", "#IsolationTypeId", "#ValidityPeriod", t, null, null, null) || this;
            $("#NodeAdmin").change(function() {
                var t = $("#defaultRoleId")
                  , e = $("#DefaultRoleId").data("kendoDropDownList")
                  , o = $("#NodeAdmin").is(":checked");
                e.enable(!o),
                t.toggle(o)
            });
            var o = $("#CompanyId");
            return o.change(function() {
                var t = o.getKendoDropDownList().text();
                $("#companyTitle").val(t)
            }),
            $(document).ready(function() {
                $("#NodeAdmin").is(":checked") && $("#DefaultRoleId").data("kendoDropDownList").enable(!1)
            }),
            e
        }
        return __extends(t, i),
        t.prototype.addNew = function(t, e) {
            var o = $("#" + t).getKendoDropDownList()
              , i = o.dataSource
              , n = e.length;
            if (!(n <= 0 || 100 <= n) && e.trim().length) {
                var r = i.data();
                if (0 === r.filter(function(t) {
                    return t.Title === e
                }).length) {
                    var a = r[r.length - 1];
                    null != a && a.get("Id") <= 0 && i.remove(a),
                    i.add({
                        Id: -r.length,
                        Title: e
                    }),
                    $("#companyTitle").val(e),
                    $("#CompanyId").data("kendoDropDownList").select(1),
                    i.one("sync", function() {
                        o.select(i.view().length - 1)
                    }),
                    i.sync(),
                    o.close()
                }
            }
        }
        ,
        t
    }(Common.CascadeLists);
    t.CreateEdit = e
}(User || (User = {})),
function(f) {
    var t = function() {
        function t(t, e, o, i, n, r, a, c, s, l, d, u) {
            var h = this;
            this.formSelector = "form",
            this.ExistingHazardsWereAdded = !1,
            this.customHazardCounter = 0,
            this.sortApplied = !1,
            this.hazardGroupInnerTableSelector = t,
            this.hazardsTableSelector = e,
            this.selectedHazardsTableSelector = o,
            this.hazardAndControlsJsonSelector = i,
            this.removeHazardsBtnSelector = n,
            this.hazardGroupNameCellSelector = r,
            this.selectAllSelectedHazardsCheckboxSelector = a,
            this.addCustomHazardsBtnSelector = c,
            this.additionalHazardNameInputSelector = s,
            this.additionalHazardGroupName = l,
            this.selectedHazardsCheckboxSelector = d,
            this.hazardVisibility = new f.RaHazardgroupHazardVisibility(this.hazardGroupInnerTableSelector),
            this.hazardAndControlDuplicationError = u,
            $(document).ready(function() {
                checkAndShowValidationContainer(),
                initializeLocaleValidation(),
                $(h.removeHazardsBtnSelector).click(function() {
                    h.removeHazards()
                }),
                $(h.addCustomHazardsBtnSelector).click(function() {
                    h.addCustomHazard()
                }),
                $(h.additionalHazardNameInputSelector).change(function() {
                    h.additionalHazardlNameChanged()
                })
            })
        }
        return t.prototype.additionalHazardlNameChanged = function() {
            var t = !$(this.additionalHazardNameInputSelector).val();
            $(this.additionalHazardNameInputSelector).attr("disabled", t)
        }
        ,
        t.prototype.removeHazards = function() {
            var o = []
              , i = this;
            $(this.selectedHazardsCheckboxSelector + ":checked").each(function(t, e) {
                o.push($(i.selectedHazardsTableSelector).data("kendoGrid").dataItem($(e).closest(".hazard-row")))
            }),
            $(o).each(function(t, e) {
                try {
                    $(i.hazardsTableSelector).data("kendoGrid").dataItem($("#hazardGroup-" + o[t].HazardGroupId)).Hazards.push(e)
                } catch (t) {}
                $(i.selectedHazardsTableSelector).data("kendoGrid").dataSource.remove(e)
            })
        }
        ,
        t.prototype.getMaxOrderId = function() {
            var t = $("#selectedHazards").data("kendoGrid").dataSource
              , e = Math.max.apply(Math, t.data().map(function(t) {
                return t.OrderId
            }));
            return isFinite(e) ? e : 0
        }
        ,
        t.prototype.selectHazard = function(t) {
            this.selectedHazardGroupId = $(t).closest(".hazard-row").attr("id");
            var e = $(this.hazardsTableSelector).data("kendoGrid").dataItem($(t).closest(".hazard-row"));
            if (e) {
                var o = $(t).parent().parent().children().index($(t).parent())
                  , i = e.Hazards[o];
                i.HazardGroupName = e.HazardGroupName,
                i.OrderId = this.getMaxOrderId() + 1;
                $(this.hazardsTableSelector).data("kendoGrid").dataSource;
                var n = $(this.selectedHazardsTableSelector).data("kendoGrid").dataSource;
                e.Hazards.splice(o, 1),
                n.add(i)
            }
        }
        ,
        t.prototype.changeAllselectedHazards = function() {
            var t = $(this.selectAllSelectedHazardsCheckboxSelector).is(":checked");
            $(this.selectedHazardsCheckboxSelector).each(function() {
                $(this).is(":checked") != t && $(this).click()
            })
        }
        ,
        t.prototype.updateCheckBoxState = function() {
            var t = !$(this.selectedHazardsCheckboxSelector).is(":checked");
            $(this.removeHazardsBtnSelector).attr("disabled", t)
        }
        ,
        t.prototype.findAdditionalHazard = function() {
            for (var t = $(this.hazardsTableSelector).data("kendoGrid").dataSource, e = 0; e < t.total(); e++)
                if (t.data()[e].HazardGroupName == this.additionalHazardGroupName)
                    return t.data()[e];
            return null
        }
        ,
        t.prototype.addCustomHazard = function() {
            var o = this
              , t = $(this.additionalHazardNameInputSelector).val().trim();
            t && !this.isExistHazardNameDuplicate(t) && this.addCustomHazardObject(t, null),
            $(this.additionalHazardNameInputSelector).val(""),
            this.hazardVisibility.showHazards($(".hazards-hazardGroup-name").filter(function(t, e) {
                return $.trim(e.innerHTML) === o.additionalHazardGroupName
            }), !0)
        }
        ,
        t.prototype.isExistHazardNameDuplicate = function(e) {
            var t = $(this.hazardsTableSelector).data("kendoGrid").dataSource.data().slice(0).reduce(function(t, e) {
                return t.concat(nullable(e.Hazards).slice(0))
            }, []) || []
              , o = ($(this.selectedHazardsTableSelector).data("kendoGrid").dataSource.data() || []).slice(0)
              , i = t.concat(o).some(function(t) {
                return nullable(t.EnglishHazardName).toUpperCase() === e.toUpperCase() || nullable(t.HazardName).toUpperCase() === e.toUpperCase() || nullable(t.HazardNameLocalization).toUpperCase() === e.toUpperCase()
            });
            return new Core.ShowValidation(this.hazardAndControlDuplicationError,i),
            i
        }
        ,
        t.prototype.addCustomHazardObject = function(t, e) {
            var o = $(this.hazardsTableSelector).data("kendoGrid").dataSource
              , i = this.findAdditionalHazard();
            i ? i.Hazards.push({
                HazardName: t,
                IsCustomHazard: !0,
                Id: --this.customHazardCounter,
                HazardGroupId: 0,
                EnglishHazardName: e
            }) : o.insert(0, {
                HazardGroupName: this.additionalHazardGroupName,
                IsCustomHazardGroup: !0,
                Hazards: [{
                    HazardName: t,
                    IsCustomHazard: !0,
                    Id: --this.customHazardCounter,
                    HazardGroupId: 0,
                    EnglishHazardName: e
                }],
                IconName: "Additional.gif",
                Id: 0,
                OrderId: this.getMaxOrderId() + 1
            })
        }
        ,
        t.prototype.findAndSelectExistingHazard = function(o) {
            var i = this
              , n = !1;
            return $(".hazard-name-cell").each(function(t, e) {
                $(e).text().trim() === o.trim() && (i.selectHazard(e),
                n = !0)
            }),
            n
        }
        ,
        t.prototype.addExistingHazards = function() {
            var o = this;
            if (!this.ExistingHazardsWereAdded && $(this.hazardAndControlsJsonSelector).val()) {
                var t = JSON.parse($(this.hazardAndControlsJsonSelector).val()).sort(function(t, e) {
                    return t.OrderId > e.OrderId
                })
                  , i = $(this.selectedHazardsTableSelector).data("kendoGrid").dataSource;
                $(removeDuplicatesExceptNull(t, "HazardName")).each(function(t, e) {
                    setTimeout(function() {
                        e.IsCustomHazard && e.IsCustomHazard && o.addCustomHazardObject(nullable(e.HazardName), nullable(e.EnglishHazardName)),
                        o.findAndSelectExistingHazard(nullable(e.HazardName)) || (e.HazardGroupName = "",
                        e.HazardNameLocalizationObject = e.HazardNameLocalization,
                        e.HazardNameLocalization = e.HazardNameLocalizationObject.Value,
                        i.add(e))
                    }, 0)
                }),
                this.ExistingHazardsWereAdded = !0,
                this.hazardVisibility.restoreHazardGroupsVisibility()
            }
        }
        ,
        t
    }();
    f.EditRA2Hazards = t
}(WCC || (WCC = {})),
function(t) {
    var e = function() {
        function t(t, e, o, i, n, r, a, c, s, l, d, u, h, f, p, m, g, S, v, C, y, I, k, b, x, w, P, D, B, A, T, O, R) {
            var G = this;
            this.identifierCounter = 0,
            this.ExistingControlsWereAdded = !1,
            this.MandatoryControlsWereAdded = !1,
            this.isInitialRiskMatrix = !0,
            this.letterACharCode = 65,
            this.AlarpStatuses = {
                never: 1,
                always: -1,
                selectable: 0
            },
            this.controlsGridSelector = t,
            this.chosenControlsGridSelector = e,
            this.controlCheckboxSelector = o,
            this.selectControlsBtnSelector = i,
            this.chosenControlsJsonSelector = n,
            this.selectAllChosenControlsSelector = r,
            this.selectAllControlsSelector = a,
            this.chosenControlsCheckboxSelector = c,
            this.removeControlsBtnSelector = s,
            this.additionalControlNameInputSelector = l,
            this.addAdditionalControlBtnSelector = d,
            this.alarpCheckBoxSelector = u,
            this.initialSeveritySelector = h,
            this.initialLikelihoodSelector = p,
            this.initialSeverityTextSelector = f,
            this.initialLikelihoodTextSelector = m,
            this.residualSeveritySelector = g,
            this.residualSeverityTextSelector = S,
            this.residualLikelihoodSelector = v,
            this.residualLikelihoodTextSelector = C,
            this.getInitialRiskBtnSelector = y,
            this.getResidualRiskBtnSelector = I,
            this.riskMatrixSelector = k,
            this.acceptRiskMatrixBtnSelector = b,
            this.matrixSeverityText = x,
            this.matrixLikelihoodText = w,
            this.getAvailabilityStatusUrl = P,
            this.acceptControlsChangesString = D,
            this.rejectControlsChangesString = B,
            this.confirmControlsChangesBtnSelector = A,
            this.IsPrerequisiteSelectorString = T,
            this.IsCompletionSelectorString = O,
            this.hazardAndControlDuplicationError = R,
            $(this.removeControlsBtnSelector).click(function() {
                G.deselectControls()
            }),
            $(this.selectControlsBtnSelector).click(function() {
                G.selectControls()
            }),
            $(this.addAdditionalControlBtnSelector).click(function() {
                G.addAdditionalControl()
            }),
            $(this.additionalControlNameInputSelector).change(function() {
                G.additionalControlNameChanged()
            }),
            $(this.getInitialRiskBtnSelector).click(function() {
                G.showRiskMatrix(!0)
            }),
            $(this.getResidualRiskBtnSelector).click(function() {
                G.showRiskMatrix(!1)
            }),
            $(this.acceptRiskMatrixBtnSelector).click(function() {
                G.acceptRiskMatrix()
            })
        }
        return t.prototype.selectControls = function() {
            var o = this
              , i = this
              , n = [];
            $(i.controlCheckboxSelector).each(function(t, e) {
                if ($(e).is(":checked")) {
                    var o = $(i.controlsGridSelector).data("kendoGrid").dataItem($(e).closest(".control-row"));
                    n.push(o)
                }
            }),
            $(n).each(function(t, e) {
                $(o.chosenControlsGridSelector).data("kendoGrid").dataSource.add(e),
                $(o.controlsGridSelector).data("kendoGrid").dataSource.remove(e)
            }),
            i.ExistingControlsWereAdded = !0
        }
        ,
        t.prototype.deselectControls = function() {
            var o = this
              , i = this
              , n = [];
            $(i.chosenControlsCheckboxSelector).each(function(t, e) {
                $(e).is(":checked") && n.push($(i.chosenControlsGridSelector).data("kendoGrid").dataItem($(e).closest(".control-row")))
            }),
            $(n).each(function(t, e) {
                $(o.controlsGridSelector).data("kendoGrid").dataSource.add(e),
                $(o.chosenControlsGridSelector).data("kendoGrid").dataSource.remove(e)
            })
        }
        ,
        t.prototype.saveControlsFromGrid = function() {
            var t = $(this.chosenControlsGridSelector).data("kendoGrid").dataSource.data().toJSON();
            $(this.chosenControlsJsonSelector).val(JSON.stringify(t))
        }
        ,
        t.prototype.savePrerequisiteValue = function(t) {
            var e = $(t)
              , o = $(this.chosenControlsGridSelector).data("kendoGrid")
              , i = o.dataItem(e.closest("tr"));
            i.IsPrerequisite = e.is(":checked"),
            i.IsCompletion && (i.IsCompletion = !1),
            o.refresh()
        }
        ,
        t.prototype.saveCompletionValue = function(t) {
            var e = $(t)
              , o = $(this.chosenControlsGridSelector).data("kendoGrid")
              , i = o.dataItem(e.closest("tr"));
            i.IsCompletion = e.is(":checked"),
            i.IsPrerequisite && (i.IsPrerequisite = !1),
            o.refresh()
        }
        ,
        t.prototype.changeAllControls = function() {
            var t = $(this.selectAllControlsSelector).is(":checked");
            $(this.controlCheckboxSelector).each(function() {
                $(this).is(":checked") != t && $(this).click()
            })
        }
        ,
        t.prototype.additionalControlNameChanged = function() {
            var t = !$(this.additionalControlNameInputSelector).val();
            $(this.additionalControlNameInputSelector).attr("disabled", t)
        }
        ,
        t.prototype.changeAllChosenControls = function() {
            var t = $(this.selectAllChosenControlsSelector).is(":checked");
            $(this.chosenControlsCheckboxSelector).prop("checked", t)
        }
        ,
        t.prototype.addAdditionalControl = function() {
            var t = $(this.additionalControlNameInputSelector).val().trim();
            t && !this.isExistControlNameDuplicate(t) && (this.addAdditionalControlObject(t, null, null),
            $(this.additionalControlNameInputSelector).val(""))
        }
        ,
        t.prototype.addAdditionalControlObject = function(t, e, o) {
            $(this.controlsGridSelector).data("kendoGrid").dataSource.insert(0, {
                IsCustomControl: !0,
                HazardControlName: t,
                Id: --this.identifierCounter,
                EnglishControlName: e,
                IsPrerequisite: !1,
                IsCompletion: !1,
                HazardControlNameLocalization: {
                    Value: o
                }
            })
        }
        ,
        t.prototype.isExistControlNameDuplicate = function(e) {
            var t = ($(this.controlsGridSelector).data("kendoGrid").dataSource.data() || []).slice(0)
              , o = ($(this.chosenControlsGridSelector).data("kendoGrid").dataSource.data() || []).slice(0)
              , i = t.concat(o).some(function(t) {
                return nullable(t.EnglishControlName).toUpperCase() === e.toUpperCase() || nullable(t.HazardControlName).toUpperCase() === e.toUpperCase() || nullable(nullable(t.HazardControlNameLocalization).Value).toUpperCase() === e.toUpperCase()
            });
            return new Core.ShowValidation(this.hazardAndControlDuplicationError,i),
            i
        }
        ,
        t.prototype.findAndCheckExistingControl = function(o, i, n) {
            var r = this
              , a = !1
              , c = $(r.controlsGridSelector).data("kendoGrid");
            return $(".control-row").each(function(t, e) {
                $(e).find(".control-name-cell").text().trim() == o && ($(e).find(r.controlCheckboxSelector).click(),
                c.dataItem(e).IsPrerequisite = i,
                c.dataItem(e).IsCompletion = n,
                a = !0)
            }),
            a
        }
        ,
        t.prototype.addMandatoryControls = function() {
            var t = this;
            if (!this.MandatoryControlsWereAdded) {
                var e = $(this.controlsGridSelector).data("kendoGrid").dataSource.data().filter(function(t) {
                    return 1 == t.IsMandatoryPreselected
                });
                $(e).each(function() {
                    t.findAndCheckExistingControl(this.HazardControlName, this.IsPrerequisite, this.IsCompletion)
                }),
                this.MandatoryControlsWereAdded = !0,
                this.selectControls()
            }
        }
        ,
        t.prototype.checkMandatoryControls = function(t) {
            var e = $(t)
              , o = $(t).closest(".k-grid").data("kendoGrid");
            o.dataItem(e.closest("tr")).IsMandatoryPreselected && e.closest(".k-grid").find(".control-item-checkbox").each(function() {
                o.dataItem($(this).closest("tr")).IsMandatoryPreselected && $(this).is(":checked") !== e.is(":checked") && $(this).click()
            })
        }
        ,
        t.prototype.updateCheckBoxState = function() {
            var t = !$(this.chosenControlsCheckboxSelector).is(":checked");
            $(this.removeControlsBtnSelector).attr("disabled", t)
        }
        ,
        t.prototype.addExistingControls = function() {
            var t = this
              , e = $(this.chosenControlsJsonSelector).val();
            if (!this.ExistingControlsWereAdded) {
                if (e) {
                    var o = JSON.parse(e)
                      , i = $(this.chosenControlsGridSelector).data("kendoGrid").dataSource;
                    $(o).each(function() {
                        this.IsCustomControl && t.addAdditionalControlObject(nullable(this.HazardControlName), this.EnglishControlName, null != this.HazardControlNameLocalization ? nullable(this.HazardControlNameLocalization.Value) : "")
                    }),
                    $(o).each(function() {
                        t.findAndCheckExistingControl(nullable(this.HazardControlName), this.IsPrerequisite, this.IsCompletion) || i.add(this)
                    })
                }
                this.selectControls()
            }
        }
        ,
        t.prototype.setAlarpCheckbox = function(t, e, o) {
            var i = this.getAvailabilityStatus(e, t)
              , n = i !== this.AlarpStatuses.selectable
              , r = i === this.AlarpStatuses.always;
            o || $(this.alarpCheckBoxSelector).prop("checked", r),
            $(this.alarpCheckBoxSelector).prop("disabled", n)
        }
        ,
        t.prototype.showRiskMatrix = function(t) {
            var e = (this.isInitialRiskMatrix = t) ? $(this.initialSeveritySelector).val() : $(this.residualSeveritySelector).val()
              , o = t ? $(this.initialLikelihoodSelector).val() : $(this.residualLikelihoodSelector).val();
            "" !== e ? $("[likelihood=" + this.convertNumberToLetter(o) + "][severity=" + e + "]").click() : this.clearRiskMatrix(),
            $(this.riskMatrixSelector).data("kendoWindow").center().open()
        }
        ,
        t.prototype.clearRiskMatrix = function() {
            $(".risk-cell").removeClass("risk-cell-selected"),
            $(this.matrixSeverityText).text(""),
            $(this.matrixLikelihoodText).text("")
        }
        ,
        t.prototype.acceptRiskMatrix = function() {
            var t = $(this.matrixSeverityText).text()
              , e = $(this.matrixLikelihoodText).text();
            this.isInitialRiskMatrix ? ($(this.initialSeveritySelector).val(t),
            $(this.initialSeverityTextSelector).text(t),
            $(this.initialLikelihoodSelector).val(this.convertLetterToNumber(e)),
            $(this.initialLikelihoodTextSelector).text(e)) : ($(this.residualSeveritySelector).val(t),
            $(this.residualSeverityTextSelector).text(t),
            $(this.residualLikelihoodSelector).val(this.convertLetterToNumber(e)),
            $(this.residualLikelihoodTextSelector).text(e),
            this.setAlarpCheckbox(this.convertLetterToNumber(e), t, !1),
            this.refreshStatusBtnLabel()),
            $(this.riskMatrixSelector).data("kendoWindow").center().close()
        }
        ,
        t.prototype.loadInitialRiskValues = function() {
            var t = $(this.initialSeveritySelector).val()
              , e = this.convertNumberToLetter($(this.initialLikelihoodSelector).val())
              , o = $(this.residualSeveritySelector).val()
              , i = this.convertNumberToLetter($(this.residualLikelihoodSelector).val());
            $(this.initialSeverityTextSelector).text(t),
            $(this.initialLikelihoodTextSelector).text(e),
            $(this.residualSeverityTextSelector).text(o),
            $(this.residualLikelihoodTextSelector).text(i),
            this.setAlarpCheckbox(this.convertLetterToNumber(i), o, !0),
            this.refreshStatusBtnLabel()
        }
        ,
        t.prototype.getAvailabilityStatus = function(t, e) {
            var o;
            return $.ajax({
                url: this.getAvailabilityStatusUrl,
                async: !1,
                data: {
                    severity: t,
                    likehood: e
                },
                success: function(t) {
                    o = parseInt(t)
                }
            }),
            o
        }
        ,
        t.prototype.convertLetterToNumber = function(t) {
            return t.charCodeAt(0) - this.letterACharCode
        }
        ,
        t.prototype.convertNumberToLetter = function(t) {
            return "" == t ? "" : String.fromCharCode(this.letterACharCode + +t)
        }
        ,
        t.prototype.refreshStatusBtnLabel = function() {
            $(this.confirmControlsChangesBtnSelector).text(null === $(this.initialSeverityTextSelector).text() ? this.rejectControlsChangesString : this.acceptControlsChangesString)
        }
        ,
        t.prototype.setInitialPrerequisiteValues = function() {
            var t = $(this.chosenControlsGridSelector).data("kendoGrid").dataSource.data()
              , e = this;
            $(t).each(function() {
                this.IsPrerequisite && $("#" + e.IsPrerequisiteSelectorString + this.Id).click()
            })
        }
        ,
        t
    }();
    t.EditRA2Controls = e
}(WCC || (WCC = {})),
function(t) {
    var e = function() {
        function t(t, e, o, i, n, r, a, c) {
            this.isAssigned = !1,
            this.wasExecuted = !1,
            this.additionalSelectedTeamMembersSelector = t,
            this.additionalJobSelector = e,
            this.additionalMemberNameSelector = o,
            this.currentUserName = i,
            this.avaliableTeamMembersSelector = n,
            this.selectedTeamMembersSelector = r,
            this.usersJsonSelector = a,
            this.avaliableUsersJsonSelector = c;
            var s = this;
            $(this.additionalMemberNameSelector + "," + this.additionalJobSelector + "," + this.additionalSelectedTeamMembersSelector).on("change paste keyup click", function() {
                s.fixListboxToolPanelButtons(),
                s.anchor(),
                s.checkAddAdditionalButton()
            })
        }
        return t.prototype.selectCurrentUser = function() {
            if ($(this.usersJsonSelector).val() && (this.wasExecuted = !0),
            !this.wasExecuted) {
                var t = $(this.avaliableTeamMembersSelector).data("kendoListBox")
                  , e = $(this.selectedTeamMembersSelector).data("kendoListBox")
                  , o = t.items();
                this.wasExecuted = !0;
                for (var i = 0; i < o.length; i++) {
                    t.dataItem(o[i]).UserName == this.currentUserName && (e.add(t.dataItem(o[i])),
                    t.remove(o[i]))
                }
            }
        }
        ,
        t.prototype.anchor = function() {
            var t = this;
            this.isAssigned || ($(this.additionalSelectedTeamMembersSelector).closest(".k-listbox").find("[data-command=transferFrom]").click(function() {
                t.addCustomMember()
            }),
            $(this.additionalSelectedTeamMembersSelector).closest(".k-listbox").find("[data-command=transferTo]").click(function() {
                t.removeCustomMember()
            }),
            this.isAssigned = !0)
        }
        ,
        t.prototype.addCustomMember = function() {
            var t = this
              , e = $(t.additionalSelectedTeamMembersSelector).data("kendoListBox").dataSource;
            e.insert(0, {
                JobTitle: $(t.additionalJobSelector).val(),
                Name: $(t.additionalMemberNameSelector).val(),
                IsCustom: !0
            }),
            this.sortUsersList(e),
            t.fixListboxToolPanelButtons(),
            $(t.additionalMemberNameSelector).val(""),
            $(t.additionalJobSelector).val(""),
            t.isAssigned = !1
        }
        ,
        t.prototype.removeCustomMember = function() {
            var t = $(this.additionalSelectedTeamMembersSelector).data("kendoListBox")
              , e = t.select();
            if (1 < e.length)
                $(e).each(function() {
                    t.dataSource.remove(t.dataItem(this))
                });
            else {
                var o = t.dataItem(e);
                $(this.additionalMemberNameSelector).val(o.Name),
                $(this.additionalJobSelector).val(o.JobTitle),
                t.dataSource.remove(o)
            }
            this.isAssigned = !1
        }
        ,
        t.prototype.loadInitialData = function() {
            var t = $(this.usersJsonSelector).val()
              , e = $(this.avaliableUsersJsonSelector).val();
            if (e) {
                var o = JSON.parse(e);
                $(this.avaliableTeamMembersSelector).data("kendoListBox").dataSource.data(o)
            }
            if ($(this.avaliableTeamMembersSelector).data("kendoListBox").dataSource.sort({
                field: "Name",
                dir: "asc"
            }),
            t) {
                var i = JSON.parse(t);
                $(this.selectedTeamMembersSelector).data("kendoListBox").setDataSource(new kendo.data.DataSource({
                    data: i,
                    sort: {
                        field: "Name",
                        dir: "asc"
                    },
                    filter: {
                        field: "IsCustom",
                        operator: "eq",
                        value: !1
                    }
                })),
                $(this.additionalSelectedTeamMembersSelector).data("kendoListBox").setDataSource(new kendo.data.DataSource({
                    data: i,
                    sort: {
                        field: "Name",
                        dir: "asc"
                    },
                    filter: {
                        field: "IsCustom",
                        operator: "eq",
                        value: !0
                    }
                }))
            }
        }
        ,
        t.prototype.saveControlsFromGrid = function() {
            var t = $(this.selectedTeamMembersSelector).data("kendoListBox").dataSource.view().map(function(t) {
                return {
                    UserId: t.UserId
                }
            })
              , e = $(this.additionalSelectedTeamMembersSelector).data("kendoListBox").dataSource.view()
              , o = $.merge(t, e);
            $(this.usersJsonSelector).val(JSON.stringify(o)),
            $(this.avaliableUsersJsonSelector).val(""),
            $(this.avaliableTeamMembersSelector).val(""),
            $(this.selectedTeamMembersSelector).val("")
        }
        ,
        t.prototype.fixListboxToolPanelButtons = function() {
            $('[aria-label="Transfer To"]').attr("data-command", "transferFrom"),
            $('[aria-label="Transfer From"]').attr("data-command", "transferTo")
        }
        ,
        t.prototype.checkAddAdditionalButton = function() {
            var t = $(this.additionalSelectedTeamMembersSelector).closest(".k-listbox").find("[data-command=transferFrom]");
            0 == (!$(this.additionalMemberNameSelector).val() || !$(this.additionalJobSelector).val()) ? $(t).removeClass("k-state-disabled") : $(t).addClass("k-state-disabled")
        }
        ,
        t.prototype.sortAvaliableTeamMembers = function() {
            var t = $(this.avaliableTeamMembersSelector).data("kendoListBox").dataSource;
            this.sortUsersList(t)
        }
        ,
        t.prototype.sortSelectedTeamMembers = function() {
            var t = $(this.selectedTeamMembersSelector).data("kendoListBox").dataSource;
            this.sortUsersList(t)
        }
        ,
        t.prototype.sortUsersList = function(t) {
            t.sort({
                field: "Name",
                dir: "asc"
            })
        }
        ,
        t
    }();
    t.EditRA2Teams = e
}(WCC || (WCC = {})),
function(t) {
    var e = function() {
        function t(t, e, o, i, n, r, a, c, s, l, d) {
            var u = this;
            this.addedStepCounter = 0,
            this.isStepEditMode = !1,
            this.selectedHazardsAndControlsGridSelector = t,
            this.formSelector = e,
            this.updateStepBtnSelector = o,
            this.removeStepBtnSelector = i,
            this.addStepBtnSelector = n,
            this.editStepBtnSelector = r,
            this.riskAssessmentIdSelector = a,
            this.nameInputSelector = c,
            this.radioBtnSelectStepSelector = s,
            this.inProgressString = l,
            this.isCertificateLocale = d,
            initializeLocaleValidation(),
            $(this.updateStepBtnSelector).click(function() {
                u.changeStep()
            }),
            $(this.removeStepBtnSelector).click(function() {
                u.removeStep()
            }),
            this.isCertificateLocale && $(this.addStepBtnSelector).click(function() {
                u.addStep()
            }),
            $(this.editStepBtnSelector).click(function() {
                u.selectStep()
            }),
            $(this.nameInputSelector).on("change paste keyup", function() {
                u.nameInputChanged()
            })
        }
        return t.prototype.saveControlsFromGrid = function() {
            var t = $(this.selectedHazardsAndControlsGridSelector).data("kendoGrid").dataSource.data().toJSON();
            $("#StepsJson").val(JSON.stringify(t))
        }
        ,
        t.prototype.checkRadioBtnState = function() {
            var t = !$(this.radioBtnSelectStepSelector).is(":checked");
            $(this.editStepBtnSelector).attr("disabled", t),
            $(this.removeStepBtnSelector).attr("disabled", t)
        }
        ,
        t.prototype.nameInputChanged = function() {
            var t = !$($(this.nameInputSelector)).val();
            this.isCertificateLocale && ($(this.addStepBtnSelector).attr("disabled", t),
            $(this.radioBtnSelectStepSelector).is(":checked") && this.isStepEditMode && $(this.updateStepBtnSelector).attr("disabled", t))
        }
        ,
        t.prototype.changeStep = function() {
            var t = $(this.selectedHazardsAndControlsGridSelector).data("kendoGrid")
              , e = $(this.nameInputSelector).val();
            t.dataItem($("#step-" + getSelectedStep()).closest(".step-object")).Name = e,
            t.refresh(),
            this.reset()
        }
        ,
        t.prototype.removeStep = function() {
            var t = $(this.selectedHazardsAndControlsGridSelector).data("kendoGrid");
            t.dataSource.remove(t.dataItem($("#step-" + getSelectedStep()).closest(".step-object"))),
            t.refresh(),
            this.reset()
        }
        ,
        t.prototype.addStep = function() {
            var t = $(this.selectedHazardsAndControlsGridSelector).data("kendoGrid")
              , e = {
                Name: $(this.nameInputSelector).val(),
                Id: -++this.addedStepCounter,
                OrderId: +this.getMaxOrderId() + 1,
                RiskAssessmentId: $(this.riskAssessmentIdSelector).val(),
                Hazards: [],
                StatusString: this.inProgressString
            };
            t.dataSource.add(e),
            t.refresh(),
            this.reset()
        }
        ,
        t.prototype.selectStep = function() {
            var t = $(this.selectedHazardsAndControlsGridSelector).data("kendoGrid");
            $(this.nameInputSelector).val(t.dataItem($("#step-" + getSelectedStep()).closest(".step-object")).Name),
            this.isStepEditMode = !0
        }
        ,
        t.prototype.getMaxOrderId = function() {
            var t = $(this.selectedHazardsAndControlsGridSelector).data("kendoGrid").dataSource.data()
              , e = Math.max.apply(Math, $.map(t, function(t) {
                return t.OrderId
            }));
            return isFinite(e) ? e : -1
        }
        ,
        t.prototype.reset = function() {
            $(this.nameInputSelector).val("");
            this.isStepEditMode = !1,
            $(this.radioBtnSelectStepSelector).checked = !1,
            $(this.updateStepBtnSelector).attr("disabled", !0),
            $(this.addStepBtnSelector).attr("disabled", !0),
            $(this.editStepBtnSelector).attr("disabled", !0),
            $(this.removeStepBtnSelector).attr("disabled", !0)
        }
        ,
        t
    }();
    t.EditRA2Step = e
}(WCC || (WCC = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), WCC, Core, Core, Core, Common, Common;
!function(P) {
    var t = function(w) {
        function t(t, e, o, i, n, r, a, c, s, l, d, u, h, f, p, m, g, S, v, C, y, I, k, b) {
            var x = w.call(this, o, s) || this;
            return x.formSelector = "form",
            x.hazardGroupCounter = 0,
            x.hazardCounter = 0,
            x.controlCounter = 0,
            x.sortApplied = !1,
            x.hazardGroupInnerTableSelector = t,
            x.getControlsByHazardUrl = e,
            x.hazardAndControlsGridSelector = o,
            x.controlsGridSelector = i,
            x.addSelectControlsButtonSelector = n,
            x.customControlNameInputSelector = r,
            x.addControlButtonSelector = a,
            x.hazardsTableSelector = c,
            x.controlsJsonSelector = s,
            x.riskAssessmentId = l,
            x.additionalHazardNameInputSelector = d,
            x.additionalHazardGroupName = u,
            x.addCustomHazardsBtnSelector = h,
            x.removeSelectedHazardAndControlsButtonSelector = f,
            x.selectAllControlsCheckboxSelector = p,
            x.controlsCheckboxSelector = m,
            x.selectedControlsCheckboxSelector = g,
            x.selectAllSelectedControlsCheckboxSelector = S,
            x.isPrerequisiteSelector = v,
            x.controlsGridHazardNameSelector = y,
            x.hazardVisibility = new P.RaHazardgroupHazardVisibility(x.hazardGroupInnerTableSelector),
            x.installationId = k,
            x.hazardAndControlDuplicationError = b,
            $(document).ready(function() {
                initializeLocaleValidation(),
                $(x.addSelectControlsButtonSelector).click(function() {
                    x.onAddSelectedControlsButtonClick()
                }),
                $(x.addCustomHazardsBtnSelector).click(function() {
                    x.addCustomHazard()
                }),
                $(x.addControlButtonSelector).click(function() {
                    x.onAddCustomControlButtonClick()
                }),
                $(x.removeSelectedHazardAndControlsButtonSelector).click(function() {
                    x.onRemoveSelectedHazardAndControlsButtonClick()
                }),
                $(x.selectAllControlsCheckboxSelector).click(function() {
                    x.changeAllControls()
                }),
                $(x.selectAllSelectedControlsCheckboxSelector).click(function() {
                    x.changeAllselectedControls()
                }),
                $("form").submit(function() {
                    x.saveControlsFromGrid()
                }),
                I || ($(x.customControlNameInputSelector).on("input", function() {
                    x.disableBtnWhenTextBoxEmpty(x.addControlButtonSelector, x.customControlNameInputSelector)
                }),
                $(x.additionalHazardNameInputSelector).on("input", function() {
                    x.disableBtnWhenTextBoxEmpty(x.addCustomHazardsBtnSelector, x.additionalHazardNameInputSelector)
                }))
            }),
            x
        }
        return __extends(t, w),
        t.prototype.disableBtnWhenCheckBoxesNotChecked = function(t, e) {
            var o = !$(e).is(":checked");
            $(t).attr("disabled", o)
        }
        ,
        t.prototype.applySorting = function() {
            this.sortApplied || ($(this.controlsGridSelector).getKendoGrid().dataSource.sort([{
                field: "IsMandatoryPreselected",
                dir: "desc"
            }, {
                field: "HazardControlName",
                dir: "asc"
            }]),
            $(this.hazardAndControlsGridSelector).getKendoGrid().dataSource.sort([{
                field: "OrderId",
                dir: "asc"
            }, {
                field: "IsMandatoryPreselected",
                dir: "desc"
            }, {
                field: "ControlName",
                dir: "asc"
            }]),
            this.sortApplied = !0)
        }
        ,
        t.prototype.disableBtnWhenTextBoxEmpty = function(t, e) {
            var o = !$(e).val();
            $(t).attr("disabled", o)
        }
        ,
        t.prototype.onAddSelectedControlsButtonClick = function() {
            var i = this
              , o = $(i.controlsGridSelector).data("kendoGrid")
              , n = $(i.hazardAndControlsGridSelector).data("kendoGrid")
              , r = [];
            $(i.controlsCheckboxSelector).each(function(t, e) {
                $(e).is(":checked") && r.push(o.dataItem($(e).closest("[role=row]")))
            }),
            0 != r.length && ($(r).each(function(t, e) {
                var o = e;
                n.dataSource.add({
                    Id: o.get("Id"),
                    HazardNameLocalization: "object" == typeof i.currentHazard.HazardNameLocalization ? i.currentHazard.HazardNameLocalization : {
                        Value: i.currentHazard.HazardNameLocalization
                    },
                    ControlNameLocalization: o.get("HazardControlNameLocalization"),
                    HazardName: i.currentHazard.HazardName,
                    EnglishHazardName: i.currentHazard.EnglishHazardName,
                    ControlName: o.get("HazardControlName"),
                    EnglishControlName: o.get("EnglishControlName"),
                    IsCustomControl: o.get("IsCustomControl"),
                    IsCustomHazard: o.get("IsCustomHazard") && i.currentHazard.Id < 0,
                    IsPrerequisite: !1,
                    IsCompletion: !1,
                    RiskAssessmentId: i.riskAssessmentId,
                    IsMandatoryPreselected: o.get("IsMandatoryPreselected"),
                    OrderId: i.getMaxOrderId() + 1
                })
            }),
            $(r).each(function(t, e) {
                o.dataSource.remove(e)
            }),
            n.refresh(),
            i.saveControlsFromGrid(),
            0 == o.items().length && $(i.addSelectControlsButtonSelector).attr("disabled", "disabled")),
            this.disableBtnWhenCheckBoxesNotChecked(this.removeSelectedHazardAndControlsButtonSelector, this.selectedControlsCheckboxSelector),
            this.disableBtnWhenCheckBoxesNotChecked(this.addSelectControlsButtonSelector, this.controlsCheckboxSelector)
        }
        ,
        t.prototype.saveControlsFromGrid = function() {
            var t = $(this.hazardAndControlsGridSelector).data("kendoGrid").dataSource.data().toJSON();
            $(this.controlsJsonSelector).val(JSON.stringify(t))
        }
        ,
        t.prototype.selectHazard = function(t) {
            var e = this;
            e.selectedHazardGroup = $(t).closest(".hazard-row");
            var o = $(this.hazardsTableSelector).data("kendoGrid").dataItem(e.selectedHazardGroup)
              , i = $(t).parent().parent().children().index($(t).parent())
              , n = o.Hazards[i];
            e.currentHazard = n,
            $.post({
                url: this.getControlsByHazardUrl,
                data: {
                    hazardId: n.Id,
                    installationId: this.installationId
                }
            }).done(function(t) {
                t = e.getNotSelectedControls(t),
                $(e.controlsGridSelector).data("kendoGrid").dataSource.data(t)
            }).fail(function() {
                $(e.controlsGridSelector).data("kendoGrid").dataSource.data([])
            }).always(function() {
                e.hideOrShowControlsOnControlsGrid(!0),
                $(e.controlsGridHazardNameSelector).text(e.currentHazard.HazardName + " - "),
                e.disableBtnWhenCheckBoxesNotChecked(e.addSelectControlsButtonSelector, e.controlsCheckboxSelector)
            })
        }
        ,
        t.prototype.checkHazardMandatoryControls = function(t) {
            var e = $(t)
              , o = $(this.hazardAndControlsGridSelector).data("kendoGrid")
              , i = o.dataItem(e.closest("tr"));
            i.IsMandatoryPreselected && $(this.selectedControlsCheckboxSelector).each(function() {
                var t = o.dataItem($(this).closest("tr"));
                t.IsMandatoryPreselected && i.HazardName === t.HazardName && $(this).is(":checked") != e.is(":checked") && $(this).click()
            })
        }
        ,
        t.prototype.changeAllControls = function() {
            var t = $(this.selectAllControlsCheckboxSelector).is(":checked");
            $(this.controlsCheckboxSelector).each(function() {
                $(this).is(":checked") != t && $(this).click()
            })
        }
        ,
        t.prototype.changeAllselectedControls = function() {
            var t = $(this.selectAllSelectedControlsCheckboxSelector).is(":checked");
            $(this.selectedControlsCheckboxSelector).each(function() {
                $(this).is(":checked") != t && $(this).click()
            })
        }
        ,
        t.prototype.savePrerequisiteValue = function(t) {
            var e = $(t)
              , o = $(this.hazardAndControlsGridSelector).getKendoGrid()
              , i = o.dataItem(e.closest("tr"));
            i.IsPrerequisite = e.is(":checked"),
            i.IsCompletion && (i.IsCompletion = !1),
            o.refresh()
        }
        ,
        t.prototype.saveCompletionValue = function(t) {
            var e = $(t)
              , o = $(this.hazardAndControlsGridSelector).getKendoGrid()
              , i = o.dataItem(e.closest("tr"));
            i.IsCompletion = e.is(":checked"),
            i.IsPrerequisite && (i.IsPrerequisite = !1),
            o.refresh()
        }
        ,
        t.prototype.onRemoveSelectedHazardAndControlsButtonClick = function() {
            var o = this
              , i = $(o.controlsGridSelector).data("kendoGrid")
              , n = $(o.hazardAndControlsGridSelector).data("kendoGrid")
              , r = [];
            $(o.selectedControlsCheckboxSelector).each(function(t, e) {
                $(e).is(":checked") && r.push($(o.hazardAndControlsGridSelector).data("kendoGrid").dataItem($(e).closest("[role=row]")))
            }),
            $(r).each(function(t, e) {
                o.currentHazard && e.get("HazardName") === o.currentHazard.HazardName && i.dataSource.add({
                    Id: e.get("Id"),
                    HazardControlName: e.get("ControlName"),
                    IsChecked: !1,
                    IsCustomControl: e.get("IsCustomControl"),
                    IsMandatoryPreselected: e.get("IsMandatoryPreselected")
                })
            }),
            $(r).each(function(t, e) {
                n.dataSource.remove(e)
            }),
            i.dataSource.sort({
                field: "HazardControlName",
                dir: "asc"
            }),
            i.refresh(),
            this.disableBtnWhenCheckBoxesNotChecked(this.removeSelectedHazardAndControlsButtonSelector, this.selectedControlsCheckboxSelector),
            this.disableBtnWhenCheckBoxesNotChecked(this.addSelectControlsButtonSelector, this.controlsCheckboxSelector),
            this.saveControlsFromGrid()
        }
        ,
        t.prototype.onAddCustomControlButtonClick = function() {
            var t = this;
            if (null != t.currentHazard) {
                var e = $(t.customControlNameInputSelector).val().trim();
                if (t.isExistControlNameDuplicate(e))
                    return;
                $(t.customControlNameInputSelector).val("");
                var o = $(t.controlsGridSelector).data("kendoGrid");
                if ("" !== e) {
                    var i = [];
                    o.select().each(function(t, e) {
                        i.push(e.getAttribute("data-uid"))
                    }),
                    o.dataSource.insert(0, {
                        HazardControlName: e,
                        IsCustomControl: !0,
                        Id: --t.controlCounter,
                        IsCustomHazard: t.currentHazard.IsCustomHazard
                    }),
                    i.forEach(function(t) {
                        var e = o.table.find('tr[data-uid="' + t + '"]');
                        o.select(e)
                    }),
                    this.disableBtnWhenCheckBoxesNotChecked(this.addSelectControlsButtonSelector, this.controlsCheckboxSelector),
                    this.disableBtnWhenTextBoxEmpty(this.addControlButtonSelector, this.customControlNameInputSelector)
                }
            }
            $(t.addSelectControlsButtonSelector).show()
        }
        ,
        t.prototype.isExistControlNameDuplicate = function(e) {
            var o = this;
            e = e.trim();
            var t = ($(this.controlsGridSelector).data("kendoGrid").dataSource.data() || []).slice(0)
              , i = ($(this.hazardAndControlsGridSelector).data("kendoGrid").dataSource.data() || []).slice(0)
              , n = t.concat(i).filter(function(t) {
                return o.compareNames(t.EnglishControlName, e) || o.compareNames(t.ControlName, e) || o.compareNames(t.HazardControlName, e) || o.compareNames(nullable(t.ControlNameLocalization).Value, e) || o.compareNames(nullable(t.HazardControlNameLocalization).Value, e)
            }).some(function(t) {
                return o.compareNames(t.EnglishHazardName, o.currentHazard.EnglishHazardName) || o.compareNames(t.HazardName, o.currentHazard.HazardName) || o.compareNames(nullable(t.HazardNameLocalization).Value, nullable(o.currentHazard.HazardNameLocalization).Value)
            });
            return new Core.ShowValidation(this.hazardAndControlDuplicationError,n),
            n
        }
        ,
        t.prototype.isExistHazardNameDuplicate = function(e) {
            var o = this
              , t = ($(this.hazardsTableSelector).data("kendoGrid").dataSource.data().slice(0).reduce(function(t, e) {
                return t.concat(nullable(e.Hazards).slice(0))
            }, []) || []).some(function(t) {
                return o.compareNames(t.EnglishHazardName, e) || o.compareNames(t.HazardName, e) || o.compareNames(nullable(t.HazardNameLocalization).Value, e)
            });
            return new Core.ShowValidation(this.hazardAndControlDuplicationError,t),
            t
        }
        ,
        t.prototype.addCustomHazard = function() {
            var o = this
              , t = $(this.additionalHazardNameInputSelector).val().trim();
            t && !o.isExistHazardNameDuplicate(t) && this.addCustomHazardObject(t),
            $(this.additionalHazardNameInputSelector).val(""),
            this.disableBtnWhenCheckBoxesNotChecked(this.removeSelectedHazardAndControlsButtonSelector, this.selectedControlsCheckboxSelector),
            this.disableBtnWhenTextBoxEmpty(this.addCustomHazardsBtnSelector, this.additionalHazardNameInputSelector),
            this.hazardVisibility.showHazards($(".hazards-hazardGroup-name").filter(function(t, e) {
                return $.trim(e.innerHTML) === o.additionalHazardGroupName
            }), !0)
        }
        ,
        t.prototype.addCustomHazardObject = function(t, e, o, i) {
            void 0 === e && (e = null),
            void 0 === o && (o = null),
            void 0 === i && (i = !1);
            var n = $(this.hazardsTableSelector).data("kendoGrid").dataSource
              , r = this.findAdditionalHazard()
              , a = {
                HazardName: t,
                IsCustomHazard: !i,
                Id: --this.hazardCounter,
                HazardNameLocalization: {
                    Value: e
                },
                EnglishHazardName: o
            };
            r ? r.Hazards.push(a) : n.insert(0, {
                HazardGroupName: this.additionalHazardGroupName,
                Hazards: [a],
                IconName: "Additional.gif",
                IsCustomHazardGroup: !0,
                Id: --this.hazardGroupCounter
            })
        }
        ,
        t.prototype.findAdditionalHazard = function() {
            for (var t = $(this.hazardsTableSelector).data("kendoGrid").dataSource, e = 0; e < t.total(); e++)
                if (t.data()[e].HazardGroupName == this.additionalHazardGroupName)
                    return t.data()[e];
            return null
        }
        ,
        t.prototype.getMaxOrderId = function() {
            var t = $(this.hazardAndControlsGridSelector).data("kendoGrid").dataSource
              , e = Math.max.apply(Math, t.data().map(function(t) {
                return t.OrderId
            }));
            return isFinite(e) ? e : 0
        }
        ,
        t.prototype.addAdditionalCustomHazards = function() {
            var e = this
              , t = $(this.hazardAndControlsGridSelector).data("kendoGrid").dataSource.data()
              , i = $(this.hazardsTableSelector).data("kendoGrid").dataSource.data().map(function(t) {
                return t.Hazards.map(function(t) {
                    return t.HazardName
                })
            }).reduce(function(t, e) {
                return t.concat(e)
            });
            t.filter(function(t, e, o) {
                return $.inArray(t.HazardName.trim(), i) < 0 && o.map(function(t) {
                    return t.HazardName
                }).indexOf(t.HazardName) === e
            }).forEach(function(t) {
                return e.addCustomHazardObject(t.HazardName, nullable(t.HazardNameLocalization).Value, t.EnglishHazardName, !t.IsCustomHazard)
            })
        }
        ,
        t.prototype.getNotSelectedControls = function(t) {
            var e = $(this.hazardAndControlsGridSelector).data("kendoGrid").dataSource.data().toJSON()
              , o = [];
            return e.forEach(function(t) {
                o.push(t.ControlName)
            }),
            t.filter(function(t) {
                return o.indexOf(t.HazardControlName) < 0
            })
        }
        ,
        t.prototype.hideOrShowControlsOnControlsGrid = function(t) {
            $(this.addSelectControlsButtonSelector).toggle(t),
            $(this.customControlNameInputSelector).toggle(t),
            $(this.addControlButtonSelector).toggle(t)
        }
        ,
        t.prototype.compareNames = function(t, e) {
            var o = nullable(t).toUpperCase();
            return !!o && o === nullable(e).toUpperCase()
        }
        ,
        t
    }(Common.GridInitialDataLoad);
    P.UpdateRA = t
}(WCC || (WCC = {})),
function(t) {
    var e = function(t, e, o) {
        this.name = t,
        this.params = e,
        this.handler = o
    };
    (Core || (Core = {})).ValidationRule = e
}(),
function(Core) {
    var ValidationRules = function() {
        function ValidationRules() {
            var i = this;
            this.validationRules = new Array,
            this.validationRules.push(new Core.ValidationRule("requiredwhen",["validationexpression", "conditionexpression", "validationexpressionproperties", "conditionexpressionproperties"],function(t, e, o) {
                return i.processExpression(o)
            }
            )),
            this.configureKendoValidator(),
            switchOffJQueryValidator(),
            this.registerRules(),
            $(document).ready(this.showValidationSummary)
        }
        return ValidationRules.prototype.processExpression = function(params) {
            var self = this
              , conditionExpression = params.conditionexpression
              , validationExpression = params.validationexpression
              , conditionExpressionProperties = params.conditionexpressionproperties.split(",")
              , validationExpressionProperties = params.validationexpressionproperties.split(",");
            return conditionExpressionProperties.forEach(function(t) {
                conditionExpression = self.replaceExpressionProperty(conditionExpression, t)
            }),
            validationExpressionProperties.forEach(function(t) {
                validationExpression = self.replaceExpressionProperty(validationExpression, t)
            }),
            !eval(conditionExpression) || eval(validationExpression)
        }
        ,
        ValidationRules.prototype.replaceExpressionProperty = function(t, e) {
            var o = e.split("=")
              , i = o[0]
              , n = o[1];
            switch (n) {
            case "int":
                return this.intResolverFunction(t, i);
            case "string":
                return this.stringResolverFunction(t, i);
            case "float":
                return this.floatResolverFunction(t, i);
            case "decimal":
                return this.decimalResolverFunction(t, i);
            default:
                throw Error("Value resolver [" + n + "] is not supported")
            }
        }
        ,
        ValidationRules.prototype.intResolverFunction = function(t, e) {
            return t.replace(new RegExp(e,"g"), "parseInt($('[name=" + e + "]').val())")
        }
        ,
        ValidationRules.prototype.stringResolverFunction = function(t, e) {
            return t.replace(new RegExp(e,"g"), "$('[name=" + e + "]').val()")
        }
        ,
        ValidationRules.prototype.floatResolverFunction = function(t, e) {
            return t.replace(new RegExp(e,"g"), "parseFloat($('[name=" + e + "]').val())")
        }
        ,
        ValidationRules.prototype.decimalResolverFunction = function(t, e) {
            return t.replace(new RegExp(e,"g"), "parseDecimal($('[name=" + e + "]').val())")
        }
        ,
        ValidationRules.prototype.registerRules = function() {
            this.validationRules.forEach(function(e) {
                $.validator.unobtrusive.adapters.add(e.name, e.params, function(t) {
                    t.rules[e.name] = t.params,
                    e.message ? t.messages[e.name] = e.message : t.messages[e.name] = t.message
                }),
                $.validator.addMethod(e.name, e.handler)
            })
        }
        ,
        ValidationRules.prototype.onKendoValidationComplete = function(t) {
            MakeRequiredFields(),
            $("#validationSummaryContainer").toggle(!t.valid);
            var o = $("#validationSummaryContainer [data-valmsg-summary='true'] ul");
            if (o.empty(),
            !t.valid) {
                var e = t.sender.errors();
                $.each(e, function(t, e) {
                    e && $("<li>").text(e).appendTo(o)
                })
            }
        }
        ,
        ValidationRules.prototype.showValidationSummary = function() {
            checkAndShowValidationContainer()
        }
        ,
        ValidationRules.prototype.configureKendoValidator = function() {
            var e = this;
            $("form").kendoValidator({
                validateOnBlur: !1,
                rules: {
                    requiredwhen: function(t) {
                        return e.fieldKendoValidation(t, "requiredwhen")
                    }
                },
                messages: {
                    requiredwhen: function(t) {
                        return e.fieldKendoValidationMessage(t, "requiredwhen")
                    }
                },
                validate: e.onKendoValidationComplete
            })
        }
        ,
        ValidationRules.prototype.fieldKendoValidation = function(t, e) {
            var o = "[data-val-" + e + "]";
            if (t.is(o)) {
                var i = {
                    validationexpression: t.attr("data-val-" + e + "-validationexpression"),
                    conditionexpression: t.attr("data-val-" + e + "-conditionexpression"),
                    validationexpressionproperties: t.attr("data-val-" + e + "-validationexpressionproperties"),
                    conditionexpressionproperties: t.attr("data-val-" + e + "-conditionexpressionproperties")
                };
                return this.processExpression(i)
            }
            return !0
        }
        ,
        ValidationRules.prototype.fieldKendoValidationMessage = function(t, e) {
            var o = "data-val-" + e;
            return t.attr(o)
        }
        ,
        ValidationRules
    }();
    Core.ValidationRules = ValidationRules
}(Core || (Core = {})),
function(t) {
    var e = function() {
        function t(t) {
            void 0 === t && (t = null),
            this.validator = $("[data-include-validation=true]").kendoValidator($.extend(!0, {
                validateOnBlur: !1,
                validate: this.onKendoValidationComplete
            }, t)).data("kendoValidator"),
            switchOffJQueryValidator()
        }
        return t.prototype.hideValidator = function() {
            $("#validationSummaryContainer [data-valmsg-summary='true'] ul").empty(),
            $("#validationSummaryContainer").toggle(!1),
            this.hideMessages()
        }
        ,
        t.prototype.hideMessages = function() {
            this.validator.hideMessages()
        }
        ,
        t.prototype.validateFields = function() {
            return this.hideValidator(),
            !!this.validator.validate() || (this.showErrors(this.validator.errors()),
            !1)
        }
        ,
        t.prototype.showErrors = function(t) {
            t.forEach(function(t) {
                $("#validationSummaryContainer [data-valmsg-summary='true'] ul").append("<li>" + t + "</li>")
            }),
            $("#validationSummaryContainer").toggle(!0)
        }
        ,
        t.prototype.onKendoValidationComplete = function() {
            MakeRequiredFields()
        }
        ,
        t
    }();
    t.ValidationFromScript = e
}(Core || (Core = {})),
function(t) {
    var e = function() {
        function t(t, e) {
            var o = this;
            this.gridSelector = t,
            this.orderIdFieldname = e,
            $(document).ready(function() {
                $("".concat(t, " #up")).click(function() {
                    o.up()
                }),
                $("".concat(t, " #down")).click(function() {
                    o.down()
                }),
                $(".k-radio").click(function() {
                    o.select()
                })
            })
        }
        return t.prototype.up = function() {
            this.moveItem(!0)
        }
        ,
        t.prototype.down = function() {
            this.moveItem(!1)
        }
        ,
        t.prototype.select = function() {
            this.selectItem()
        }
        ,
        t.prototype.selectItem = function() {
            $("[data-disable-if-row-not-checked=true]").prop("disabled", 0 === $(kendo.format(".k-radio")).length)
        }
        ,
        t.prototype.moveItem = function(t) {
            if (0 !== (i = $("input[type=radio]:checked")).length) {
                var e = i.parents(this.gridSelector + ">table>tbody>tr");
                0 == e.length && (e = i.parents(this.gridSelector + ">.k-grid-content>table>tbody>tr"));
                var o, i, n = $(this.gridSelector).data("kendoGrid"), r = n.dataItem(e), a = n.dataSource.indexOf(r);
                if ((o = t ? Math.max(0, a - 1) : Math.min(n.dataSource.total() - 1, a + 1)) !== a) {
                    var c = $(this.gridSelector + ">table>tbody>tr:eq(" + o + ")");
                    0 == c.length && (c = $(this.gridSelector + ">.k-grid-content>table>tbody>tr:eq(" + o + ")"));
                    var s = n.dataItem(c)
                      , l = s.get(this.orderIdFieldname);
                    s.set(this.orderIdFieldname, r.get(this.orderIdFieldname)),
                    r.set(this.orderIdFieldname, l),
                    n.dataSource.remove(r),
                    n.dataSource.insert(o, r)
                }
                0 === (i = $(this.gridSelector + ">.k-grid-content>table>tbody>tr:eq(" + o + ") input[type=radio]")).length && (i = $(this.gridSelector + ">table>tbody>tr:eq(" + o + ") input[type=radio]")),
                i.prop("checked", "checked")
            }
        }
        ,
        t
    }();
    t.CreateReorder = e
}(Common || (Common = {})),
function(t) {
    var e = function() {
        function t(t, e) {
            this.isMandatoryPreselectedColumnSelector = t,
            this.isMandatoryPreselectedColumnName = e
        }
        return t.prototype.onDataBinding = function() {
            var t = this.isMandatoryPreselectedColumnName.indexOf("(")
              , e = ["<div class='text-center'>", this.isMandatoryPreselectedColumnName.slice(0, t), "<br />", this.isMandatoryPreselectedColumnName.slice(t), "</div>"].join("");
            $(this.isMandatoryPreselectedColumnSelector).html(e)
        }
        ,
        t
    }();
    t.CreateHazardControlColumnsFix = e
}(Common || (Common = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), Common;
!function(t) {
    var e = function(s) {
        function t(t, e, o, i, n, r, a) {
            var c = s.call(this, o, r) || this;
            return c.parentId = t,
            c.deleteButtonSelector = e,
            c.deleteSelectedItemsUrl = i,
            c.listParametrName = n,
            c.confirmDialog = a,
            $(c.deleteButtonSelector).click(function() {
                c.onDeleteButtonClick()
            }),
            c
        }
        return __extends(t, s),
        t.prototype.onDeleteButtonClick = function() {
            var e = this
              , o = $(this.gridSelector).data("kendoGrid")
              , i = this.getDeleteItemsData();
            i.ItemIds.length && this.confirmDialog.showConfirmation().then(function(t) {
                $.post(e.deleteSelectedItemsUrl, i).done(function(t) {
                    o.dataSource.read()
                })
            })
        }
        ,
        t.prototype.getDeleteItemsData = function() {
            var e = $(this.gridSelector).data("kendoGrid")
              , t = e.select()
              , o = $.map(t, function(t) {
                return e.dataItem(t).get("Id")
            });
            return {
                ParentId: this.parentId,
                ItemIds: o
            }
        }
        ,
        t
    }(t.GridInitialDataLoad);
    t.CreateDelete = e
}(Common || (Common = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), HazardControl;
!function(t) {
    var e = function(n) {
        function t(t, e, o) {
            var i = n.call(this, e, "#HazardControlViewModelsJson") || this;
            return i.updateControlsButtonSelector = t,
            i.hazardControlGridSelector = e,
            i.jsonGridDataFieldSelector = o,
            $(document).ready(function() {
                $(i.updateControlsButtonSelector).click(function() {
                    i.onUpdateControlsButtonClick()
                })
            }),
            i
        }
        return __extends(t, n),
        t.prototype.onUpdateControlsButtonClick = function() {
            var r = $(this.hazardControlGridSelector).data("kendoGrid")
              , t = r.dataSource.data();
            t.forEach(function(i, t) {
                var e = "hazardControl_" + i.get("Id")
                  , o = r.tbody.find(":checked[name=" + e + "]").attr("fieldName")
                  , n = r.tbody.find(":not(:checked)[name=" + e + "][fieldName]");
                o && (i[o] = !0),
                n.each(function(t, e) {
                    var o = $(e).attr("fieldName");
                    i[o] = !1
                })
            });
            var e = JSON.stringify(t);
            $(this.jsonGridDataFieldSelector).val(e)
        }
        ,
        t.prototype.showRadioButton = function(t, e, o) {
            return "<input  type='radio' name='hazardControl_" + e + "'" + (o ? "fieldName=" + o : "") + " " + (t ? "checked" : "") + " />"
        }
        ,
        t
    }(Common.GridInitialDataLoad);
    t.CreateUpdate = e
}(HazardControl || (HazardControl = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), ICC;
!function(t) {
    var e = function(c) {
        function t(t, e, o, i, n, r, a) {
            return c.call(this, "Icc", t, "/Icc/ExportCsv", "/Icc/GetChangeStateAvailableActions", "/Icc/ShowChangeStateErrors", "/Icc/GetAvailableAction", e, o, "#NewSearchBtn", "/Icc/Copy", i, n, r, a) || this
        }
        return __extends(t, c),
        t
    }(Common.Search);
    t.Search = e
}(ICC || (ICC = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), SOC;
!function(t) {
    var e = function(c) {
        function t(t, e, o, i, n, r, a) {
            return c.call(this, "Soc", t, "/Soc/ExportCsv", "/Soc/GetChangeStateAvailableActions", "/Soc/ShowChangeStateErrors", "/Soc/GetAvailableAction", e, o, "#NewSearchBtn", "/Soc/Copy", i, n, r, a) || this
        }
        return __extends(t, c),
        t
    }(Common.Search);
    t.Search = e
}(SOC || (SOC = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), __spreadArray = this && this.__spreadArray || function(t, e, o) {
    if (o || 2 === arguments.length)
        for (var i, n = 0, r = e.length; n < r; n++)
            !i && n in e || (i || (i = Array.prototype.slice.call(e, 0, n)),
            i[n] = e[n]);
    return t.concat(i || Array.prototype.slice.call(e))
}
, CC;
!function(t) {
    var e = function(b) {
        function t(e, o, i, n, t, r, a, c, s, l, d, u, h, f, p, m, g) {
            var S, v, C, y = b.call(this, e, "#initialData") || this;
            y.selectedItem = (S = $(),
            v = S,
            (C = function() {
                return v
            }
            ).set = function(t) {
                v = $(t)
            }
            ,
            C.clear = function() {
                v = S
            }
            ,
            C),
            y.selectors = {
                ReferenceToExternalDocumentsJson: o,
                ListOfReferences: e,
                ItemTitle: i,
                ItemUrl: n,
                RadioButtons: t,
                AddBlock: r,
                EditBlock: a,
                ErrorBlock: c,
                GridItem: {
                    Name: ".item-name",
                    Link: ".item-link"
                },
                Form: "form"
            },
            y.localization = p,
            y.maximumElements = f,
            y.validation = new Core.ValidationFromScript({
                rules: {
                    checkNetworkFilePath: function(t) {
                        return -1 === t.val().indexOf("\\") || !t.is(n) || t.val().match(/\\\\[a-zA-Z0-9\.\-_]+/)
                    },
                    wrongSymbol: function(t) {
                        return !t.is($(i)) || !RegExp(m).test(t.val())
                    }
                },
                messages: {
                    checkNetworkFilePath: function(t) {
                        return t.data("valRequired")
                    },
                    wrongSymbol: function(t) {
                        return t.attr("validationMessage", kendo.format(g, t.val()))
                    }
                }
            });
            var I = y;
            $(y.selectors.Form).submit(function(t) {
                t.preventDefault(),
                $(o).val(kendo.stringify($(e).data("kendoGrid").dataSource.data())),
                $(I.selectors.ItemTitle + "," + I.selectors.ItemUrl).removeAttr("required pattern"),
                $(this).unbind("submit").submit()
            }),
            $(h).click(function() {
                y.toViewMode()
            }),
            $(u).click(function() {
                y.removeSelectedItem()
            }),
            $(s).click(function() {
                y.addNewReference()
            }),
            $(d).click(function() {
                y.editSelectedItem()
            });
            var k = $(l);
            return k.change(function() {
                y.validation.hideValidator();
                var t = k.val();
                $(n).val(t),
                $(i).val(t.split(/[\\/]/).pop().split(".")[0])
            }),
            y
        }
        return __extends(t, b),
        t.prototype.addNewReference = function() {
            if (this.validation.validateFields()) {
                $(this.selectors.ErrorBlock).hide();
                var t = $(this.selectors.ListOfReferences).getKendoGrid();
                if (t.dataSource.data().length >= this.maximumElements)
                    this.showError(this.localization.exceedWithCount);
                else {
                    $(this.selectors.ErrorBlock).hide();
                    var e = $(this.selectors.ItemTitle).val().trim()
                      , o = $(this.selectors.ItemUrl).val().trim();
                    e && o ? (t.dataSource.add({
                        Url: o,
                        Title: e,
                        isNewItem: !0,
                        OrderId: Math.max.apply(null, __spreadArray([-1], t.dataSource.data().map(function(t) {
                            return t.OrderId
                        }), !0)) + 1
                    }),
                    this.clearFields()) : this.showError(this.localization.invalidDataErrorMessage)
                }
            }
        }
        ,
        t.prototype.clearFields = function() {
            this.validation.hideValidator(),
            $(this.selectors.ItemTitle).val(""),
            $(this.selectors.ItemUrl).val("")
        }
        ,
        t.prototype.toViewMode = function() {
            this.selectedItem.clear(),
            $(this.selectors.RadioButtons).prop("checked", !1).parents("tr").removeClass("k-state-selected"),
            $(this.selectors.ListOfReferences).data("kendoGrid").dataSource.data().length >= this.maximumElements ? this.showError(this.localization.exceedWithCount) : this.hideError(),
            $(this.selectors.AddBlock).show(),
            $(this.selectors.EditBlock).hide(),
            this.clearFields()
        }
        ,
        t.prototype.toEditMode = function(t) {
            $(this.selectors.AddBlock).hide(),
            $(this.selectors.EditBlock).show();
            var e = t.find(this.selectors.GridItem.Name).text().trim()
              , o = t.find(this.selectors.GridItem.Link).text().trim();
            $(this.selectors.ItemTitle).val(e),
            $(this.selectors.ItemUrl).val(o)
        }
        ,
        t.prototype.editItem = function(t) {
            this.selectedItem().data("uid") === t ? (this.selectedItem.clear(),
            this.toViewMode()) : (this.selectedItem.set(kendo.format("[data-uid={0}]", t)),
            this.toEditMode(this.selectedItem()))
        }
        ,
        t.prototype.editSelectedItem = function() {
            if (this.selectedItem().length && this.validation.validateFields()) {
                var t = $(this.selectors.ListOfReferences).data("kendoGrid").dataSource
                  , e = $(this.selectors.ItemTitle).val().trim()
                  , o = $(this.selectors.ItemUrl).val().trim()
                  , i = t.getByUid(this.selectedItem().data("uid"));
                i.set("Title", e),
                i.set("Url", o),
                this.toViewMode()
            }
        }
        ,
        t.prototype.removeSelectedItem = function() {
            var t = $(this.selectors.ListOfReferences).data("kendoGrid").dataSource;
            t.remove(t.getByUid(this.selectedItem().data("uid"))),
            this.toViewMode()
        }
        ,
        t.prototype.showError = function(t) {
            this.validation.showErrors([t])
        }
        ,
        t.prototype.hideError = function() {
            this.validation.hideValidator()
        }
        ,
        t
    }(Common.GridInitialDataLoad);
    t.ReferencesToExternalDocumentsManager = e
}(CC || (CC = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), Common, SCC;
!function(t) {
    var e = function(c) {
        function t(t, e, o, i, s, n, r) {
            var a = c.call(this, s, n) || this;
            return a.validation = new Core.ValidationFromScript({
                rules: {
                    checkSpaces: function(t) {
                        return !t.is("[required]") || 0 !== t.val().trim().length
                    },
                    checkDuplicates: function(t) {
                        if (t.is("[required][data-validate-name=True], [required][data-validate-name-localization=True]"))
                            for (var e = $(s).data("kendoGrid").dataSource.data(), o = "True" === t.data("validateName"), i = "True" === t.data("validateNameLocalization"), n = t.val(), r = 0; r < e.length; r++)
                                if (e[r]) {
                                    var a = e[r].Name
                                      , c = e[r].NameLocalization;
                                    if (n === a && o || n === c && i)
                                        return !1
                                }
                        return !0
                    }
                },
                messages: {
                    checkSpaces: function(t) {
                        return t.data("valRequired")
                    },
                    checkDuplicates: function(t) {
                        return t.data("valRequired")
                    }
                }
            }),
            a.customFieldNameSelector = o,
            a.customFieldLocalizedNameSelector = i,
            a.customFieldGridSelector = s,
            a.maxOrderId = r,
            $(t).click(function() {
                a.onAddCustomFieldButtonClick()
            }),
            $(e).click(function() {
                a.onRemoveCustomFieldButtonClick()
            }),
            $("button[name='confirm']").click(function() {
                $(a.customFieldNameSelector + "," + a.customFieldLocalizedNameSelector).removeAttr("required pattern")
            }),
            a
        }
        return __extends(t, c),
        t.prototype.onAddCustomFieldButtonClick = function() {
            if (this.validation.validateFields()) {
                var t = $(this.customFieldNameSelector).val()
                  , e = $(this.customFieldLocalizedNameSelector).val();
                $(this.customFieldGridSelector).data("kendoGrid").dataSource.add({
                    Name: t,
                    NameLocalization: e,
                    OrderId: ++this.maxOrderId
                }),
                $(this.customFieldNameSelector).val(""),
                $(this.customFieldLocalizedNameSelector).val("")
            }
        }
        ,
        t.prototype.onRemoveCustomFieldButtonClick = function() {
            var t = $(this.customFieldGridSelector).data("kendoGrid")
              , e = t.tbody.find("input[name=wccResult]:checked").closest("tr");
            t.removeRow(e)
        }
        ,
        t
    }(t.GridInitialDataLoad);
    t.CreateCustomFields = e
}(Common || (Common = {})),
function(t) {
    var e = function() {
        function t(t, e, o) {
            var i = this;
            this.certificateCategorySelector = t,
            this.validityPeriodSelector = e,
            this.getDefaultValidityPeriodUrl = o,
            $(this.certificateCategorySelector).change(function(t) {
                i.updateValidityPeriod(t)
            })
        }
        return t.prototype.updateValidityPeriod = function(t) {
            var o = this
              , e = $(t.target).val();
            $.get({
                url: o.getDefaultValidityPeriodUrl + "?categoryId=" + e,
                success: function(t) {
                    var e = $(o.validityPeriodSelector).data("kendoNumericTextBox");
                    e.max(t),
                    e.value(t)
                }
            })
        }
        ,
        t
    }();
    t.CreateEdit = e
}(SCC || (SCC = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), ICC, Account, Common, Common, Common, Common, ICC, ICC, ICC, PlotPlan;
!function(t) {
    var e = function(P) {
        function t(t, e, o, i, n, r, a, c, s, l, d, u, h, f, p, m, g, S, v, C, y, I, k, b, x) {
            var w = P.call(this, null, null, null, null, null, null, null, null, null, t, null, null, null) || this;
            w.isUpdateMode = !1,
            w.isLoadingDataFromObject = !1,
            w.availableIsolationStateIndexes = [1, 2],
            w.rowForEditUid = null;
            return w.kendoGridRowReorder = new Common.KendoGridRowReorder(g,{
                rowNumberCellSelector: ".point-index"
            }),
            w.tagNumberSelector = r,
            w.descriptionSelector = a,
            w.commentSelector = c,
            w.isLockedOpenSelector = s,
            w.addPointBtnSelector = u,
            w.pointIndexLabelSelector = m,
            w.isolationPointsGridSelector = g,
            w.updatePointBtnSelector = h,
            w.editPointBtnSelector = f,
            w.removePointBtnSelector = p,
            w.isolationPointTypeSelector = e,
            w.isolationPointMethodSelector = o,
            w.isolationPointStateSelector = i,
            w.deisolationPointStateSelector = n,
            w.getIsolationMethodsByTypeUrl = l,
            w.getIsolationStatesByMethodUrl = d,
            w.disabledBeforeDataBoundBtnsSelector = S,
            w.pointRadioBtnSelector = v,
            w.cancelPointBtnSelector = C,
            w.acceptBtnSelector = y,
            w.certificateId = I,
            w.pointsJsonSelector = k,
            w.newText = b,
            w.orderIdFieldName = x,
            $(w.isolationPointTypeSelector).change(function() {
                w.updateIsolationPointMethods()
            }),
            $(w.isolationPointMethodSelector).change(function() {
                w.updateIsolationPointStates()
            }),
            $(w.isolationPointStateSelector).change(function() {
                w.selectDeisolationStateWhenSelectedIsolationState()
            }),
            $(w.updatePointBtnSelector).click(function() {
                w.updateIsolationPoint()
            }),
            $(w.editPointBtnSelector).click(function() {
                w.editIsolationPointsBtnClick()
            }),
            $(w.removePointBtnSelector).click(function() {
                w.removeIsolationPoint()
            }),
            $(w.cancelPointBtnSelector).click(function() {
                w.onCancelBtnClick()
            }),
            w
        }
        return __extends(t, P),
        t.prototype.onBoundPointMethod = function() {
            this.isLoadingDataFromObject && $(this.isolationPointMethodSelector).data("kendoDropDownList").value(this.tempPointObject.IsolationPointMethodId)
        }
        ,
        t.prototype.selectDeisolationStateWhenSelectedIsolationState = function() {
            if (!this.isUpdateMode) {
                var t = $(this.isolationPointStateSelector).data("kendoDropDownList").select()
                  , e = $(this.deisolationPointStateSelector).data("kendoDropDownList");
                0 < t ? e.select(this.getOppositeIsolationStateIndex(t)) : e.select(0)
            }
        }
        ,
        t.prototype.getOppositeIsolationStateIndex = function(e) {
            return this.availableIsolationStateIndexes.filter(function(t) {
                return t != e
            })[0]
        }
        ,
        t.prototype.selectPoint = function(t) {
            $("".concat(this.editPointBtnSelector, ",").concat(this.removePointBtnSelector)).toggle(!$(t.currentTarget).data("hasCurrentState"))
        }
        ,
        t.prototype.onCancelBtnClick = function() {
            this.isUpdateMode = !1,
            $(this.addPointBtnSelector).show(),
            $(this.editPointBtnSelector).hide(),
            $(this.removePointBtnSelector).hide(),
            $(this.updatePointBtnSelector).hide(),
            $(this.cancelPointBtnSelector).hide(),
            this.rowForEditUid = null,
            this.resetInputs()
        }
        ,
        t.prototype.initializeDataInGrid = function() {
            var t = $(this.pointsJsonSelector).val();
            if (t) {
                var e = JSON.parse(t)
                  , o = new kendo.data.DataSource({
                    data: e,
                    sort: {
                        field: this.orderIdFieldName,
                        dir: "asc"
                    }
                });
                $(this.isolationPointsGridSelector).data("kendoGrid").setDataSource(o)
            }
        }
        ,
        t.prototype.updateIsolationPointMethods = function() {
            var e = this
              , t = $(this.isolationPointTypeSelector).val();
            $.ajax({
                method: "GET",
                url: this.getIsolationMethodsByTypeUrl + "/" + t,
                success: function(t) {
                    fillDropDown(e.isolationPointMethodSelector, t),
                    e.onBoundPointMethod(),
                    e.updateIsolationPointStates()
                }
            })
        }
        ,
        t.prototype.updateIsolationPointStates = function() {
            var e = this
              , t = $(this.isolationPointMethodSelector).val();
            $.ajax({
                method: "GET",
                url: this.getIsolationStatesByMethodUrl + "/" + t,
                success: function(t) {
                    $(e.isolationPointStateSelector).data("kendoDropDownList").value(null),
                    $(e.deisolationPointStateSelector).data("kendoDropDownList").value(null),
                    fillDropDown(e.isolationPointStateSelector, t),
                    fillDropDown(e.deisolationPointStateSelector, t),
                    e.onBoundPointStates()
                }
            })
        }
        ,
        t.prototype.isFormValid = function() {
            var t = $('[data-role="validator"]').data("kendoValidator").validate();
            return this.markInvalidItems(),
            t
        }
        ,
        t.prototype.markInvalidItems = function() {
            var o = this;
            $(".k-valid").each(function(t, e) {
                o.setValidationState(e, !0)
            }),
            $(".k-invalid").each(function(t, e) {
                o.setValidationState(e, !1)
            })
        }
        ,
        t.prototype.addIsolationPoint = function() {
            if (this.isFormValid()) {
                this.kendoGridRowReorder.updateOrderForGridData();
                var t = $(this.isolationPointsGridSelector).data("kendoGrid").dataSource
                  , e = this.getPointObjectFilledWithInputs();
                e.OrderId = this.GetMaxPointIndex() + 1,
                e.PointIndex = this.GetMaxPointIndex() + 1,
                e.IsolationCertificateId = this.certificateId,
                t.add(e),
                this.resetInputs(),
                this.resetValidationStates()
            }
        }
        ,
        t.prototype.onBoundPointStates = function() {
            this.isLoadingDataFromObject && ($(this.isolationPointStateSelector).data("kendoDropDownList").value(this.tempPointObject.IsolationPointStateId),
            $(this.deisolationPointStateSelector).data("kendoDropDownList").value(this.tempPointObject.DeisolationPointStateId),
            this.isLoadingDataFromObject = !1)
        }
        ,
        t.prototype.IsolationPointsGridBound = function() {
            $(this.disabledBeforeDataBoundBtnsSelector).removeAttr("disabled"),
            this.kendoGridRowReorder.initializeReorder()
        }
        ,
        t.prototype.GetMaxPointIndex = function() {
            var t = $(this.isolationPointsGridSelector).data("kendoGrid").dataSource.data().map(function(t) {
                return t.PointIndex
            });
            return 0 < t.length ? Math.max.apply(Math, t) : 0
        }
        ,
        t.prototype.acceptChanges = function() {
            this.kendoGridRowReorder.updateOrderForGridData();
            var t = $(this.isolationPointsGridSelector).data("kendoGrid").dataSource.data().toJSON()
              , e = JSON.stringify(t);
            $(this.pointsJsonSelector).val(e),
            document.forms[0].submit()
        }
        ,
        t.prototype.loadObjectToInputs = function() {
            var t = this.getSelectedPoint();
            $(this.pointIndexLabelSelector).html(t.PointIndex),
            $(this.tagNumberSelector).val(t.TagNumber),
            $(this.commentSelector).val(t.Comment),
            $(this.descriptionSelector).val(t.Description),
            this.tempPointObject = t,
            this.isLoadingDataFromObject = !0,
            $(this.isolationPointTypeSelector).data("kendoDropDownList").value(t.IsolationPointTypeId),
            $(this.isLockedOpenSelector).data("kendoDropDownList").value(t.IsLockedOpen),
            this.updateIsolationPointMethods()
        }
        ,
        t.prototype.getSelectedPoint = function() {
            var t = $("[name=iccpoint]:checked").closest("tr").data("uid");
            return $(this.isolationPointsGridSelector).data("kendoGrid").dataSource.getByUid(t)
        }
        ,
        t.prototype.removeIsolationPoint = function() {
            this.kendoGridRowReorder.updateOrderForGridData();
            var t = this.getSelectedPoint();
            $(this.isolationPointsGridSelector).data("kendoGrid").dataSource.remove(t),
            this.optimizeOrderId(),
            $(this.addPointBtnSelector).show(),
            $(this.editPointBtnSelector).hide(),
            $(this.removePointBtnSelector).hide(),
            $(this.updatePointBtnSelector).hide(),
            $(this.cancelPointBtnSelector).hide()
        }
        ,
        t.prototype.editIsolationPointsBtnClick = function() {
            this.isUpdateMode = !0,
            this.rowForEditUid = $("[name=iccpoint]:checked").closest("tr").data("uid"),
            this.loadObjectToInputs(),
            $(this.pointRadioBtnSelector).attr("disabled", "disabled"),
            $(this.updatePointBtnSelector).show(),
            $(this.cancelPointBtnSelector).show(),
            $(this.addPointBtnSelector).hide(),
            $(this.editPointBtnSelector).hide()
        }
        ,
        t.prototype.updateIsolationPoint = function() {
            if (this.isUpdateMode = !1,
            this.isFormValid()) {
                this.kendoGridRowReorder.updateOrderForGridData();
                var t = $(this.isolationPointsGridSelector).data("kendoGrid").dataSource.getByUid(this.rowForEditUid)
                  , e = this.getPointObjectFilledWithInputs();
                e.PointIndex = t.PointIndex,
                e.Id = t.Id,
                e.OrderId = t.OrderId,
                e.IsolationCertificateId = t.IsolationCertificateId,
                $(this.isolationPointsGridSelector).data("kendoGrid").dataSource.remove(t),
                $(this.isolationPointsGridSelector).data("kendoGrid").dataSource.add(e),
                $(this.isolationPointsGridSelector).data("kendoGrid").refresh(),
                this.resetInputs(),
                this.resetValidationStates(),
                $(this.updatePointBtnSelector).hide(),
                $(this.cancelPointBtnSelector).hide(),
                $(this.addPointBtnSelector).show(),
                $(this.removePointBtnSelector).hide(),
                $(this.editPointBtnSelector).hide(),
                $(this.pointRadioBtnSelector).removeAttr("disabled"),
                this.rowForEditUid = null
            }
        }
        ,
        t.prototype.getPointObjectFilledWithInputs = function() {
            var t = this;
            return {
                TagNumber: $(t.tagNumberSelector).val(),
                Description: $(t.descriptionSelector).val(),
                IsolationPointTypeId: $(t.isolationPointTypeSelector).val(),
                IsolationPointType: {
                    Title: $(t.isolationPointTypeSelector).data("kendoDropDownList").text()
                },
                IsolationPointMethodId: $(t.isolationPointMethodSelector).val(),
                IsolationPointMethod: {
                    Title: $(t.isolationPointMethodSelector).data("kendoDropDownList").text()
                },
                Comment: $(t.commentSelector).val(),
                IsolationPointStateId: $(t.isolationPointStateSelector).val(),
                IsolationPointState: {
                    Title: $(t.isolationPointStateSelector).data("kendoDropDownList").text()
                },
                DeisolationPointStateId: $(t.deisolationPointStateSelector).val(),
                DeisolationPointState: {
                    Title: $(t.deisolationPointStateSelector).data("kendoDropDownList").text()
                },
                IsLockedOpen: $(t.isLockedOpenSelector).val(),
                CurrentState: null
            }
        }
        ,
        t.prototype.resetInputs = function() {
            $(this.pointIndexLabelSelector).html(this.newText),
            $(this.tagNumberSelector).val(""),
            $(this.descriptionSelector).val(""),
            $(this.isolationPointTypeSelector).data("kendoDropDownList").value(null),
            $(this.isolationPointMethodSelector).data("kendoDropDownList").value(null),
            $(this.isolationPointStateSelector).data("kendoDropDownList").value(null),
            $(this.deisolationPointStateSelector).data("kendoDropDownList").value(null),
            $(this.commentSelector).val(""),
            $(this.isLockedOpenSelector).data("kendoDropDownList").value(null)
        }
        ,
        t.prototype.optimizeOrderId = function() {
            for (var t = $(this.isolationPointsGridSelector).data("kendoGrid"), o = t.dataSource.data(), e = function(e) {
                o.find(function(t) {
                    return t.OrderId === e
                }) || o.forEach(function(t) {
                    return t.OrderId > e && t.OrderId--
                })
            }, i = 1; i <= this.GetMaxPointIndex(); i++)
                e(i);
            t.refresh()
        }
        ,
        t.prototype.resetValidationStates = function() {
            var t = this;
            $(".k-valid, .k-invalid").each(function() {
                t.setValidationState(this, !1)
            })
        }
        ,
        t.prototype.setValidationState = function(t, e) {
            $(t).closest("tbody").find("[valid-state-for=" + $(t).attr("id") + "]").children("img").attr("src", ["/images/star.svg", "/images/star-green.svg"][+e])
        }
        ,
        t
    }(Common.CascadeLists);
    t.EditIsolationPoints = e
}(ICC || (ICC = {})),
function(t) {
    var e = function() {
        function t(t, e, o) {
            var i = this;
            this.getSitesUrl = t,
            this.getInstallationsBySiteUrl = e,
            this.loginAsGuestCheckboxSelector = o,
            this.sitesDownloaded = !1,
            this.loginInputBlockSelector = "#login-inputs",
            this.loginAsGuestInputBlockSelector = "#guest-inputs",
            this.summaryContainerSelector = ".validation-summary-errors",
            this.siteSelector = "[name=SiteId]",
            this.installationSelector = "[name=InstallationId]",
            $(document).ready(function() {
                i.showPanel()
            }),
            $(this.loginAsGuestCheckboxSelector).change(function() {
                i.onLoginAsGuestCheckboxChange()
            }),
            $(this.siteSelector).change(function() {
                i.updateInstallations()
            }),
            $("#loginHelpButton").kendoTooltip({
                showOn: "click",
                autoHide: !0,
                content: function(t) {
                    return t.target.data("tooltipText")
                },
                animation: {
                    open: {
                        effects: "fade:in",
                        duration: 100
                    },
                    close: {
                        effects: "fade:out",
                        duration: 100
                    }
                },
                callout: !1
            })
        }
        return t.prototype.onLoginAsGuestCheckboxChange = function() {
            $(this.summaryContainerSelector).empty(),
            this.showPanel()
        }
        ,
        t.prototype.showPanel = function() {
            $(this.loginAsGuestCheckboxSelector).is(":checked") ? (this.setSites(),
            $(this.loginAsGuestInputBlockSelector).children().removeAttr("disabled"),
            $(this.loginAsGuestInputBlockSelector).show(),
            $(this.loginInputBlockSelector).children().attr("disabled", "disabled"),
            $(this.loginInputBlockSelector).hide()) : ($(this.loginAsGuestInputBlockSelector).children().attr("disabled", "disabled"),
            $(this.loginAsGuestInputBlockSelector).hide(),
            $(this.loginInputBlockSelector).children().removeAttr("disabled"),
            $(this.loginInputBlockSelector).show())
        }
        ,
        t.prototype.setSites = function() {
            var e = this;
            this.sitesDownloaded || $.get({
                url: "".concat(this.getSitesUrl, "?ui-culture=").concat(getCurrentCulture()),
                cache: !0,
                success: function(t) {
                    fillDropDown(e.siteSelector, t),
                    e.sitesDownloaded = !0
                }
            })
        }
        ,
        t.prototype.updateInstallations = function() {
            var e = this
              , t = $(this.siteSelector).val();
            $.get({
                url: this.getInstallationsBySiteUrl,
                data: {
                    siteId: t,
                    "ui-culture": getCurrentCulture()
                },
                cache: !0,
                success: function(t) {
                    fillDropDown(e.installationSelector, t)
                }
            })
        }
        ,
        t
    }();
    t.CreateLogin = e
}(Account || (Account = {})),
function(t) {
    var e = function() {
        function t(n, r) {
            var a = this;
            this.filterArray = [],
            $(document).ready(function() {
                var i = new Core.ValidationFromScript({
                    rules: {
                        requiredPath: function(t) {
                            var e = $(t);
                            return !e.is("[data-required]") || e.hasValue()
                        }
                    },
                    messages: {
                        requiredPath: function(t) {
                            return $(t).data("required")
                        }
                    }
                });
                $(".confirmBtn").click(function() {
                    var t = $("#path");
                    if (t.valid() && i.validateFields()) {
                        nullable(n.DataSourceRequest.Filters).length && a.getFilters(n.DataSourceRequest.Filters),
                        $.cookie("filters", JSON.stringify(a.filterArray));
                        var e = getFormRowsFromDataArray(n.SelectedIds, "itemsIdsForExport")
                          , o = $('<form action="'.concat(r, '" method="POST" enctype="application/x-www-form-urlencoded">\n                                <input type="hidden" name="path" value="').concat(t.val(), '">\n                                ').concat(e, "\n                            </form>"));
                        $(document.body).append(o),
                        $(o).submit()
                    }
                })
            })
        }
        return t.prototype.getFilters = function(t) {
            for (var e in t)
                if (t.hasOwnProperty(e)) {
                    var o = t[e];
                    "object" == typeof o && (o && o.Member && this.filterArray.push(o),
                    this.getFilters(o))
                }
        }
        ,
        t
    }();
    t.ExportCsv = e
}(Common || (Common = {})),
function(t) {
    var e = function() {
        function t() {}
        return t.readBase64 = function(t, e) {
            var o = this
              , i = document.createElement("input");
            i.type = "file",
            i.onchange = function() {
                o.onFileChangeB64(i.files[0], t, e)
            }
            ,
            i.click()
        }
        ,
        t.readCsv = function(t, e) {
            this.read(".txt,.csv", t, e)
        }
        ,
        t.readJson = function(i, n) {
            this.read(".json,.txt", function(e, t) {
                var o;
                try {
                    o = JSON.parse(t)
                } catch (t) {
                    return void (n && n(e, t))
                }
                i(e, o)
            }, n)
        }
        ,
        t.read = function(t, e, o) {
            var i = this
              , n = document.createElement("input");
            n.type = "file",
            n.accept = t,
            n.onchange = function() {
                i.onFileChange(n.files[0], e, o)
            }
            ,
            n.click()
        }
        ,
        t.onFileChange = function(t, e, o) {
            var i = t.name
              , n = new FileReader;
            n.onload = function() {
                e(i, n.result)
            }
            ,
            n.onerror = function(t) {
                o && o(i, t)
            }
            ,
            n.readAsText(t)
        }
        ,
        t.onFileChangeB64 = function(t, e, o) {
            var i = t.name
              , n = new FileReader;
            n.onload = function() {
                var t = n.result.split(",")[1];
                e(i, t)
            }
            ,
            n.onerror = function(t) {
                o && o(i, t)
            }
            ,
            n.readAsDataURL(t)
        }
        ,
        t
    }();
    t.TextFileReader = e
}(Common || (Common = {})),
function(t) {
    var e = function() {
        function t() {}
        return t.dayDiff = function(t, e) {
            var o = Date.UTC(t.getFullYear(), t.getMonth(), t.getDate())
              , i = Date.UTC(e.getFullYear(), e.getMonth(), e.getDate());
            return Math.floor((i - o) / 864e5)
        }
        ,
        t.tomorrow = function() {
            var t = new Date;
            return t.setUTCDate(t.getUTCDate() + 1),
            t
        }
        ,
        t
    }();
    t.DateUtil = e
}(Common || (Common = {})),
function(t) {
    var e = /\r\n|\n/
      , o = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/
      , i = /^\d+$/
      , c = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59"]
      , n = function() {
        function t() {}
        return t.asDate = function(t) {
            return "string" == typeof t ? new Date(t) : t
        }
        ,
        t.splitText = function(t) {
            return t.split(e)
        }
        ,
        t.trim = function(t) {
            return t && t.trim()
        }
        ,
        t.asEmail = function(t) {
            if (t) {
                var e = t.trim();
                if (this.isEmail(e))
                    return e
            }
            throw new Error("not an email: ".concat(t))
        }
        ,
        t.isEmail = function(t) {
            return o.test(t)
        }
        ,
        t.isInteger = function(t) {
            return i.test(t.toString())
        }
        ,
        t.isUrl = function(t) {
            try {
                return !!new URL(t)
            } catch (t) {
                return !1
            }
        }
        ,
        t.asRuLocalDateTime = function(t) {
            if (!t)
                return "";
            var e = c[t.getDate()]
              , o = c[t.getMonth() + 1]
              , i = t.getFullYear()
              , n = c[t.getHours()]
              , r = c[t.getMinutes()]
              , a = c[t.getSeconds()];
            return "".concat(e, ".").concat(o, ".").concat(i, " ").concat(n, ":").concat(r, ":").concat(a)
        }
        ,
        t.charIsLetter = function(t) {
            return -1 !== "-_.@$#*%!?0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZабвгдеёжзийклмнопрстухцчшщъыьэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУХЦЧШЩЪЫЬЭЮЯ".indexOf(t)
        }
        ,
        t
    }();
    t.StringHelper = n
}(Common || (Common = {})),
function(t) {
    var e = function() {
        function t(t, e, o, i, n, r, a, c, s, l) {
            var d = this;
            this.substanceGridSelector = t,
            this.locationFactorGridSelector = e,
            this.releaseFactorGridSelector = o,
            this.substanceFieldSelector = i,
            this.locationFactorFieldSelector = n,
            this.releaseFactorFieldSelector = r,
            this.minimumIsolationStandardFieldSelector = a,
            this.minimumIsolationStandardBlockSelector = c,
            this.confirmButtonSelector = s,
            this.getMinimumIsolationStandardUrl = l,
            $(document).ready(function() {
                $(d.confirmButtonSelector).click(function() {
                    d.onConfirmButtonClick()
                })
            })
        }
        return t.prototype.onConfirmButtonClick = function() {
            var t = $(this.substanceGridSelector).data("kendoGrid")
              , e = $(this.locationFactorGridSelector).data("kendoGrid")
              , o = $(this.releaseFactorGridSelector).data("kendoGrid")
              , i = t.dataItem($(t.select()[0]).parent("tr"))
              , n = e.dataItem($(e.select()[0]).parent("tr"))
              , r = o.select().children("input").val();
            i ? $(this.substanceFieldSelector).val(i.get("Id")) : $(this.substanceFieldSelector).val(null),
            n ? $(this.locationFactorFieldSelector).val(n.get("Id")) : $(this.locationFactorFieldSelector).val(null),
            $(this.releaseFactorFieldSelector).val(r)
        }
        ,
        t.prototype.onGridDataBound = function(t) {
            var e = t.sender
              , o = $("#" + e.element.attr("relative-field-name")).val();
            if (o) {
                var i = e.tbody.find("input[value=".concat(o, "]")).parent("td");
                e.select(i)
            }
        }
        ,
        t.prototype.onGridChange = function() {
            var t = $(this.substanceGridSelector).data("kendoGrid")
              , e = $(this.releaseFactorGridSelector).data("kendoGrid")
              , o = $(this.locationFactorGridSelector).data("kendoGrid");
            if (t.select().length && e.select().length && o.select().length) {
                var i = t.dataItem(t.select().parent("tr")).get("Id")
                  , n = e.select().children("input").val()
                  , r = o.dataItem(o.select().parent("tr")).get("Id")
                  , a = this;
                $.post(this.getMinimumIsolationStandardUrl, {
                    substanceId: i,
                    releaseFactorId: n,
                    locationFactorId: r
                }, function(t) {
                    $(a.minimumIsolationStandardFieldSelector).val(t.Id),
                    $(a.minimumIsolationStandardBlockSelector).text(t.Value)
                })
            } else
                $(this.minimumIsolationStandardBlockSelector).empty()
        }
        ,
        t
    }();
    t.IsolationCreateEdit = e
}(ICC || (ICC = {})),
function(t) {
    var e = function() {
        function t(t, e, o, i, n, r, a, c, s, l, d) {
            var u = this;
            this.effectFactorGridSelector = t,
            this.timeFactorGridSelector = e,
            this.releaseFactorGridSelector = o,
            this.effectFactorFieldSelector = i,
            this.timeFactorFieldSelector = n,
            this.releaseFactorFieldSelector = r,
            this.minimumIsolationStandardFieldSelector = a,
            this.minimumIsolationStandardBlockSelector = c,
            this.hazardFactorTooltip = s,
            this.confirmButtonSelector = l,
            this.getMinimumIsolationStandardUrl = d,
            $(document).ready(function() {
                $(u.confirmButtonSelector).click(function() {
                    u.onConfirmButtonClick()
                }),
                $(u.minimumIsolationStandardBlockSelector).mousemove(function(t) {
                    u.onHintMouseOn(t)
                }).mouseout(function() {
                    u.onHintMouseOut()
                })
            })
        }
        return t.prototype.onConfirmButtonClick = function() {
            var t = $(this.effectFactorGridSelector).data("kendoGrid")
              , e = $(this.timeFactorGridSelector).data("kendoGrid")
              , o = $(this.releaseFactorGridSelector).data("kendoGrid")
              , i = t.select().children("input").val()
              , n = e.select().children("input").val()
              , r = o.select().children("input").val();
            $(this.effectFactorFieldSelector).val(i),
            $(this.releaseFactorFieldSelector).val(r),
            $(this.timeFactorFieldSelector).val(n)
        }
        ,
        t.prototype.onHintMouseOn = function(t) {
            $(this.hazardFactorTooltip).css({
                top: t.pageY + 5,
                left: t.pageX + 5
            }).show()
        }
        ,
        t.prototype.onHintMouseOut = function() {
            $(this.hazardFactorTooltip).hide().css({
                top: 0,
                left: 0
            })
        }
        ,
        t.prototype.onGridDataBound = function(t) {
            var e = t.sender
              , o = $("#" + e.element.attr("relative-field-name")).val();
            if (o) {
                var i = e.tbody.find("input[value=".concat(o, "]")).parent("td");
                e.select(i)
            }
        }
        ,
        t.prototype.onGridChange = function() {
            var t = $(this.effectFactorGridSelector).data("kendoGrid").select()
              , e = $(this.releaseFactorGridSelector).data("kendoGrid").select()
              , o = $(this.timeFactorGridSelector).data("kendoGrid").select();
            if (t.length && e.length && o.length) {
                var i = t.children("input").val()
                  , n = e.children("input").val()
                  , r = o.children("input").val()
                  , a = this;
                $.post(this.getMinimumIsolationStandardUrl, {
                    effectFactorId: i,
                    releaseFactorId: n,
                    timeFactorId: r
                }, function(t) {
                    $(a.minimumIsolationStandardFieldSelector).val(t.Id),
                    $(a.minimumIsolationStandardBlockSelector).text("".concat(t.MinimumIsolationMethod, " / ").concat(t.CalculatedHazardFactorValue))
                })
            } else
                $(this.minimumIsolationStandardBlockSelector).empty()
        }
        ,
        t
    }();
    t.ProcessIsolationCalculatorCreateEdit = e
}(ICC || (ICC = {})),
function(t) {
    var e = function() {
        function t(t, e, o, i, n, r, a) {
            var c = this;
            this.isolationGridSelector = t,
            this.editIsolationButtonSelector = e,
            this.removeIsolationButtonSelector = o,
            this.editIsolationUrl = i,
            this.removeIsolationUrl = n,
            this.returnUrl = r,
            this.certificateId = a,
            $(document).ready(function() {
                c.initializeOnRadioButtonFirstChange(),
                $(c.editIsolationButtonSelector).click(function() {
                    c.onEditButtonClick()
                }),
                $(c.removeIsolationButtonSelector).click(function() {
                    c.onRemoveButtonClick()
                }),
                c.configureWindowButtons()
            })
        }
        return t.prototype.configureWindowButtons = function() {
            var o = this;
            $("button#up, button#down").click(function() {
                var t = $(o.isolationGridSelector).find("input[type=radio]:checked").length
                  , e = $(o.isolationGridSelector).data("kendoGrid").items().length;
                t && 1 < e && ($("[name=defaultButtons]").hide(),
                $("[name=confirmationButtons]").show())
            })
        }
        ,
        t.prototype.onEditButtonClick = function() {
            var t = {
                isolationId: $(this.isolationGridSelector).data("kendoGrid").dataItem($("input[type=radio]:checked").parents("tr")).get("Id"),
                certificateId: this.certificateId
            };
            assignLocation(addReturnUrl("".concat(this.editIsolationUrl).concat(t.toQueryString()), this.returnUrl))
        }
        ,
        t.prototype.onRemoveButtonClick = function() {
            var t = $(this.isolationGridSelector).data("kendoGrid")
              , e = $("input[type=radio]:checked").parents("tr")
              , o = t.dataItem(e).get("Id");
            $.post(this.removeIsolationUrl, {
                id: o,
                certificateId: this.certificateId
            }),
            t.removeRow(e),
            $(this.editIsolationButtonSelector).addClass("k-nodata"),
            $(this.removeIsolationButtonSelector).addClass("k-nodata"),
            this.initializeOnRadioButtonFirstChange()
        }
        ,
        t.prototype.initializeOnRadioButtonFirstChange = function() {
            var t = this;
            $("input[type=radio]").one("change", function() {
                $(t.editIsolationButtonSelector).removeClass("k-nodata"),
                $(t.removeIsolationButtonSelector).removeClass("k-nodata")
            })
        }
        ,
        t
    }();
    t.IsolationMaintain = e
}(ICC || (ICC = {})),
function(z) {
    var t = function() {
        function t(t, e, o, i, n, r, a, c, s, l, d, u, h, f, p, m, g, S, v, C, y, I, k, b, x, w, P, D, B, A) {
            var T, O, R, G = this;
            this.defaultTop = 20,
            this.defaultLeft = 20,
            this.defaultWidth = 60,
            this.defaultHeight = 60,
            this.selectedItem = (T = $(),
            O = T,
            (R = function() {
                return O
            }
            ).set = function(t) {
                O = $(t)
            }
            ,
            R.clear = function() {
                O = T
            }
            ,
            R),
            this.selectors = {
                ListOfReferences: t,
                ItemTitleEn: o,
                ItemTitleRus: i,
                ItemLinkId: n,
                ItemId: r,
                RadioButtons: a,
                SelectBlock: c,
                CreateBlock: s,
                AddBlock: l,
                EditBlock: d,
                GridItem: {
                    NameEn: ".item-nameEn",
                    NameRus: ".item-nameRus",
                    Link: ".item-link",
                    LinkId: ".item-linkId",
                    TopCoords: ".item-top-coords",
                    LeftCoords: ".item-left-coords",
                    Id: ".item-id"
                },
                Link: "link",
                Form: "form"
            },
            this.urls = {
                AddLinkAction: D,
                UpdateLinkAction: B,
                RemoveLinkAction: A
            },
            this.plotPlanId = C,
            this.imageAreaLeft = y,
            this.imageAreaTop = I,
            this.imageAreaWidth = k,
            this.imageAreaHeight = b,
            this.createCanvas(),
            this.validation = new Core.ValidationFromScript,
            this.isAreaPlotPlan = x,
            this.leftCoordinates = w,
            this.topCoordinates = P,
            this.plotPlanAreaHelper = new z.AreaHelper,
            this.initializeBorderIfRequired(),
            $(S).click(function() {
                G.onAddAreaButtonClick()
            }),
            $(v).click(function() {
                G.onConfirmAreaButtonClick()
            }),
            $(p).click(function() {
                G.removeSelectedItem()
            }),
            $(h).click(function() {
                G.addNewReference()
            }),
            $(f).click(function() {
                G.editSelectedItem()
            }),
            $(m).click(function() {
                G.discardChanges()
            }),
            $(u).click(function() {
                G.toCreateMode(),
                G.onCreateButton()
            })
        }
        return t.prototype.onAddAreaButtonClick = function() {
            this.plotPlanCanvas.remove(this.plotPlanBorder),
            $(".edit-hide").hide(),
            $(".edit-red-area").show();
            var t = 0
              , e = 0
              , o = this.plotPlanCanvas.width
              , i = this.plotPlanCanvas.height;
            this.plotPlanAreaHelper.isRectangleArea(this.leftCoordinates, this.topCoordinates) && (t = this.imageAreaLeft,
            e = this.imageAreaTop,
            o = this.imageAreaWidth,
            i = this.imageAreaHeight);
            var n = new fabric.Rect({
                left: t,
                top: e,
                width: o,
                height: i,
                fill: "#cc3300",
                opacity: .2,
                originX: "left",
                originY: "top",
                hasRotatingPoint: !1
            });
            this.plotPlanCanvas.add(n),
            this.plotPlanCanvas.renderAll()
        }
        ,
        t.prototype.onConfirmAreaButtonClick = function() {
            $(this.selectors.ItemTitleRus + "," + this.selectors.ItemTitleEn).removeAttr("required pattern");
            var t = this.plotPlanCanvas.getActiveObject();
            null != t && (document.getElementById("ImageAreaLeft").value = String(Math.floor(t.left)),
            document.getElementById("ImageAreaTop").value = String(Math.floor(t.top)),
            document.getElementById("ImageAreaWidth").value = String(Math.floor(t.getBoundingRect().width)),
            document.getElementById("ImageAreaHeight").value = String(Math.floor(t.getBoundingRect().height)))
        }
        ,
        t.prototype.addNewReference = function() {
            if (this.validation.validateFields()) {
                var t = $(this.selectors.ListOfReferences).data("kendoGrid")
                  , e = $(this.selectors.ItemTitleEn).val().trim()
                  , o = $(this.selectors.ItemTitleRus).val().trim()
                  , i = this.defaultTop
                  , n = this.defaultLeft
                  , r = this.defaultLeft + this.defaultWidth
                  , a = this.defaultTop + this.defaultHeight
                  , c = this.plotPlanCanvas.getActiveObject();
                if (null != c && (i = Math.floor(c.top),
                r = (n = Math.floor(c.left)) + Math.floor(c.getBoundingRect().width),
                a = i + Math.floor(c.getBoundingRect().height)),
                e.length && o.length) {
                    var s = {
                        Link: "",
                        PlotPlanId: this.plotPlanId,
                        LinkNameEn: e,
                        LinkNameRus: o,
                        TopCoordinates: "".concat(i, ",").concat(i, ",").concat(a, ",").concat(a),
                        LeftCoordinates: "".concat(n, ",").concat(r, ",").concat(r, ",").concat(n)
                    };
                    $.post(this.urls.AddLinkAction, s, function() {
                        t.dataSource.read()
                    }),
                    this.toViewMode()
                }
            }
        }
        ,
        t.prototype.clearFields = function() {
            null != this.plotPlanCanvas && this.plotPlanCanvas.clear(),
            this.selectedItem.clear(),
            this.validation.hideValidator(),
            $(this.selectors.ItemTitleEn).val(""),
            $(this.selectors.ItemTitleRus).val(""),
            $(this.selectors.ItemId).val(""),
            $(this.selectors.ItemLinkId).val("")
        }
        ,
        t.prototype.onCreateButton = function() {
            var t = new fabric.Rect({
                left: this.defaultLeft,
                top: this.defaultTop,
                width: this.defaultWidth,
                height: this.defaultHeight,
                fill: "#004d00",
                opacity: .2,
                originX: "left",
                originY: "top",
                hasRotatingPoint: !1
            });
            this.plotPlanCanvas.add(t),
            this.plotPlanCanvas.renderAll()
        }
        ,
        t.prototype.createCanvas = function() {
            var t = function(t) {
                var e = t.target;
                e.currentHeight > e.canvas.height || e.currentWidth > e.canvas.width || (e.setCoords(),
                (e.getBoundingRect().top < 0 || e.getBoundingRect().left < 0) && (e.top = Math.max(e.top, e.top - e.getBoundingRect().top),
                e.left = Math.max(e.left, e.left - e.getBoundingRect().left)),
                (e.getBoundingRect().top + e.getBoundingRect().height > e.canvas.height || e.getBoundingRect().left + e.getBoundingRect().width > e.canvas.width) && (e.top = Math.min(e.top, e.canvas.height - e.getBoundingRect().height + e.top - e.getBoundingRect().top),
                e.left = Math.min(e.left, e.canvas.width - e.getBoundingRect().width + e.left - e.getBoundingRect().left)))
            };
            this.plotPlanCanvas = new fabric.Canvas("plotPlanCanvas"),
            this.plotPlanCanvas.on({
                "object:scaling": t,
                "object:moving": t
            })
        }
        ,
        t.prototype.toCreateMode = function() {
            this.clearFields(),
            $(this.selectors.AddBlock).show(),
            $(this.selectors.SelectBlock).show(),
            $(this.selectors.EditBlock).hide(),
            $(this.selectors.CreateBlock).hide()
        }
        ,
        t.prototype.toViewMode = function() {
            this.clearFields(),
            $(this.selectors.RadioButtons).prop("checked", !1),
            $(this.selectors.CreateBlock).show(),
            $(this.selectors.AddBlock).hide(),
            $(this.selectors.EditBlock).hide(),
            $(this.selectors.SelectBlock).hide()
        }
        ,
        t.prototype.toEditMode = function(t) {
            this.clearFields(),
            $(this.selectors.EditBlock).show(),
            $(this.selectors.SelectBlock).show(),
            $(this.selectors.AddBlock).hide(),
            $(this.selectors.CreateBlock).hide();
            var e = t.find(this.selectors.GridItem.Id).text().trim()
              , o = t.find(this.selectors.GridItem.LinkId).text().trim()
              , i = t.find(this.selectors.GridItem.NameEn).text().trim()
              , n = t.find(this.selectors.GridItem.NameRus).text().trim()
              , r = t.find(this.selectors.GridItem.TopCoords).text().trim()
              , a = t.find(this.selectors.GridItem.LeftCoords).text().trim();
            $(this.selectors.ItemId).val(e),
            $(this.selectors.ItemLinkId).val(o),
            $(this.selectors.ItemTitleEn).val(i),
            $(this.selectors.ItemTitleRus).val(n);
            var c = new fabric.Path(this.plotPlanAreaHelper.getFabricPath(a, r))
              , s = {
                fill: "#004d00",
                opacity: .2,
                originX: "left",
                originY: "top",
                hasRotatingPoint: !1,
                name: this.selectors.Link
            }
              , l = this.plotPlanAreaHelper.isRectangleArea(a, r) ? {} : {
                lockMovementX: !0,
                lockMovementY: !0,
                lockUniScaling: !0,
                hasControls: !1,
                hoverCursor: "cursor",
                hasBorders: !1
            };
            c.set($.extend(s, l)),
            this.plotPlanCanvas.add(c),
            this.plotPlanCanvas.renderAll()
        }
        ,
        t.prototype.editItem = function(t) {
            this.selectedItem().data("uid") === t ? (this.selectedItem.clear(),
            this.toViewMode()) : (this.selectedItem.set(kendo.format("[data-uid={0}]", t)),
            this.toEditMode(this.selectedItem()))
        }
        ,
        t.prototype.editSelectedItem = function() {
            var e = this;
            if (this.validation.validateFields()) {
                var t = $(this.selectors.ListOfReferences).data("kendoGrid")
                  , o = $(this.selectors.ItemId).val().trim()
                  , i = $(this.selectors.ItemLinkId).val().trim()
                  , n = $(this.selectors.ItemTitleEn).val().trim()
                  , r = $(this.selectors.ItemTitleRus).val().trim()
                  , a = this.plotPlanCanvas.getObjects().filter(function(t) {
                    return t.get("name") === e.selectors.Link
                })[0];
                if (a && n.length && r.length) {
                    var c = t.dataItem($(this.selectors.ListOfReferences).find("input[type=radio]:checked").parents("tr"))
                      , s = c.get("TopCoordinates")
                      , l = c.get("LeftCoordinates");
                    if (this.plotPlanAreaHelper.isRectangleArea(l, s)) {
                        var d = Math.floor(a.top)
                          , u = Math.floor(a.left)
                          , h = u + Math.floor(a.getBoundingRect().width)
                          , f = d + Math.floor(a.getBoundingRect().height);
                        s = "".concat(d, ",").concat(d, ",").concat(f, ",").concat(f),
                        l = "".concat(u, ",").concat(h, ",").concat(h, ",").concat(u)
                    }
                    var p = {
                        LinkId: i,
                        Id: o,
                        PlotPlanId: this.plotPlanId,
                        LinkNameEn: n,
                        LinkNameRus: r,
                        TopCoordinates: s,
                        LeftCoordinates: l
                    };
                    $.post(this.urls.UpdateLinkAction, p, function() {
                        t.dataSource.read()
                    }),
                    this.toViewMode()
                }
            }
        }
        ,
        t.prototype.removeSelectedItem = function() {
            var t = $(this.selectors.ListOfReferences).data("kendoGrid")
              , e = {
                Id: $(this.selectors.ItemId).val().trim()
            };
            $.post(this.urls.RemoveLinkAction, e, function() {
                t.dataSource.read()
            }),
            this.toViewMode()
        }
        ,
        t.prototype.discardChanges = function() {
            this.toViewMode()
        }
        ,
        t.prototype.initializeBorderIfRequired = function() {
            "True" === this.isAreaPlotPlan && (this.plotPlanBorder = new fabric.Path(this.plotPlanAreaHelper.getFabricPath(this.leftCoordinates, this.topCoordinates)),
            this.plotPlanBorder.set({
                fill: "transparent",
                stroke: "red",
                strokeWidth: 2,
                hasControls: !1,
                hasBorders: !1,
                lockMovementX: !0,
                lockMovementY: !0,
                hoverCursor: "default",
                selectable: !1
            }),
            this.plotPlanCanvas.add(this.plotPlanBorder))
        }
        ,
        t
    }();
    z.PlotPlanCanvas = t
}(PlotPlan || (PlotPlan = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), PlotPlan;
!function(t) {
    var e = function(e) {
        function t(t) {
            return e.call(this, "PlotPlan", null, null, "#SiteId", "#InstallationId", "#LocationId", null, null, null, t, null, null, null, !1) || this
        }
        return __extends(t, e),
        t
    }(Common.CascadeLists);
    t.CreateEdit = e
}(PlotPlan || (PlotPlan = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), PlotPlan, PlotPlan, Core, Common, WCC, WCC;
!function(t) {
    var e = function(c) {
        function t(t, e, o, i, n, r) {
            var a = c.call(this, t, "#initialData") || this;
            return a.selectedItemsIds = [],
            a.deleteButtonSelector = e,
            a.numberFieldSelector = o,
            a.deleteUrl = i,
            a.confirmationDialog = n,
            a.isRelationExistDialog = r,
            a.gridElement = $(a.gridSelector),
            $(a.deleteButtonSelector).click(function() {
                a.onDeleteButtonClick()
            }),
            a
        }
        return __extends(t, c),
        t.prototype.getSelectedItemsIds = function() {
            return this.selectedItemsIds
        }
        ,
        t.prototype.onGridDataBound = function(t) {
            var i = this
              , n = this.gridElement.data("kendoGrid")
              , e = n.tbody.find("input[type=checkbox]")
              , o = n.thead.find("input[type=checkbox]");
            e.each(function(t, e) {
                var o = n.dataItem($(e).parents("tr:first"));
                i.selectedItemsIds.indexOf(o.get("Id")) + 1 && n.select($(e).parents("tr:first"))
            }),
            $(o).change(function(t) {
                var e = n.items()
                  , o = $.map(e, function(t) {
                    return t.Id
                });
                $(t.target).prop("checked") ? i.selectedItemsIds = o.slice() : i.selectedItemsIds = []
            }),
            $(e).change(function(t) {
                var e = n.dataItem($(t.target).parents("tr:first")).get("Id");
                if ($(t.target).prop("checked"))
                    i.selectedItemsIds.push(e);
                else {
                    var o = i.selectedItemsIds.indexOf(e);
                    i.selectedItemsIds.splice(o, 1)
                }
            }),
            $(this.numberFieldSelector).text(n.dataSource.total())
        }
        ,
        t.prototype.onDeleteButtonClick = function() {
            if (jQuery.ajaxSettings.traditional = !0,
            this.selectedItemsIds.length) {
                var e = this;
                $.ajax({
                    type: "POST",
                    url: "/PlotPlan/CheckIsRelationExist",
                    data: this.getDeleteQueryString(),
                    dataType: "json",
                    success: function(t) {
                        t ? e.showExistDialog() : e.showDeleteConfirmDialog()
                    }
                })
            }
        }
        ,
        t.prototype.showDeleteConfirmDialog = function() {
            var e = this;
            this.confirmationDialog.showConfirmation().then(function(t) {
                $.post(e.deleteUrl, e.getDeleteQueryString()).done(function(t) {
                    e.onDeleteComplete(t)
                })
            })
        }
        ,
        t.prototype.showExistDialog = function() {
            this.isRelationExistDialog.showConfirmation().then(function(t) {})
        }
        ,
        t.prototype.onDeleteComplete = function(t) {
            this.gridElement.data("kendoGrid").dataSource.read(),
            this.selectedItemsIds = []
        }
        ,
        t.prototype.getDeleteQueryString = function() {
            return {
                ItemIds: this.selectedItemsIds
            }
        }
        ,
        t.prototype.removeAction = function(t) {
            assignLocation(t)
        }
        ,
        t
    }(Common.GridInitialDataLoad);
    t.Search = e
}(PlotPlan || (PlotPlan = {})),
function(t) {
    var e = function() {
        function t() {}
        return t.prototype.getFabricPath = function(t, e) {
            var o = t.split(",")
              , n = e.split(",")
              , r = o.length;
            return $.map(o, function(t, e) {
                var o = "1002" === t ? "1000" : t
                  , i = "544" === n[e] ? "542" : n[e];
                switch (e) {
                case 0:
                    return ["M", o, i, "L"];
                case r - 1:
                    return [o, i, "z"];
                default:
                    return [o, i, "L"]
                }
            }).join(" ")
        }
        ,
        t.prototype.isRectangleArea = function(t, e) {
            var o = t.split(",")
              , i = e.split(",");
            return 4 === o.length && 4 === i.length && (o[0] === o[1] && i[1] === i[2] || o[1] === o[2] && i[0] === i[1])
        }
        ,
        t
    }();
    t.AreaHelper = e
}(PlotPlan || (PlotPlan = {})),
function(t) {
    var e = function(e, o) {
        $(document).ready(function() {
            if ($("#validationSummaryContainer").hide(),
            o) {
                var t = $("#validationSummaryContainer [data-valmsg-summary='true'] ul");
                t.empty(),
                $("<li>").text(e).appendTo(t),
                $("#validationSummaryContainer").show()
            }
        })
    };
    (Core || (Core = {})).ShowValidation = e
}(),
function(t) {
    var e = function() {
        function t(t, e, o, i, n, r, a, c) {
            var s = this;
            this.fromDatePickerSelector = t,
            this.toDatePickerSelector = e,
            this.dateFormat = o,
            this.certificateSelectBoxSelector = i,
            this.gridSelector = n,
            this.searchButtonSelector = r,
            this.startDate = "1970-01-01",
            this.endDate = "9999-12-31",
            this.requiredByDate = "RequiredByDate",
            this.saveSearchMethodName = a,
            this.pageSize = c,
            $(this.fromDatePickerSelector).change(function() {
                s.setNullToDate($(e))
            }),
            $(this.toDatePickerSelector).change(function() {
                s.setNullToDate($(t))
            });
            var l = this;
            $(document).ready(function() {
                $("th[data-title=" + l.requiredByDate + "]").find("button[type=submit]").click(function(t) {
                    if ("eq" === $(this.form).find($("select[data-role=dropdownlist]")).eq(0).val()) {
                        t.preventDefault();
                        var o = $(this.form).find($("input[data-role=datepicker]")).eq(0).val();
                        $(l.gridSelector).data("kendoGrid").dataSource.filter({
                            field: "date",
                            operator: function(t) {
                                var e = kendo.parseDate(o);
                                return new Date(t.getFullYear(),t.getMonth(),t.getDate()).getTime() === e.getTime()
                            },
                            value: o
                        }),
                        $("th[data-title=Date]").popup.close()
                    }
                }),
                $(l.searchButtonSelector).click(function() {
                    return $(l.certificateSelectBoxSelector).hide(),
                    l.collectFilters(1)
                })
            })
        }
        return t.prototype.collectFilters = function(t, e, o) {
            void 0 === t && (t = null),
            void 0 === e && (e = !1),
            void 0 === o && (o = null);
            var i = $(this.gridSelector).data("kendoGrid")
              , c = []
              , s = {
                logic: "or"
            };
            s.Page = t || i.dataSource.page(),
            s.Sort = o || JSON.stringify($(i.dataSource.sort())[0]),
            $('#FilterInputs :input:not([data-ignore-search-filter="true"])').each(function(t, e) {
                var o = $(e)
                  , i = o.val();
                if (Array.isArray(i)) {
                    if (0 == i.length)
                        return;
                    var n;
                    (n = o.attr("filtermember")) || (n = o.attr("id"));
                    for (var r = {
                        logic: "or",
                        filters: []
                    }, a = 0; a < i.length; a++)
                        r.filters.push({
                            field: n,
                            operator: o.attr("filteroperator"),
                            value: i[a]
                        });
                    return c.push(r),
                    void (s[e.id] = i)
                }
                "null" != i && "" != i.trim() && "FromDate" !== o.attr("id") && "ToDate" !== o.attr("id") && ((n = o.attr("filtermember")) || (n = o.attr("id")),
                c.push({
                    field: n,
                    operator: o.attr("filteroperator"),
                    value: getFilterValue(o)
                }),
                s[e.id] = tryParseInt(i))
            });
            var n = $(this.fromDatePickerSelector).getKendoDatePicker().value();
            n && (n.setHours(0, 0, 0),
            c.push({
                field: this.requiredByDate,
                operator: "gte",
                value: n
            }),
            s.FromDate = n.toDateString());
            var r = $(this.toDatePickerSelector).getKendoDatePicker().value();
            return r && (r.setHours(23, 59, 59),
            c.push({
                field: this.requiredByDate,
                operator: "lte",
                value: r
            }),
            s.ToDate = r.toDateString()),
            e || i.dataSource.query({
                filter: c,
                sort: JSON.parse(s.Sort || null),
                page: Math.max(t, 1),
                pageSize: this.pageSize
            }),
            $.post(this.saveSearchMethodName, s),
            !1
        }
        ,
        t.prototype.setNullToDate = function(t) {
            var e = $(this.fromDatePickerSelector).val()
              , o = $(this.toDatePickerSelector).val();
            "" !== e && "" !== o && moment(e, this.dateFormat) > moment(o, this.dateFormat) && t.val(null)
        }
        ,
        t
    }();
    t.SearchFilters = e
}(Common || (Common = {})),
function(t) {
    var e = function() {
        function t(t, e, o, i, n, r, a, c, s, l, d, u, h, f, p, m, g, S, v, C, y, I) {
            var k = this;
            this.confirmButtonSelector = i,
            this.certificateId = n,
            this.plotPlanId = r,
            this.returnUrl = a,
            this.savePositionIconUrl = c,
            this.refreshButtonSelector = s,
            this.plotPlanContainerSelector = l,
            this.fromDateSelector = d,
            this.toDateSelector = u,
            this.getFilteredCertificatesWithPlotPlanUrl = h,
            this.iconsNumerFieldSelector = f,
            this.isSecondaryAreaPosition = p,
            this.secondaryAreaId = m,
            this.validationErrorMessage = g,
            this.serializer = new XMLSerializer,
            this.positionIconElementName = "positionIcon",
            this.borderElementName = "border",
            this.arrowPositionTopFix = .75,
            this.arrowPositionLeftFix = .75,
            this.stateIconHeight = 20,
            this.stateIconWidth = 20,
            this.filterProps = ["width", "height", "vertical-align", "fill", "display"],
            this.selectors = {
                searchResultContainer: "#result"
            },
            this.plotPlanCanvas = new fabric.Canvas(t,{
                selection: !1
            }),
            this.stateIconRenderer = new Common.CertificateIcons(I),
            this.plotPlanAreaHelper = new PlotPlan.AreaHelper,
            this.initializeBorderWithInformation(v, S),
            this.intializeCurrentCertificateStateIcon(C, y),
            this.upperCanvasSelector = "#".concat(t, " + .upper-canvas"),
            this.certificateStateIconPositionX = e,
            this.certificateStateIconPositionY = o,
            $(document).ready(function() {
                $(k.confirmButtonSelector).click(function() {
                    k.onConfirmButtonClick()
                }),
                $(k.refreshButtonSelector).click(function() {
                    k.onRefreshButtonClick()
                }),
                k.initializeCanvasDraggableStateIcon(),
                $(k.refreshButtonSelector).click(),
                $(k.upperCanvasSelector).dblclick(function(t) {
                    k.doubleClickEvent(t)
                })
            }),
            this.modalWindow = new Common.PositionIconInformation
        }
        return t.prototype.onRefreshButtonClick = function() {
            var e = this;
            $("#validationSummaryContainer").toggle(!1),
            $(this.plotPlanContainerSelector).hide(),
            showOverlay(),
            $.post(this.getFilteredCertificatesWithPlotPlanUrl, this.getSearchFilters(), function(t) {
                e.plotPlanCanvas.clear(),
                e.drawBorder(),
                e.initializeCurrentCertificateStateElement(),
                $.when(t.forEach(function(t) {
                    return e.addCertificateIconToCanvas(t)
                })).then(function() {
                    $(e.iconsNumerFieldSelector).text(t.length),
                    showOverlay(!1),
                    $(e.plotPlanContainerSelector).show()
                })
            })
        }
        ,
        t.prototype.getSearchFilters = function() {
            var t = $(this.fromDateSelector).getKendoDatePicker().value()
              , e = $(this.toDateSelector).getKendoDatePicker().value()
              , o = {
                certificateId: this.certificateId,
                plotPlanId: this.plotPlanId,
                fromDate: t ? t.toDateString() : null,
                toDate: e ? e.toDateString() : null
            };
            return this.isSecondaryAreaPosition && (o.secondaryAreaId = this.secondaryAreaId),
            o
        }
        ,
        t.prototype.addCertificateIconToCanvas = function(i) {
            var n = this
              , t = $(this.stateIconRenderer.renderIcon(i.StateIconName, "".concat(i.CertificateStateString, " ").concat(i.CertificateCategoryAbbreviationOriginal)));
            $(this.selectors.searchResultContainer).append(t),
            this.inlineCssStyles(t),
            fabric.loadSVGFromString(this.serializer.serializeToString(t[0]), function(t, e) {
                var o = fabric.util.groupSVGElements(t, e);
                o.left = i.IconPositionX,
                o.top = i.IconPositionY,
                n.setCertificatePositionIconOptions(o),
                o.on("mouseover", function(t) {
                    return n.modalWindow.open(i.Id, {
                        x: t.e.pageX,
                        y: t.e.pageY
                    }, i.AreaIsSecondary)
                }),
                o.on("mouseout", function() {
                    return n.modalWindow.close()
                }),
                n.plotPlanCanvas.add(o).renderAll()
            }),
            t.remove()
        }
        ,
        t.prototype.setCertificatePositionIconOptions = function(t) {
            t.hasControls = t.hasBorders = !1,
            t.lockMovementX = t.lockMovementY = !0,
            t.hoverCursor = "pointer",
            t.selectable = !1
        }
        ,
        t.prototype.onConfirmButtonClick = function() {
            var e = this
              , t = this.plotPlanCanvas.getObjects().filter(function(t) {
                return t.get("name") === e.positionIconElementName
            })[0]
              , o = t.getBoundingRect().left + this.arrowWidthFix
              , i = t.getBoundingRect().top + this.arrowHeightFix;
            if (o.toFixed(2) === this.borderStartLeftPosition.toFixed(2) && i.toFixed(2) === this.borderStartTopPosition.toFixed(2))
                return $("#validationSummaryContainer [data-valmsg-summary='true'] ul").empty().append("<li>".concat(this.validationErrorMessage, "</li>")),
                void $("#validationSummaryContainer").toggle(!0);
            var n = {
                id: this.certificateId,
                plotPlanId: this.plotPlanId,
                x: o.toFixed(),
                y: i.toFixed(),
                returnUrl: this.returnUrl
            };
            this.isSecondaryAreaPosition && (n.secondaryAreaId = this.secondaryAreaId),
            assignLocation(this.savePositionIconUrl + "?" + $.param(n))
        }
        ,
        t.prototype.initializeCanvasDraggableStateIcon = function() {
            var o = this
              , i = this
              , n = !1
              , r = function(t) {
                return null !== t && t.name === o.positionIconElementName
            };
            i.plotPlanCanvas.on("object:moving", function(t) {
                n = !0;
                var e = t.target;
                e.setCoords(),
                i.doesCertificateStateIconIntersectAnyObject(e) || (o.isPointInPolygon(e.left + i.arrowWidthFix + i.stateIconWidth / 2, e.top + i.arrowHeightFix + i.stateIconHeight / 2) ? (o.previousLeftCoordinate = e.left,
                o.previousTopCoordinate = e.top) : o.setCertificateIconToPreviousPosition(e))
            }),
            i.plotPlanCanvas.on("mouse:up", function(t) {
                var e = t.target;
                r(e) && n && o.setCertificateIconToPreviousPosition(e),
                n = !1
            }),
            i.plotPlanCanvas.on("mouse:down", function(t) {
                r(t.target) && o.modalWindow.forceClose()
            })
        }
        ,
        t.prototype.doesCertificateStateIconIntersectAnyObject = function(e) {
            var o = this;
            return this.plotPlanCanvas.getObjects().some(function(t) {
                return t !== e && t.name !== o.borderElementName && o.doesCertificateStateIconIntersectWithObject(t, e)
            })
        }
        ,
        t.prototype.doesCertificateStateIconIntersectWithObject = function(t, e) {
            var o = t.getBoundingRect()
              , i = e.getObjects()[1]
              , n = e.getBoundingRect()
              , r = n.left + i.left
              , a = n.top + i.top
              , c = r + i.width
              , s = a + i.height
              , l = r + n.width
              , d = a + n.height;
            return !(c > o.left + o.width || l < o.left || s > o.top + o.height || d < o.top)
        }
        ,
        t.prototype.isPointInPolygon = function(t, e) {
            for (var o = this.topCoordinates, i = this.leftCoordinates, n = i.length, r = n - 1, a = !1, c = 0; c < n; c++)
                (o[c] < e && o[r] >= e || o[r] < e && o[c] >= e) && (a = a !== i[c] + (e - o[c]) / (o[r] - o[c]) * (i[r] - i[c]) < t),
                r = c;
            return a
        }
        ,
        t.prototype.doubleClickEvent = function(t) {
            var e = this
              , o = t.originalEvent;
            if (this.isPointInPolygon(o.layerX, o.layerY)) {
                var i = this.plotPlanCanvas.getObjects().filter(function(t) {
                    return t.get("name") === e.positionIconElementName
                })[0];
                this.previousLeftCoordinate = i.left,
                this.previousTopCoordinate = i.top,
                i.left = o.layerX - this.arrowWidthFix - this.stateIconWidth / 2,
                i.top = o.layerY - this.arrowHeightFix - this.stateIconHeight / 2,
                i.setCoords();
                this.doesCertificateStateIconIntersectAnyObject(i) && this.setCertificateIconToPreviousPosition(i),
                this.plotPlanCanvas.renderAll()
            }
        }
        ,
        t.prototype.initializeCurrentCertificateStateElement = function() {
            var c = this
              , s = this;
            fabric.Image.fromURL("/images/arrow.gif", function(a) {
                a.left = 0,
                a.top = 0,
                fabric.loadSVGFromString(s.stateIconSvg, function(t, e) {
                    var o = fabric.util.groupSVGElements(t, e);
                    s.arrowWidthFix = o.left = a.getBoundingRect().width * s.arrowPositionLeftFix,
                    s.arrowHeightFix = o.top = a.getBoundingRect().height * s.arrowPositionTopFix;
                    var i = s.certificateStateIconPositionX
                      , n = s.certificateStateIconPositionY;
                    0 === i && 0 === n && (i = s.borderStartLeftPosition,
                    n = s.borderStartTopPosition);
                    var r = new fabric.Group([a, o],{
                        left: i - s.arrowWidthFix,
                        top: n - s.arrowHeightFix,
                        hasControls: !1,
                        hasBorders: !1,
                        name: c.positionIconElementName
                    });
                    s.plotPlanCanvas.add(r).renderAll()
                })
            })
        }
        ,
        t.prototype.drawBorder = function() {
            this.plotPlanCanvas.add(this.border)
        }
        ,
        t.prototype.setCertificateIconToPreviousPosition = function(t) {
            t.left = this.previousLeftCoordinate,
            t.top = this.previousTopCoordinate,
            t.setCoords()
        }
        ,
        t.prototype.intializeCurrentCertificateStateIcon = function(t, e) {
            this.previousLeftCoordinate = this.leftCoordinates[0],
            this.previousTopCoordinate = this.topCoordinates[0];
            var o = $(this.stateIconRenderer.renderIcon(t, e));
            $(this.selectors.searchResultContainer).append(o),
            this.inlineCssStyles(o),
            this.stateIconSvg = this.serializer.serializeToString(o[0]),
            o.remove()
        }
        ,
        t.prototype.inlineCssStyles = function(e) {
            var o = this;
            this.filterProps.forEach(function(t) {
                e.css(t, e.css(t))
            }),
            e.children().each(function(t, e) {
                o.inlineCssStyles($(e))
            })
        }
        ,
        t.prototype.initializeBorderWithInformation = function(t, e) {
            this.topCoordinates = e.split(",").map(Number),
            this.leftCoordinates = t.split(",").map(Number),
            this.border = new fabric.Path(this.plotPlanAreaHelper.getFabricPath(t, e)),
            this.borderStartTopPosition = this.topCoordinates[0],
            this.borderStartLeftPosition = this.leftCoordinates[0],
            this.border.set({
                name: this.borderElementName,
                fill: "transparent",
                stroke: "red",
                strokeWidth: 2,
                hasControls: !1,
                hasBorders: !1,
                lockMovementX: !0,
                lockMovementY: !0,
                hoverCursor: "default",
                selectable: !1
            })
        }
        ,
        t
    }();
    t.PositionIcon = e
}(WCC || (WCC = {})),
function(t) {
    var e = function() {
        function t(t, e, o, i, n, r, a) {
            var c = this;
            this.secondaryPositionButtonSelector = t,
            this.secondaryAreaGridSelector = e,
            this.positionedMessage = o,
            this.nonPositionedMessage = i,
            this.positionIconActionUrl = r,
            this.returnUrl = n,
            this.workCertificateId = a,
            $(document).ready(function() {
                $(c.secondaryPositionButtonSelector).click(function() {
                    c.onSecondaryPositionButtonClick()
                })
            })
        }
        return t.prototype.positionedValue = function(t) {
            return t ? this.positionedMessage : this.nonPositionedMessage
        }
        ,
        t.prototype.onSecondaryPositionButtonClick = function() {
            var t = $(this.secondaryAreaGridSelector).data("kendoGrid")
              , e = $(this.secondaryAreaGridSelector).find("input[type=radio]:checked").parents("tr");
            if (e.length) {
                var o = t.dataItem(e)
                  , i = {
                    id: this.workCertificateId,
                    locationId: o.get("LocationId"),
                    secondaryAreaId: o.get("Id"),
                    returnUrl: this.returnUrl
                };
                assignLocation(this.positionIconActionUrl + i.toQueryString())
            }
        }
        ,
        t
    }();
    t.PositionSecondaryArea = e
}(WCC || (WCC = {}));
var CertificateIcons = Common.CertificateIcons, WCC, SituationalPlan, SituationalPlan, CC;
!function(t) {
    var e = function() {
        function t(t) {
            var e = this;
            this.configuration = t,
            $(document).ready(function() {
                e.initializeConfiguration(t),
                e.stateIconRenderer = new Common.CertificateIcons(e.configuration.certificate.availableStates),
                e.configuration.plotPlan.isIntermediateLocation && (e.onRefreshButtonClick(),
                $(e.configuration.selectors.refreshButton).click(function() {
                    e.onRefreshButtonClick()
                }),
                $(e.configuration.selectors.searchButton).click(function() {
                    e.onCertificateSearchButtonClick()
                }),
                $(e.configuration.selectors.plotPlanLink).click(function(t) {
                    return e.onPlotPlanLinkClick(t)
                }),
                $(e.configuration.selectors.stateGroupBlockImage).click(function(t) {
                    e.onStateGroupIconClick(t)
                }),
                $(e.configuration.selectors.backButton).click(function() {
                    e.saveSearchFilters()
                })),
                $(e.configuration.selectors.areaLink).click(function(t) {
                    e.onAreaLinkClick(t)
                })
            })
        }
        return t.prototype.onAreaLinkClick = function(t) {
            var e = this;
            this.saveSearchFilters(),
            $.when($.cookie(this.configuration.constants.wccSearchCookieName, JSON.stringify({
                SiteId: this.configuration.plotPlan.siteId,
                InstallationId: this.configuration.plotPlan.installationId,
                LocationId: this.configuration.plotPlan.locationId,
                TaskAreaId: $(t.target).data("areaId")
            }), {
                path: "/"
            })).then(function() {
                assignLocation(addReturnUrl(e.configuration.urls.certificateForceRunSearchAction))
            })
        }
        ,
        t.prototype.initializeConfiguration = function(t) {
            this.configuration = $.extend(!0, {
                certificate: {
                    availableStates: ""
                },
                selectors: {
                    searchButton: "#certificateSearch",
                    stateGroupBlock: "#stateGroupFilter",
                    stateGroupBlockImage: "#stateGroupFilter img",
                    plotPlanContainer: "#container",
                    plotPlanLink: "area:not([data-area-id])",
                    areaLink: "area[data-area-id]",
                    iconsNumberField: "#iconsNumber",
                    fromDatePicker: "#FromDate",
                    toDatePicker: "#ToDate",
                    refreshButton: "#refresh",
                    backButton: "#backButton"
                },
                urls: {
                    getFilteredCertificatesAction: "/WCC/GetFilteredCertificates",
                    certificateDetailsAction: "/WCC/Details",
                    certificateForceRunSearchAction: "/WCC/Search?loadSavedSearch=true"
                },
                plotPlan: {
                    id: 0,
                    siteId: 0,
                    installationId: 0,
                    locationId: 0,
                    imageHeight: 544,
                    isIntermediateLocation: !1
                },
                constants: {
                    dateFormat: "dd.MM.yyyy",
                    cookieExpireMinutes: 15,
                    wccSearchCookieName: "CertificateSearchKeyWcc"
                },
                pageInformation: {
                    returnUrl: "/"
                },
                attributes: {
                    dataChecked: "data-checked",
                    dataCertificateId: "data-certificate-id",
                    stateGroup: "state-group",
                    secondaryIcon: "data-secondary-icon",
                    hasSecondaryAreas: "data-has-secondary-areas"
                }
            }, t)
        }
        ,
        t.prototype.onRefreshButtonClick = function() {
            var e = this;
            kendo.ui.progress($("body"), !0),
            $(this.configuration.selectors.plotPlanContainer).hide();
            var t = this.getFilterParameters();
            $.post(this.configuration.urls.getFilteredCertificatesAction, {
                stateGroups: t.stateGroups,
                isSecondaryIconsRequired: t.isSecondaryIconsRequired,
                fromDate: t.fromDate,
                toDate: t.toDate,
                installationId: this.configuration.plotPlan.installationId,
                locationId: this.configuration.plotPlan.locationId
            }, function(t) {
                e.setIcons(t)
            }).then(function() {
                kendo.ui.progress($("body"), !1),
                $(e.configuration.selectors.plotPlanContainer).show()
            }),
            this.saveSearchFilters()
        }
        ,
        t.prototype.setIcons = function(t) {
            var o = this;
            $(this.configuration.selectors.plotPlanContainer).find("svg:not(#backButton)").remove(),
            t.forEach(function(t) {
                var e = $(o.stateIconRenderer.renderIcon(t.StateIconName, "".concat(t.CertificateStateString, " ").concat(t.CertificateCategoryAbbreviationOriginal)));
                o.setIconPosition(e, t.IconPositionX, t.IconPositionY),
                o.setIconClickEvent(e, t.Id),
                e.attr(o.configuration.attributes.secondaryIcon, t.AreaIsSecondary),
                e.attr(o.configuration.attributes.hasSecondaryAreas, t.HasSecondaryAreas),
                e.attr(o.configuration.attributes.dataCertificateId, t.Id),
                $(o.configuration.selectors.plotPlanContainer).append(e)
            }),
            $(this.configuration.selectors.iconsNumberField).text(t.length)
        }
        ,
        t.prototype.setIconPosition = function(t, e, o) {
            t.css("cursor", "pointer"),
            t.css("position", "absolute"),
            t.css("left", e),
            t.css("top", o)
        }
        ,
        t.prototype.setIconClickEvent = function(t, e) {
            var o = this;
            t.click(function() {
                o.saveSearchFilters();
                var t = "".concat(o.configuration.urls.certificateDetailsAction, "/").concat(e);
                assignLocation(addReturnUrl(t))
            })
        }
        ,
        t.prototype.onStateGroupIconClick = function(t) {
            var e = $(t.target);
            e.attr(this.configuration.attributes.dataChecked, !getBool(e.attr(this.configuration.attributes.dataChecked)))
        }
        ,
        t.prototype.getFilterParameters = function() {
            var i = this
              , n = [];
            $(this.configuration.selectors.stateGroupBlock).children("img[data-checked=true]:not([secondary-icons])").each(function(t, e) {
                var o = $(e).attr(i.configuration.attributes.stateGroup);
                n.push(o)
            });
            var t = $("".concat(this.configuration.selectors.stateGroupBlock, " [secondary-icons]")).attr(this.configuration.attributes.dataChecked)
              , e = $(this.configuration.selectors.fromDatePicker).data("kendoDatePicker").value()
              , o = $(this.configuration.selectors.toDatePicker).data("kendoDatePicker").value();
            return {
                plotPlanId: this.configuration.plotPlan.id,
                stateGroups: n,
                isSecondaryIconsRequired: t,
                fromDate: e ? e.toDateString() : null,
                toDate: o ? o.toDateString() : null
            }
        }
        ,
        t.prototype.onCertificateSearchButtonClick = function() {
            var t = this;
            this.saveSearchFilters(),
            $.when($.cookie(this.configuration.constants.wccSearchCookieName, JSON.stringify({
                SiteId: this.configuration.plotPlan.siteId,
                InstallationId: this.configuration.plotPlan.installationId,
                LocationId: this.configuration.plotPlan.locationId
            }), {
                path: "/"
            })).then(function() {
                assignLocation(addReturnUrl(t.configuration.urls.certificateForceRunSearchAction))
            })
        }
        ,
        t.prototype.onPlotPlanLinkClick = function(t) {
            t.preventDefault(),
            $.when(this.saveSearchFilters()).then(function() {
                assignLocation($(t.target).attr("href"))
            })
        }
        ,
        t.prototype.saveSearchFilters = function() {
            var t = new Date;
            t.setMinutes(t.getMinutes() + this.configuration.constants.cookieExpireMinutes),
            $.cookie(this.configuration.constants.navigatorFilterCookieName, JSON.stringify(this.getFilterParameters()), {
                expires: t,
                path: "/"
            })
        }
        ,
        t
    }();
    t.CertificatePositionSearch = e
}(WCC || (WCC = {})),
function(SituationalPlan) {
    var SituationalPlanCertificateSearch = function() {
        function SituationalPlanCertificateSearch(t) {
            var e = this;
            this.configuration = t,
            $(document).ready(function() {
                e.initializeConfiguration(t),
                e.$grid = $(e.configuration.selectors.gridSelector),
                e.locations = t.locations,
                e.stateIconRenderer = new Common.CertificateIcons(e.configuration.certificate.availableStates),
                e.UploadCertificates(e.configuration.filters),
                e.debugConfiguration = t.debugConfiguration,
                e.svgScale = t.svgScale,
                $(e.configuration.selectors.refreshButton).click(function() {
                    e.onRefreshButtonClick()
                }),
                $(e.configuration.selectors.stateGroupBlockImage).click(function(t) {
                    e.onFilterIconClick(t)
                }),
                $(e.configuration.selectors.categoryCodeBlockImage).click(function(t) {
                    e.onFilterIconClick(t)
                }),
                setInterval(function() {
                    return e.timeoutRefresh()
                }, e.debugConfiguration.dataRefreshDelay)
            })
        }
        return SituationalPlanCertificateSearch.prototype.initializeConfiguration = function(t) {
            this.configuration = $.extend(!0, {
                certificate: {
                    availableStates: ""
                },
                selectors: {
                    plotPlanContainer: "#result",
                    iconsNumberField: "#iconsNumber",
                    gridSelector: "#SituationalPlanTable",
                    gridFooterSelector: "k-footer-template",
                    fromDatePicker: "#FromDate",
                    toDatePicker: "#ToDate",
                    refreshButton: "#refresh",
                    stateGroupBlock: "#stateGroupFilter",
                    stateGroupBlockImage: "#stateGroupFilter img",
                    categoryCodeBlock: "#categoryCodeFilter",
                    categoryCodeBlockImage: "#categoryCodeFilter img"
                },
                constants: {
                    dateFormat: "dd.MM.yyyy",
                    situationalPlanSearchFilterCookieName: "situationalPlanSearchFilter"
                },
                attributes: {
                    dataChecked: "data-checked",
                    dataCertificateId: "data-certificate-id",
                    stateGroup: "state-group",
                    categoryCode: "category-code",
                    secondaryIcon: "data-secondary-icon",
                    hasSecondaryAreas: "data-has-secondary-areas"
                }
            }, t)
        }
        ,
        SituationalPlanCertificateSearch.prototype.UploadCertificates = function(t) {
            var e = this;
            kendo.ui.progress($("body"), !0),
            $(this.configuration.selectors.plotPlanContainer).hide(),
            $.post(this.configuration.urls.getCertificatesAmountByLocation, {
                filter: t
            }, function(t) {
                e.setCertificateIconsForLocations(t)
            }).then(function() {
                kendo.ui.progress($("body"), !1),
                e.setSituationTableClickhandler(),
                $(e.configuration.selectors.plotPlanContainer).show()
            })
        }
        ,
        SituationalPlanCertificateSearch.prototype.setCertificateIconsForLocations = function(allCertificates) {
            var _this = this
              , svgScale = +$("svg.icon").css("scale");
            isNaN(svgScale) && (svgScale = this.svgScale),
            $(this.configuration.selectors.plotPlanContainer).find("svg:not(#backButton)").remove();
            var grid = this.$grid.data("kendoGrid");
            grid.dataSource.data([]),
            this.removeLocationInfo(),
            allCertificates.forEach(function(location) {
                var locationInfo = _this.locations.filter(function(t) {
                    return t.Id == location.PlotPlanId
                })[0];
                if (location.IsReferenced || (0 != location.WccLiveAmount || 0 != location.WccHotWorkLiveAmount || location.WccBreakingContainmentLiveAmount || 0 != location.WccHotWorkCat1LiveAmount || 0 != location.WccConfinedSpaceEntryLiveAmount || 0 != location.WccOperationalRiskAssessmentsLiveAmount ? grid.dataSource.add({
                    Title: location.OrderId + ". " + location.Title,
                    SiteId: location.SiteId,
                    InstallationId: location.InstallationId,
                    LocationId: location.LocationId,
                    IsReferencingIntermediateLocation: location.IsReferencingIntermediateLocation,
                    WccLiveAmount: location.WccLiveAmount,
                    WccHotWorkLiveAmount: location.WccHotWorkLiveAmount,
                    WccBreakingContainmentLiveAmount: location.WccBreakingContainmentLiveAmount,
                    WccHotWorkCat1LiveAmount: location.WccHotWorkCat1LiveAmount,
                    WccElectricalWorkLiveAmount: location.WccElectricalWorkLiveAmount,
                    WccConfinedSpaceEntryLiveAmount: location.WccConfinedSpaceEntryLiveAmount,
                    WccOperationalRiskAssessmentsLiveAmount: location.WccOperationalRiskAssessmentsLiveAmount
                }) : _this.debugConfiguration.showZeroValuesInTable && grid.dataSource.add({
                    Title: location.OrderId + ". " + location.Title,
                    LocationId: location.LocationId,
                    IsReferencingIntermediateLocation: location.IsReferencingIntermediateLocation,
                    WccLiveAmount: location.WccLiveAmount,
                    WccHotWorkLiveAmount: location.WccHotWorkLiveAmount,
                    WccBreakingContainmentLiveAmount: location.WccBreakingContainmentLiveAmount,
                    WccHotWorkCat1LiveAmount: location.WccHotWorkCat1LiveAmount,
                    WccElectricalWorkLiveAmount: location.WccElectricalWorkLiveAmount,
                    WccConfinedSpaceEntryLiveAmount: location.WccConfinedSpaceEntryLiveAmount,
                    WccOperationalRiskAssessmentsLiveAmount: location.WccOperationalRiskAssessmentsLiveAmount
                })),
                _this.debugConfiguration.showLocationWccLiveAmount && 0 != location.WorkCertificates.length) {
                    var amountDiv = document.createElement("div");
                    amountDiv.classList.add("situationalPlanItemInformationBox"),
                    amountDiv.innerHTML += location.WorkCertificates.length,
                    amountDiv.classList.add("situationalPlanItemAmountBoxZero"),
                    amountDiv.classList.add("situationalPlanItemAmountBoxAboveZero"),
                    amountDiv.style.left = locationInfo.Left + (locationInfo.Width - 75) - locationInfo.AmountIconOffset + "px",
                    amountDiv.style.top = locationInfo.Top + "px",
                    document.getElementById("result").appendChild(amountDiv)
                }
                if (_this.debugConfiguration.showLocationsIds && null != location.OrderId) {
                    var idDiv = document.createElement("div");
                    idDiv.classList.add("situationalPlanItemInformationBox"),
                    idDiv.classList.add("situationPlanItemLocationIdBox"),
                    idDiv.innerHTML += location.OrderId,
                    idDiv.style.left = locationInfo.Left + locationInfo.IdIconOffset + "px",
                    idDiv.style.top = locationInfo.Top + "px",
                    document.getElementById("result").appendChild(idDiv)
                }
                _this.debugConfiguration.showCertificateIcons && (null != location.WorkCertificates && location.WorkCertificates.forEach(function(certificate) {
                    var $certificateIcon = $(_this.stateIconRenderer.renderIcon(certificate.StateIconName, "".concat(certificate.CertificateStateString, " ").concat(certificate.CertificateCategoryAbbreviationOriginal)))
                      , locationInfo = _this.locations.filter(function(t) {
                        return t.LocationId == certificate.LocationId
                    })[0];
                    if (null != locationInfo) {
                        certificate.AreaIsSecondary ? $certificateIcon.css({
                            width: "42px",
                            height: "42px"
                        }) : certificate.HasSecondaryAreas && $certificateIcon.css({
                            animation: "blink 2.4s infinite"
                        });
                        var x1 = +(+eval(certificate.IconPositionX) - locationInfo.DeltaX) * locationInfo.ApproximationX - 20
                          , y1 = +(+eval(certificate.IconPositionY) - locationInfo.DeltaY) * locationInfo.ApproximationY - 20;
                        if (0 != locationInfo.RotationAngle) {
                            var radians = Math.PI / 180 * locationInfo.RotationAngle
                              , cos = Number(Math.cos(radians).toFixed(15))
                              , sin = Number(Math.sin(radians).toFixed(15))
                              , x2 = x1 * cos - y1 * sin
                              , y2 = x1 * sin + y1 * cos;
                            if (radians < 0)
                                var left = +locationInfo.Left + x2
                                  , top = +locationInfo.Top + y2 + locationInfo.Height - 64;
                            else
                                var left = +locationInfo.Left + x2 + locationInfo.Width - 64
                                  , top = +locationInfo.Top + y2
                        } else
                            var left = +locationInfo.Left + x1
                              , top = +locationInfo.Top + y1;
                        _this.setIconPosition($certificateIcon, left, top),
                        _this.setIconClickEvent($certificateIcon, certificate.Id),
                        $certificateIcon.attr(_this.configuration.attributes.secondaryIcon, certificate.AreaIsSecondary),
                        $certificateIcon.attr(_this.configuration.attributes.hasSecondaryAreas, certificate.HasSecondaryAreas),
                        $certificateIcon.attr(_this.configuration.attributes.dataCertificateId, certificate.Id),
                        $(_this.configuration.selectors.plotPlanContainer).append($certificateIcon),
                        $("svg.icon").css("transform", "scale(" + svgScale + ")")
                    }
                }),
                $(_this.configuration.selectors.iconsNumberField).text(allCertificates.length))
            })
        }
        ,
        SituationalPlanCertificateSearch.prototype.setIconPosition = function(t, e, o) {
            t.css("cursor", "pointer"),
            t.css("position", "absolute"),
            t.css("left", e),
            t.css("top", o)
        }
        ,
        SituationalPlanCertificateSearch.prototype.setIconClickEvent = function(t, e) {
            var o = this;
            t.click(function() {
                var t = "".concat(o.configuration.urls.certificateDetailsAction, "/").concat(e);
                assignLocation(addReturnUrl(t))
            })
        }
        ,
        SituationalPlanCertificateSearch.prototype.setSituationTableClickhandler = function() {
            var o = this;
            $("#overlayTable tr td:not(:first-child) span").click(function(t) {
                var e = o.getCertificateSearchData(t);
                e.isRowReferencingIntermediateLocation || $.when($.cookie(o.configuration.constants.wccSearchCookieName, JSON.stringify(e.searchConfig), {
                    path: "/"
                })).then(function() {
                    window.open(addReturnUrl(o.configuration.urls.certificateForceRunSearchAction), "_blank")
                })
            })
        }
        ,
        SituationalPlanCertificateSearch.prototype.getCertificateSearchData = function(t) {
            var e = $(t.target).closest("tr")
              , o = this.getGridDataRow(e)
              , i = this.isTableRowFooter(e)
              , n = o.get("SiteId")
              , r = o.get("InstallationId")
              , a = o.get("LocationId")
              , c = o.get("IsReferencingIntermediateLocation")
              , s = $(t.target).parent().data("certificateType")
              , l = $(t.target).parent().data("certificateCategory");
            return {
                searchConfig: {
                    SiteId: n,
                    InstallationId: r,
                    LocationId: i ? void 0 : a,
                    StateGroup: this.configuration.constants.liveStateGroupValue,
                    CertificateTypeId: s,
                    CertificateCategoryId: l
                },
                isRowReferencingIntermediateLocation: c
            }
        }
        ,
        SituationalPlanCertificateSearch.prototype.getGridDataRow = function(t) {
            return this.$grid.data("kendoGrid").dataItem(t)
        }
        ,
        SituationalPlanCertificateSearch.prototype.isTableRowFooter = function(t) {
            return t.hasClass(this.configuration.selectors.gridFooterSelector)
        }
        ,
        SituationalPlanCertificateSearch.prototype.onFilterIconClick = function(t) {
            var e = $(t.target);
            e.attr(this.configuration.attributes.dataChecked, !getBool(e.attr(this.configuration.attributes.dataChecked)))
        }
        ,
        SituationalPlanCertificateSearch.prototype.onRefreshButtonClick = function() {
            var t = this.getFilterParameters();
            this.UploadCertificates(t),
            this.saveSearchFilters()
        }
        ,
        SituationalPlanCertificateSearch.prototype.timeoutRefresh = function() {
            var t = this.getFilterParameters();
            this.UploadCertificates(t),
            this.saveSearchFilters()
        }
        ,
        SituationalPlanCertificateSearch.prototype.getFilterParameters = function() {
            var i = this
              , n = []
              , r = [];
            $(this.configuration.selectors.stateGroupBlock).children("img[data-checked=true]:not([secondary-icons])").each(function(t, e) {
                var o = $(e).attr(i.configuration.attributes.stateGroup);
                n.push(o)
            }),
            $(this.configuration.selectors.categoryCodeBlock).children("img[data-checked=true]:not([secondary-icons])").each(function(t, e) {
                var o = $(e).attr(i.configuration.attributes.categoryCode);
                r.push(o)
            });
            var t = $("".concat(this.configuration.selectors.stateGroupBlock, " [secondary-icons]")).attr(this.configuration.attributes.dataChecked)
              , e = $("".concat(this.configuration.selectors.categoryCodeBlock, " [secondary-icons]")).attr(this.configuration.attributes.dataChecked)
              , o = $(this.configuration.selectors.fromDatePicker).data("kendoDatePicker").value()
              , a = $(this.configuration.selectors.toDatePicker).data("kendoDatePicker").value();
            return {
                InstallationIds: this.configuration.filters.InstallationIds,
                StateGroups: n,
                CategoryCodes: r,
                IsSecondaryIconsRequired: t,
                IsRoutineImplementation: e,
                fromDate: o ? o.toDateString() : null,
                toDate: a ? a.toDateString() : null
            }
        }
        ,
        SituationalPlanCertificateSearch.prototype.saveSearchFilters = function() {
            $.cookie(this.configuration.constants.situationalPlanSearchFilterCookieName, JSON.stringify(this.getFilterParameters()), {
                expires: (new Date).setFullYear((new Date).getFullYear() + 1),
                path: "/"
            })
        }
        ,
        SituationalPlanCertificateSearch.prototype.removeLocationInfo = function() {
            for (var t = document.getElementById("result"), e = t.getElementsByTagName("div"); 0 < e.length; )
                t.removeChild(e[0])
        }
        ,
        SituationalPlanCertificateSearch
    }();
    SituationalPlan.SituationalPlanCertificateSearch = SituationalPlanCertificateSearch
}(SituationalPlan || (SituationalPlan = {})),
function(t) {
    var e = function() {
        function t(t) {
            var i = this;
            this.configuration = t,
            this.scale = t.scale,
            this.scalingEnabled = t.scaling,
            this.scalingRatio = 1.2,
            this.svgScale = t.svgScale,
            this.panning = !1,
            this.pointX = 0,
            this.pointY = 0,
            this.start = {
                x: 0,
                y: 0
            },
            this.$element = $(this.configuration.selectors.gridSelector),
            $(document).ready(function() {
                i.setTransform(),
                i.$element.mousedown(function(t) {
                    t.preventDefault(),
                    i.start = {
                        x: t.clientX - i.pointX,
                        y: t.clientY - i.pointY
                    },
                    i.panning = !0
                }),
                i.$element.mousemove(function(t) {
                    t.preventDefault(),
                    i.panning && (i.pointX = t.clientX - i.start.x,
                    i.pointY = t.clientY - i.start.y,
                    i.setTransform())
                }),
                i.$element.mouseup(function(t) {
                    i.panning = !1
                }),
                document.getElementById($("#result").attr("id")).addEventListener("wheel", function(t) {
                    if (i.scalingEnabled) {
                        t.preventDefault();
                        var e = (t.clientX - i.pointX) / i.scale
                          , o = (t.clientY - i.pointY) / i.scale;
                        0 < (t.deltaY ? -t.deltaY : t.deltaY) ? (i.scale *= i.scalingRatio,
                        i.svgScale /= i.scalingRatio) : (i.scale /= i.scalingRatio,
                        i.svgScale *= i.scalingRatio),
                        $("svg.icon").css("transform", "scale(" + i.svgScale + ")"),
                        i.pointX = t.clientX - e * i.scale,
                        i.pointY = t.clientY - o * i.scale,
                        i.setTransform()
                    }
                })
            })
        }
        return t.prototype.setTransform = function() {
            this.$element.css("transform", "translate(" + this.pointX * this.scalingRatio + "px, " + this.pointY * this.scalingRatio + "px) scale(" + this.scale + ")")
        }
        ,
        t
    }();
    t.DraggableElement = e
}(SituationalPlan || (SituationalPlan = {})),
function(t) {
    var e = function() {
        function t(t) {
            this.gridSelector = t
        }
        return t.prototype.getSelectedHazardName = function() {
            var t = $("[name=hazardRA]:checked").closest("[data-uid]")
              , e = $(this.gridSelector).getKendoGrid().dataItem(t);
            return encodeURIComponent(e.EnglishHazardName || e.HazardNameLocalization)
        }
        ,
        t
    }();
    t.SelectedHazardsAndControls = e
}(CC || (CC = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), Common;
!function(i) {
    var t = function(o) {
        function t(t) {
            var e = o.call(this, t.selectors.grid, t.selectors.initialDataHidden) || this;
            return e.shouldShowValidation = !1,
            e.initializeConfiguration(t),
            e.mainCertificateId = t.reference.mainCertificateId,
            e.referenceIdsFromAnotherInstallation = t.reference.referenceFromAnotherInstallationIds,
            e.kendoIdFormat = t.constants.kendoIdFormat,
            e.receivedReferences = t.reference.received,
            e.referencesSessionStorageName = t.reference.sessionStorage,
            e.$validationSummaryData = $(e.configuration.selectors.validationSummary + " [data-valmsg-summary='true'] ul"),
            e.confirmationDialog = new i.ConfirmationDialog(t.confirmationDialog.title,t.confirmationDialog.message,"#confirmationTemplate",{
                buttons: [{
                    text: t.confirmationDialog.buttonYes,
                    selector: ".confirm_yes"
                }, {
                    text: t.confirmationDialog.buttonNo,
                    selector: ".confirm_no"
                }]
            }),
            e
        }
        return __extends(t, o),
        t.prototype.initializeConfiguration = function(t) {
            this.configuration = t
        }
        ,
        t.prototype.confirmReferencesFromAnotherInstallationAndSite = function() {
            var t = this;
            this.referenceIdsFromAnotherInstallation.length ? (this.confirmationDialog.showConfirmation().then(function() {
                t.initializeReferences()
            }),
            $(".confirm_no").click(function() {
                t.removeReferencesFromAnotherInstallation(t.referenceIdsFromAnotherInstallation),
                t.initializeReferences()
            })) : this.initializeReferences()
        }
        ,
        t.prototype.initializeReferences = function() {}
        ,
        t.prototype.removeReferencesFromAnotherInstallation = function(t) {}
        ,
        t.prototype.saveReferences = function(t) {
            $("form").append('<input type="hidden" name="mainCertificateId" value="'.concat(this.mainCertificateId, '">\n                 <input type="hidden" name="savedReferences" value="').concat(t, '">')),
            sessionStorage.removeItem(this.referencesSessionStorageName)
        }
        ,
        t.prototype.showValidation = function() {
            this.shouldShowValidation && $(this.configuration.selectors.validationSummary).toggle(!0)
        }
        ,
        t.prototype.addValidationMessage = function(t) {
            $("<li>").text(t).appendTo(this.$validationSummaryData),
            this.shouldShowValidation = !0
        }
        ,
        t.prototype.clearValidationMessage = function() {
            this.$validationSummaryData.empty(),
            this.shouldShowValidation = !1,
            $(this.configuration.selectors.validationSummary).toggle(!1)
        }
        ,
        t
    }(i.GridInitialDataLoad);
    i.ManageReferences = t
}(Common || (Common = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), Common;
!function(t) {
    var e = function(l) {
        function t(t, e, o, i, n, r, a, c) {
            var s = l.call(this, t, "[name=CertificateTypeId]", "[name=CertificateCategoryId]", "[name=SiteId]", "[name=InstallationId]", "[name=LocationId]", "[name=TaskAreaId]", null, null, e, "[name=CertificateState]", "[name=StateGroup]", null) || this;
            return s.typeOfMainCertificate = t,
            s.defaultSite = o,
            s.defaultInstallation = i,
            s.mainCertificateId = n,
            s.certificateReferencesUrl = r,
            s.referencedCertificatesIdsCookieName = a,
            s.selectedOnSearchReferencesCookieName = c,
            s.gridSelector = "#grid",
            s.certificateSelectButtonBoxSelector = ".certificateSelectButtonBox",
            s.certificateSelectButtonSelector = ".certificateSelectButton",
            s.certificateActionSelector = ".certificateActionSelect",
            s.certificateCheckBoxSelector = 'input[name="certificateCheckBox"]',
            s.numberOfCertificatesToCheck = 1,
            $(document).ready(function() {
                s.setupSelectButton(),
                $.ajaxSetup({
                    cache: !1
                })
            }),
            s
        }
        return __extends(t, l),
        t.prototype.onGridBound = function() {
            var t = this;
            refreshSvg(),
            $(t.certificateSelectButtonBoxSelector).hide(),
            $(this.certificateCheckBoxSelector).change(function() {
                0 < $('[name="'.concat(this.name, '"]:checked')).length ? $(t.certificateSelectButtonBoxSelector).show() : $(t.certificateSelectButtonBoxSelector).hide()
            }),
            this.referencedCertificatesIdsCookieName && this.checkSingleAlreadyAddedCertificate()
        }
        ,
        t.prototype.setupSelectButton = function() {
            var t = this;
            $(this.certificateSelectButtonBoxSelector).hide(),
            $(this.certificateSelectButtonSelector).click(function() {
                t.sendSelectedCertificates()
            })
        }
        ,
        t.prototype.sendData = function(t) {
            $.cookie(this.selectedOnSearchReferencesCookieName, t, {
                path: "/"
            }),
            assignLocation(this.certificateReferencesUrl + {
                mainCertificateId: this.mainCertificateId,
                mainCertificateType: this.typeOfMainCertificate
            }.toQueryString())
        }
        ,
        t.prototype.checkSingleAlreadyAddedCertificate = function() {
            if ($(this.gridSelector).data("kendoGrid").dataSource.total() === this.numberOfCertificatesToCheck) {
                var t = $(this.certificateCheckBoxSelector).attr("id")
                  , e = $.cookie(this.referencedCertificatesIdsCookieName)
                  , o = e ? e.split(",") : [];
                -1 < $.inArray(t, o) && $(this.certificateCheckBoxSelector).prop("checked", !0)
            }
        }
        ,
        t.prototype.sendSelectedCertificates = function() {
            var t = [];
            $(this.gridSelector).find("".concat(this.certificateCheckBoxSelector, ":checked")).each(function() {
                t.push(this.id)
            }),
            this.sendData(t.join(","))
        }
        ,
        t
    }(t.CascadeLists);
    t.CertificateReferencesSearch = e
}(Common || (Common = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), Common;
!function(t) {
    var e = function(u) {
        function t(t, e, o, i, n, r, a, c, s, l) {
            var d = u.call(this, t, e, o, i, n, a, null, l) || this;
            return d.referencedTypeCode = c,
            d.wccLiveToNotLiveIndex = s,
            d.mainCertificateDisplayId = r,
            d
        }
        return __extends(t, u),
        t.prototype.sendSelectedCertificates = function() {
            var t = []
              , e = this;
            $(this.gridSelector).find("".concat(this.certificateCheckBoxSelector, ":checked")).each(function() {
                t.push([e.mainCertificateId, e.mainCertificateDisplayId, Number(this.id), Number($(this).attr("displayId")), e.referencedTypeCode])
            }),
            this.sendData(JSON.stringify(t))
        }
        ,
        t
    }(t.CertificateReferencesSearch);
    t.CrossReferenceSearch = e
}(Common || (Common = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), Common, Audit, Audit, Audit, Common, Common;
!function(t) {
    var e = function(o) {
        function t(t) {
            var e = o.call(this, t) || this;
            return $(document).ready(function() {
                e.confirmReferencesFromAnotherInstallationAndSite(),
                $(e.configuration.selectors.deleteReferenceSelector).click(function(t) {
                    e.deleteCrossReferenceFromListBox(t)
                }),
                $(e.configuration.selectors.addReferencesSelector).click(function() {
                    e.saveCrossReferencesToSessionStorage()
                }),
                $(e.configuration.selectors.confirmSelector).click(function() {
                    var t = e.convertToArray(e.crossReferences);
                    e.saveReferences(JSON.stringify(t))
                }),
                $(e.configuration.selectors.deleteReferenceSelector).prop("disabled", !0)
            }),
            e
        }
        return __extends(t, o),
        t.prototype.onChangeListBox = function(t) {
            $(t.closest("td")).find(this.configuration.selectors.deleteReferenceSelector).prop("disabled", 0 === $(t).data("kendoListBox").select().length)
        }
        ,
        t.prototype.initializeConfiguration = function(t) {
            o.prototype.initializeConfiguration.apply(this, arguments),
            this.configuration = $.extend(!0, {
                selectors: {
                    addReferencesSelector: "[name=addCrossReference]",
                    deleteReferenceSelector: "[name=deleteCrossReference]",
                    confirmSelector: "[name=confirmButton]",
                    validationSummary: "#validationSummaryContainer"
                }
            }, this.configuration)
        }
        ,
        t.prototype.initializeReferences = function() {
            var t = this.convertToCrossReferences(JSON.parse(sessionStorage.getItem(this.referencesSessionStorageName) || "[]"));
            this.setAlreadyReferencedIds(t),
            this.checkAlreadyReferencedId(),
            this.showValidation(),
            this.crossReferences = t.concat(this.receivedReferences),
            this.updateListBoxes()
        }
        ,
        t.prototype.removeReferencesFromAnotherInstallation = function(e) {
            this.receivedReferences = this.receivedReferences.filter(function(t) {
                return e.indexOf(t.ReferencedCertificateId) < 0
            })
        }
        ,
        t.prototype.deleteCrossReferenceFromListBox = function(t) {
            $(this.configuration.selectors.validationSummary).toggle(!1);
            var e = $(t.target).parents("td").find("select[data-role=listbox]")
              , o = e.data("kendoListBox")
              , i = [];
            o.select().each(function() {
                return i.push(o.dataItem(this).get("Value"))
            }),
            this.crossReferences = this.crossReferences.filter(function(t) {
                return i.indexOf(t.ReferencedCertificateId) < 0 && i.indexOf(t.MainCertificateId) < 0
            }),
            o.remove(o.select()),
            this.onChangeListBox(e)
        }
        ,
        t.prototype.saveCrossReferencesToSessionStorage = function() {
            var t = this.convertToArray(this.crossReferences);
            sessionStorage.setItem(this.referencesSessionStorageName, JSON.stringify(t))
        }
        ,
        t.prototype.setAlreadyReferencedIds = function(t) {
            var e = this
              , o = t.map(function(t) {
                return t.MainCertificateId === e.mainCertificateId ? t.ReferencedCertificateId : t.MainCertificateId
            })
              , i = {};
            this.alreadyReferencedIds = o.filter(function(t) {
                return !i.hasOwnProperty(t) && (i[t] = !0)
            })
        }
        ,
        t.prototype.checkAlreadyReferencedId = function() {
            var e = this
              , o = !1;
            this.receivedReferences = this.receivedReferences.filter(function(t) {
                return 0 <= e.alreadyReferencedIds.indexOf(t.ReferencedCertificateId) ? !(o = !0) : t.ReferencedCertificateId !== e.mainCertificateId || !(e.mainCertificateId === t.MainCertificateId || 0 <= e.alreadyReferencedIds.indexOf(t.MainCertificateId)) || !(o = !0)
            }),
            o && this.addValidationMessage(this.configuration.reference.errorMessage)
        }
        ,
        t.prototype.updateListBoxes = function() {
            var r = this;
            this.configuration.reference.typeNames.forEach(function(t, e) {
                var o = r.crossReferences.filter(function(t) {
                    return t.ReferencedCertificateTypeCode === e && t.MainCertificateId === r.mainCertificateId
                }).map(function(t) {
                    return {
                        Text: kendo.toString(t.ReferencedCertificateDisplayId, r.kendoIdFormat),
                        Value: t.ReferencedCertificateId
                    }
                });
                if (1 === e || 0 === e) {
                    var i = r.crossReferences.filter(function(t) {
                        return t.ReferencedCertificateTypeCode === e && t.ReferencedCertificateId === r.mainCertificateId
                    }).map(function(t) {
                        return {
                            Text: "".concat(kendo.toString(t.MainCertificateDisplayId, r.kendoIdFormat), "*"),
                            Value: t.MainCertificateId
                        }
                    });
                    o = o.concat(i)
                }
                var n = $(kendo.format("#{0}", t));
                n.length && n.data("kendoListBox").dataSource.data(o)
            })
        }
        ,
        t.prototype.convertToCrossReferences = function(t) {
            return t.map(function(t) {
                return {
                    MainCertificateId: t[0],
                    MainCertificateDisplayId: t[1],
                    ReferencedCertificateId: t[2],
                    ReferencedCertificateDisplayId: t[3],
                    ReferencedCertificateTypeCode: t[4]
                }
            })
        }
        ,
        t.prototype.convertToArray = function(t) {
            return t.map(function(t) {
                return [t.MainCertificateId, t.MainCertificateDisplayId, t.ReferencedCertificateId, t.ReferencedCertificateDisplayId, t.ReferencedCertificateTypeCode]
            })
        }
        ,
        t
    }(t.ManageReferences);
    t.ManageCrossReferences = e
}(Common || (Common = {})),
function(t) {
    var e = function() {
        function t(t) {
            var e = this;
            $(document).ready(function() {
                e.initializeConfiguration(t),
                e.initializeValidator(),
                e.displayAnswersInformation(),
                $("input:radio").change(function(t) {
                    e.displayAuditTableTotal($(t.target).parents("table"), e.configuration.audit.checkedRadioButtonsSelector),
                    e.displayTotals(e.configuration.audit.checkedRadioButtonsSelector)
                }),
                $(e.configuration.submit.completeButtonSelector).click(function(t) {
                    e.onCompleteButtonClick(t)
                }),
                $("[type=submit]").click(function(t) {
                    $(e.configuration.selectors.isCompleteActionField).val("".concat($(t.target).attr("name") === e.configuration.pageInformation.completeButtonName))
                })
            })
        }
        return t.prototype.displayAnswersInformation = function() {
            var o = this
              , i = "True" === this.configuration.pageInformation.isEditOrCreatePage ? this.configuration.audit.checkedRadioButtonsSelector : this.configuration.audit.tickImageSelector;
            $(this.configuration.audit.auditTablesSelector).each(function(t, e) {
                o.displayAuditTableTotal($(e), i)
            }),
            this.displayTotals(i)
        }
        ,
        t.prototype.onCompleteButtonClick = function(t) {
            this.validator.validate() || (t.preventDefault(),
            scrollUp(),
            $(this.configuration.validation.validationContainerSelector).toggle(!0))
        }
        ,
        t.prototype.displayAuditTableTotal = function(t, n) {
            t.find(this.configuration.audit.summaryCellsSelector).each(function(t, e) {
                var o = $(e).parent().children().index($(e))
                  , i = $(e).parents("tbody").find("tr").find("td:eq(".concat(o, ") ").concat(n)).length;
                $(e).text(i)
            })
        }
        ,
        t.prototype.displayTotals = function(n) {
            var r = this;
            $(this.configuration.audit.totalSummaryCellsSelector).each(function(t, e) {
                var o = $(e).parent().children().index($(e))
                  , i = $(r.configuration.audit.auditPanelSelector).find("tr").find("td:eq(".concat(o, ") ").concat(n)).length;
                $(e).text(i)
            });
            var a = this.getNumberOfYesAndNoAnswers();
            $(this.configuration.audit.percentCellSelector).each(function(t, e) {
                var o = $(e).parent().children().index($(e))
                  , i = parseInt($("".concat(r.configuration.audit.totalAreaCellSelector, ":eq(").concat(o, ")")).text())
                  , n = 0 !== a ? (100 * i / a).toFixed() : 0;
                $(e).text(n)
            })
        }
        ,
        t.prototype.getNumberOfYesAndNoAnswers = function() {
            var o = 0;
            return $(this.configuration.audit.forPercentCellSelector).each(function(t, e) {
                o += parseInt($(e).text())
            }),
            o
        }
        ,
        t.prototype.initializeConfiguration = function(t) {
            this.configuration = $.extend(!0, {
                submit: {
                    completeButtonSelector: "[name=complete]"
                },
                selectors: {
                    isCompleteActionField: "#IsCompleteAction"
                },
                pageInformation: {
                    isEditOrCreatePage: "True",
                    completeButtonName: "complete"
                },
                audit: {
                    auditPanelSelector: ".audit",
                    auditTablesSelector: "[id^=audit-table]",
                    tickImageSelector: "img[value=tick]",
                    checkedRadioButtonsSelector: "input:radio:checked",
                    summaryCellsSelector: "tr[total-row] td[summary]",
                    totalSummaryCellsSelector: "tr[area-total] td[summary]",
                    questionRowSelector: "tr[question]",
                    percentCellSelector: "tr[total-percents] td[percent]",
                    forPercentCellSelector: "tr[area-total] td[summary][for-percents]",
                    totalAreaCellSelector: "tr[area-total] td"
                },
                validation: {
                    validationContainerSelector: "#validationSummaryContainer",
                    validationListSelector: "#validationSummaryContainer [data-valmsg-summary='true'] ul",
                    questionsValidationMessage: "All questions must be answered",
                    commentsValidationMessage: "Comments are required"
                }
            }, t)
        }
        ,
        t.prototype.validateQuestions = function(t) {
            return $(t.configuration.audit.checkedRadioButtonsSelector).length === $(t.configuration.audit.questionRowSelector).length
        }
        ,
        t.prototype.validateComments = function(t) {
            return $("textarea").toArray().every(function(t) {
                return $(t).val()
            })
        }
        ,
        t.prototype.initializeValidator = function() {
            var i = this;
            i.validator = {
                validators: [{
                    validate: i.validateQuestions,
                    errorMessage: i.configuration.validation.questionsValidationMessage
                }, {
                    validate: i.validateComments,
                    errorMessage: i.configuration.validation.commentsValidationMessage
                }],
                validate: function() {
                    var o = !0;
                    return $(i.configuration.validation.validationListSelector).empty(),
                    i.validator.validators.forEach(function(t) {
                        var e = t.validate(i);
                        o = o && e,
                        e || $(i.configuration.validation.validationListSelector).append("<li>" + t.errorMessage + "</li>")
                    }),
                    o
                }
            }
        }
        ,
        t
    }();
    t.CreateEditView = e
}(Audit || (Audit = {})),
function(t) {
    var e = function() {
        function t(t) {
            var e = this;
            $(document).ready(function() {
                e.initializeConfiguration(t),
                e.initializeConfirmationDialog(),
                $(e.configuration.selectors.deleteActionButton).click(function() {
                    e.onDeleteActionButtonClick()
                })
            })
        }
        return t.prototype.onDeleteActionButtonClick = function() {
            var e = this
              , o = this
              , i = $(this.configuration.selectors.actionGrid).data("kendoGrid")
              , t = i.select();
            if (t.length) {
                var n = $.map(t, function(t) {
                    return i.dataItem(t)
                })
                  , r = n.filter(function(t) {
                    return !0 === t.get(e.configuration.auditAction.completedField)
                })
                  , a = n.filter(function(t) {
                    return !1 === t.get(e.configuration.auditAction.completedField)
                })
                  , c = $.map(a, function(t) {
                    return t.get("Id")
                });
                this.confirmationDialog.showConfirmation().then(function(t) {
                    c.length && $.post(o.configuration.url.deleteAction, {
                        ids: c,
                        auditId: o.configuration.auditAction.auditId
                    }).done(function(t) {
                        i.dataSource.read()
                    }),
                    r.length && ($(e.configuration.validation.validationListSelector).empty().append("<li>" + e.configuration.validation.message + "</li>"),
                    r.forEach(function(t) {
                        $(e.configuration.validation.validationListSelector).append("<li class='dotless'>" + t.get(e.configuration.auditAction.displayNameField) + "</li>")
                    }),
                    $(e.configuration.validation.validationContainerSelector).toggle(!0))
                })
            }
        }
        ,
        t.prototype.initializeConfiguration = function(t) {
            this.configuration = $.extend(!0, {
                selectors: {
                    deleteActionButton: "#deleteActions",
                    actionGrid: "#auditActions"
                },
                confirmation: {
                    title: "Delete Audit Action",
                    message: "Would you like to Delete this Audit Action?"
                },
                auditAction: {
                    completedField: "IsCompleted",
                    displayNameField: "DisplayName",
                    auditId: 0
                },
                url: {
                    deleteAction: "Delete"
                },
                validation: {
                    validationContainerSelector: "#validationSummaryContainer",
                    validationListSelector: "#validationSummaryContainer [data-valmsg-summary='true'] ul",
                    message: "Could not delete the following Audit Action(s) as they are in 'Completed' state"
                }
            }, t)
        }
        ,
        t.prototype.initializeConfirmationDialog = function() {
            this.confirmationDialog = new Common.ConfirmationDialog(this.configuration.confirmation.title,this.configuration.confirmation.message)
        }
        ,
        t
    }();
    t.ActionFunctions = e
}(Audit || (Audit = {})),
function(t) {
    var e = function() {
        function t(t) {
            var e = this;
            $(document).ready(function() {
                e.initializeConfiguration(t),
                e.initializeConfirmationDialog(),
                refreshSvg(),
                $(e.configuration.selectors.deleteAuditButton).click(function() {
                    e.onDeleteActionButtonClick()
                })
            })
        }
        return t.prototype.onDeleteActionButtonClick = function() {
            var e = this
              , o = $(this.configuration.selectors.auditGrid).data("kendoGrid")
              , t = $(this.configuration.selectors.auditGridRadiobutton).parents("tr");
            if (t.length) {
                var i = o.dataItem(t);
                this.confirmationDialog.showConfirmation().then(function(t) {
                    $.post(e.configuration.url.deleteAction, {
                        auditId: i.get("Id"),
                        certificateId: e.configuration.certificateInformation.id
                    }).done(function(t) {
                        redirectIfResultContainsCheckoutLink(t) || o.dataSource.remove(i)
                    })
                })
            }
        }
        ,
        t.prototype.initializeConfiguration = function(t) {
            this.configuration = $.extend(!0, {
                selectors: {
                    deleteAuditButton: "#delete",
                    auditGrid: "#audits",
                    auditGridRadiobutton: "#audits input:radio:checked"
                },
                confirmation: {
                    title: "Delete Audit",
                    message: "Would you like to delete this audit?"
                },
                certificateInformation: {
                    id: 0,
                    isLocked: !1
                },
                url: {
                    deleteAction: "DeleteAudit"
                }
            }, t)
        }
        ,
        t.prototype.initializeConfirmationDialog = function() {
            this.confirmationDialog = new Common.ConfirmationDialog(this.configuration.confirmation.title,this.configuration.confirmation.message)
        }
        ,
        t
    }();
    t.AuditFunctions = e
}(Audit || (Audit = {})),
function(t) {
    var e = function() {
        function t(t) {
            this.iconsDictionary = t
        }
        return t.prototype.renderIcon = function(t, e) {
            return e ? kendo.format(this.iconsDictionary[t], e) : this.iconsDictionary[t]
        }
        ,
        t.prototype.renderIconTemplate = function(t) {
            return kendo.Template.compile($("#stateIconTemplate").html())(t)
        }
        ,
        t
    }();
    t.CertificateIcons = e
}(Common || (Common = {})),
function(Common) {
    var SearchFunctions = function() {
        function SearchFunctions(t) {
            var e = this;
            $(document).ready(function() {
                e.initializeConfiguration(t),
                e.setDropDownListEnabledDependencies(),
                e.setDropDownListsDependencies(),
                e.initializeLimitedPrintSearchResults(),
                $(e.configuration.selectors.searchButton).click(function() {
                    e.onSearchButtonClick(!1, 1)
                })
            })
        }
        return SearchFunctions.prototype.blockBySccAndIcc = function(t, e) {
            var o = tryParseInt($(t).val());
            if ($(t).is(this.configuration.selectors.locationSelector)) {
                var i = $(e).getKendoDropDownList();
                return i.select(1 < i.dataSource.total() ? this.configuration.constants.allValueCode : this.configuration.constants.firstValueCode),
                !e.prop("disabled")
            }
            return o !== this.configuration.constants.sccCode && o !== this.configuration.constants.iccCode
        }
        ,
        SearchFunctions.prototype.blockByIcc = function(t) {
            return tryParseInt($(t).val()) !== this.configuration.constants.iccCode
        }
        ,
        SearchFunctions.prototype.onDataBound = function(t) {
            $(this.configuration.selectors.searchResult).text(t.sender.dataSource.total())
        }
        ,
        SearchFunctions.prototype.initializeLimitedPrintSearchResults = function() {
            var i = this;
            $("[data-limited-print-preview=true]").on("click", function() {
                var t = i.configuration.url.printPreviewAction
                  , e = $(".k-grid").getKendoGrid().dataSource
                  , o = e.filter();
                o && "" === o.filters[0].value && e.filter([]),
                e.total() > i.configuration.constants.maxItemsLimitForPrinting ? i.configuration.confirmationDialogs.confirmPrintPreviewDialog.showConfirmation().then(function() {
                    exportCsv(".k-grid", t)
                }) : exportCsv(".k-grid", t)
            })
        }
        ,
        SearchFunctions.prototype.onSearchButtonClick = function(t, e, o) {
            var s = this;
            void 0 === t && (t = !1),
            void 0 === e && (e = null),
            void 0 === o && (o = null);
            var i = $(this.configuration.selectors.searchTable).data("kendoGrid")
              , l = []
              , d = {};
            d.Sort = o || JSON.stringify($(i.dataSource.sort())[0]),
            d.Page = e || i.dataSource.page(),
            $(this.configuration.selectors.filters).each(function(t, e) {
                var o = $(e);
                if (o.prop("disabled"))
                    return !0;
                var i = o.data(s.configuration.attributes.ignoreIfRelatedFieldIsNotEmpty);
                if (i && $("#" + i).val())
                    return d[o.attr("id")] = tryParseInt(o.val()),
                    !0;
                var n = tryParseInt(o.val());
                if ("" !== n) {
                    var r = o.attr("id")
                      , a = o.data(s.configuration.attributeNames.fieldName) || r
                      , c = o.attr(s.configuration.attributeNames.filterOperator);
                    "nullOrEq" === c ? l.push({
                        logic: "or",
                        filters: [{
                            field: a,
                            operator: "eq",
                            value: tryParseInt(n)
                        }, {
                            field: a,
                            operator: "isnull"
                        }]
                    }) : l.push({
                        field: a,
                        operator: c,
                        value: n
                    }),
                    d[r] = tryParseInt(n)
                }
            });
            var n = this.getDateValue(this.configuration.selectors.fromDatePicker);
            n && (l.push({
                field: this.configuration.fieldName.fromDate,
                operator: "gte",
                value: n
            }),
            d.FromDate = n);
            var r = this.getDateValue(this.configuration.selectors.toDatePicker);
            r && (l.push({
                field: this.configuration.fieldName.toDate,
                operator: "lte",
                value: r
            }),
            d.ToDate = r),
            t || i.dataSource.query({
                filter: this.configuration.appendFilters(l),
                sort: JSON.parse(d.Sort || null),
                page: Math.max(e, 1),
                pageSize: this.configuration.pageInformation.pageSize
            }),
            $.cookie(this.configuration.pageInformation.searchCookieName, kendo.stringify(d), {
                path: "/"
            })
        }
        ,
        SearchFunctions.prototype.getDateValue = function(t) {
            var e = $(t);
            return 0 < e.length ? e.getKendoDatePicker().value() : null
        }
        ,
        SearchFunctions.prototype.setDropDownListsDependencies = function() {
            var c = this;
            $(this.configuration.attributes.owned).each(function() {
                var i = $(this)
                  , n = i.attr(c.configuration.attributeNames.owned)
                  , r = i.data("kendoDropDownList")
                  , a = $("#" + n);
                a.change(function(t) {
                    var e = $(t.target).val()
                      , o = {};
                    o[a.attr(c.configuration.attributeNames.propertyName) || n] = e,
                    $.ajax({
                        url: i.attr(c.configuration.attributeNames.filterMethod),
                        method: i.attr(c.configuration.attributeNames.filterMethodType) || c.configuration.constants.ajaxType,
                        data: o
                    }).then(function(t) {
                        r.dataSource.data(t),
                        a.trigger("changeWithData", t),
                        i.trigger("change")
                    })
                })
            })
        }
        ,
        SearchFunctions.prototype.setDropDownListEnabledDependencies = function() {
            var self = this;
            $(this.configuration.attributes.disableByOwner).each(function() {
                var _this = this
                  , ownerSelector = $(this).data(self.configuration.attributeNames.disableByOwner);
                ownerSelector.split(",").map(function(t) {
                    return t.trim()
                }).forEach(function(selector) {
                    $(selector).on("changeWithData", function(event, arg) {
                        var handler = eval($(_this).data(self.configuration.attributeNames.disableExpression)) || function() {}
                        ;
                        $(_this).getKendoDropDownList().enable(handler(selector, _this, arg))
                    })
                })
            })
        }
        ,
        SearchFunctions.prototype.initializeConfiguration = function(t) {
            this.configuration = $.extend(!0, {
                selectors: {
                    searchButton: "#SearchBtn",
                    searchResult: "#Total",
                    locationSelector: "#LocationId",
                    filters: "input.k-input[filteroperator]",
                    fromDatePicker: "#FromDate",
                    toDatePicker: "#ToDate",
                    pageNumber: "#Page"
                },
                constants: {
                    allValueCode: 0,
                    firstValueCode: 1,
                    sccCode: 2,
                    iccCode: 3,
                    ajaxType: "POST"
                },
                attributes: {
                    disableByOwner: "[data-disable-by-owner]",
                    owned: "[owned][filtermethod]",
                    ignoreIfRelatedFieldIsNotEmpty: "ignore-if-related-field-not-empty"
                },
                attributeNames: {
                    disableByOwner: "disableByOwner",
                    disableExpression: "disableExpression",
                    owned: "owned",
                    propertyName: "propertyName",
                    filterMethod: "filtermethod",
                    filterMethodType: "filtermethodtype",
                    fieldName: "field-name",
                    filterOperator: "filteroperator"
                },
                pageInformation: {
                    returnUrl: "",
                    searchCookieName: "SearchFilters",
                    pageSize: 25
                },
                fieldName: {
                    fromDate: "CreationDate",
                    toDate: "CreationDate"
                },
                appendFilters: function(t) {
                    return t
                }
            }, t)
        }
        ,
        SearchFunctions
    }();
    Common.SearchFunctions = SearchFunctions
}(Common || (Common = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), Audit;
!function(t) {
    var e = function(o) {
        function t(t) {
            var e = o.call(this, t) || this;
            return $(document).ready(function() {
                $(e.configuration.selectors.executeAuditAction).click(function() {
                    e.onExecuteAuditActionButtonClick()
                }),
                $(e.configuration.selectors.exportButton).click(function() {
                    exportCsv(e.configuration.selectors.searchTable, e.configuration.url.exportAction)
                })
            }),
            e
        }
        return __extends(t, o),
        t.prototype.onDataBound = function(t) {
            var o = this;
            $(this.configuration.selectors.auditActionBlock).hide();
            var i = $(this.configuration.selectors.searchTable).data("kendoGrid");
            $(this.configuration.selectors.gridRadiobuttons).change(function(t) {
                var e = i.dataItem($(t.target).parents("tr"));
                $.post(o.configuration.url.getAuditAvailableActions, {
                    id: e.get("Id")
                }, function(t) {
                    $(o.configuration.selectors.actionList).data("kendoDropDownList").dataSource.data(t),
                    $(o.configuration.selectors.auditActionBlock).show()
                })
            });
            var e = t.sender.dataSource.total();
            $(this.configuration.selectors.searchResult).text(e),
            $("#ExportPanel").toggle(0 !== e)
        }
        ,
        t.prototype.onExecuteAuditActionButtonClick = function() {
            var t = $(this.configuration.selectors.actionList).data("kendoDropDownList").value();
            t && assignLocation(addReturnUrl(t, this.configuration.pageInformation.returnUrl))
        }
        ,
        t.prototype.initializeConfiguration = function(t) {
            o.prototype.initializeConfiguration.apply(this, arguments),
            this.configuration = $.extend(!0, {
                selectors: {
                    searchTable: "#audits",
                    executeAuditAction: "#executeAuditAction",
                    exportButton: "#Export",
                    auditActionBlock: "#auditActionBlock",
                    gridRadiobuttons: "#audits input:radio",
                    actionList: "#actions"
                },
                attributes: {
                    disableByOwner: "[data-disable-by-owner]",
                    owned: "[owned][filtermethod]",
                    ignoreIfRelatedFieldIsNotEmpty: "ignore-if-related-field-not-empty"
                },
                url: {
                    exportAction: "/Audit/ExportCsv",
                    getAuditAvailableActions: "/Audit/GetAuditAvailableActions"
                },
                pageInformation: {
                    returnUrl: "",
                    searchCookieName: "auditSearchFilters"
                }
            }, this.configuration)
        }
        ,
        t
    }(Common.SearchFunctions);
    t.AuditSearchFunctions = e
}(Audit || (Audit = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), User, ICC, ICC;
!function(t) {
    var e = function(o) {
        function t(e) {
            var t = o.call(this, e) || this;
            return $(e.selectors.unblockButton).click(function(t) {
                e.unblock.confirm().then(function(t) {
                    deleteGridElementsIds(e.selectors.checkBox, e.unblock.attributeName, e.url.unblock, e.selectors.grid)
                })
            }),
            t
        }
        return __extends(t, o),
        t
    }(Common.SearchFunctions);
    t.LockSearchFunctions = e
}(User || (User = {})),
function(t) {
    var e = function() {
        function t(t) {
            var e = this;
            this.initializeConfiguration(t),
            $(document).ready(function() {
                $(e.configuration.selectors.confirmButton).click(function() {
                    e.onConfirmButtonClick()
                }),
                $(e.configuration.selectors.isolationPointsGrid).on("change", e.configuration.selectors.selectedForTestCheckbox, function(t) {
                    e.onSelectedForTestCheckboxChange(t)
                })
            })
        }
        return t.prototype.onGridDataBound = function() {
            var r = this;
            $(this.configuration.selectors.testStateDropList).each(function(t, e) {
                var o = $(e).parents("tr")
                  , i = $(r.configuration.selectors.isolationPointsGrid).getKendoGrid().dataItem(o)
                  , n = i.get(r.configuration.viewModelFields.isolationPointMethodId);
                $.post(r.configuration.url.getIsolationPointsStatesByMethod, {
                    id: n
                }, function(t) {
                    t.forEach(function(t) {
                        $(e).append(kendo.format('<option value="{0}">{1}</option>', t.Id, t.Title))
                    })
                }).then(function() {
                    var t = i.get(r.configuration.viewModelFields.testStateId);
                    t || (t = i.get(r.configuration.viewModelFields.deisolationPointStateId)),
                    $(e).val(t)
                })
            })
        }
        ,
        t.prototype.HasEmptyTestState = function() {
            var o = this
              , i = !1;
            return $(this.configuration.selectors.selectedForTestCheckbox + ":checked").each(function(t, e) {
                null !== $(e).parents("tr").find(o.configuration.selectors.testStateDropList).val() || (i = !0)
            }),
            i
        }
        ,
        t.prototype.onConfirmButtonClick = function() {
            var t, e, o = this, i = $(this.configuration.selectors.isolationPointsGrid).getKendoGrid(), n = "";
            e = this.configuration.pageInformation.isMarkInFinalPositionAction ? (t = this.getInFinalPositionData(i),
            this.configuration.url.markInFinalPosition) : (this.HasEmptyTestState() && (n += "[TEST_STATE_ID_ISSUE] Empty TestState found when SelectedForTest checkbox was checked. "),
            t = this.getTestPlanData(i),
            this.configuration.url.updateIsolationPointTestState),
            $.post(e, {
                points: t,
                msg: n
            }).then(function() {
                return assignLocation(o.configuration.url.returnUrl)
            })
        }
        ,
        t.prototype.getInFinalPositionData = function(n) {
            var r = this
              , a = [];
            return $(this.configuration.selectors.selectedForTestCheckbox).each(function(t, e) {
                var o = $(e).parents("tr")
                  , i = n.dataItem(o);
                a.push({
                    Id: i.get(r.configuration.viewModelFields.id),
                    IsFinalPosition: o.find(r.configuration.selectors.inFinalPositionCheckbox).prop("checked")
                })
            }),
            a
        }
        ,
        t.prototype.getTestPlanData = function(r) {
            var a = this
              , c = [];
            return $(this.configuration.selectors.selectedForTestCheckbox).each(function(t, e) {
                var o = $(e).parents("tr")
                  , i = r.dataItem(o)
                  , n = o.find(a.configuration.selectors.testStateDropList).val();
                c.push({
                    Id: i.get(a.configuration.viewModelFields.id),
                    TestStateId: $(e).prop("checked") ? n : null,
                    IsSelectedForTestPlan: $(e).prop("checked"),
                    IsFinalPosition: o.find(a.configuration.selectors.inFinalPositionCheckbox).prop("checked")
                })
            }),
            c
        }
        ,
        t.prototype.onSelectedForTestCheckboxChange = function(t) {
            var e = $(t.target)
              , o = e.prop("checked")
              , i = e.parents("tr")
              , n = i.find(this.configuration.selectors.testStateDropList);
            this.configuration.certificateInformation.isDftInPlaceState && this.configureInFinalPositionCheckbox(i, o);
            var r = $(this.configuration.selectors.isolationPointsGrid).getKendoGrid().dataItem(i);
            n.val(r.get(this.configuration.viewModelFields.deisolationPointStateId))
        }
        ,
        t.prototype.configureInFinalPositionCheckbox = function(t, e) {
            var o = t.find(this.configuration.selectors.inFinalPositionCheckbox);
            e ? o.removeAttr("disabled") : (o.prop("checked", !1),
            o.attr("disabled", "disabled"))
        }
        ,
        t.prototype.initializeConfiguration = function(t) {
            this.configuration = $.extend(!0, {
                selectors: {
                    isolationPointsGrid: "#IsolationPoints",
                    testStateDropList: ".test-state select",
                    selectedForTestCheckbox: ".selected-for-test .k-checkbox[name*='bound-checkbox']",
                    confirmButton: "[name=confirm]",
                    inFinalPositionCheckbox: ".in-final-position input[type=checkbox]"
                },
                viewModelFields: {
                    isolationPointMethodId: "IsolationPointMethod.Id",
                    testStateId: "TestStateId",
                    deisolationPointStateId: "DeisolationPointStateId",
                    isolationPointTypeCode: "IsolationPointType.Code",
                    id: "Id"
                },
                url: {
                    getIsolationPointsStatesByMethod: "GetIsolationPointStatesByMethod",
                    updateIsolationPointTestState: "UpdateIsolationPointTestState",
                    markInFinalPosition: "MarkInFinalPosition"
                },
                certificateInformation: {
                    isDftInPlaceState: !1
                },
                pageInformation: {
                    isMarkInFinalPositionAction: !1
                }
            }, t)
        }
        ,
        t
    }();
    t.PlanTestManageFunctions = e
}(ICC || (ICC = {})),
function(t) {
    var e = function() {
        function t(t) {
            var e = this;
            this.initializeConfiguration(t),
            this.initializeFunctions(),
            $(document).ready(function() {
                checkAndShowValidationContainer(),
                $(e.configuration.selectors.confirmButton).click(function() {
                    e.onConfirmButtonClick()
                }),
                $(e.configuration.selectors.isolationPointsGrid).on("change", e.configuration.selectors.unabletoImplementCheckbox, function(t) {
                    return e.onUnableToImplementCheckboxChange(t)
                }),
                $("body").on("input", e.configuration.selectors.lockoutNumberHeaderCheckbox, function(t) {
                    e.onLockoutNumberHeaderCheckboxChange(t)
                }),
                $("body").on("input", e.configuration.selectors.lockoutNumberCheckboxes, function(t) {
                    e.onLockoutNumberCheckboxChange(t)
                })
            })
        }
        return t.prototype.onGridDataBound = function(n) {
            var r = this;
            $(r.configuration.selectors.confirmPositionDropdownList).each(function(t, e) {
                var o = $(e).parents("tr")
                  , i = $(r.configuration.selectors.isolationPointsGrid).getKendoGrid().dataItem(o);
                $.post(r.configuration.url.getAvailableIsolationPointStates, {
                    isolationPointId: i.get(r.configuration.viewModelFields.id),
                    useTestState: n
                }, function(t) {
                    t.forEach(function(t) {
                        $(e).append(kendo.format('<option data-is-isolated-state="{0}" value="{1}">{2}</option>', t.IsIsolatedState, t.Id, t.Title))
                    })
                })
            })
        }
        ,
        t.prototype.isNecessaryStateSelected = function(t) {
            return !1
        }
        ,
        t.prototype.onConfirmButtonClick = function() {
            var t = this
              , e = this.checkAllUtiReasonFilled();
            new Core.ShowValidation(this.configuration.validation.notFilledReasonMessage,!e);
            if (e) {
                var o = this.getUpdatePointPositionWarningMessages();
                o.length ? this.getConfirmationDialog(o).showConfirmation().then(function() {
                    t.saveDataAndSubmitForm()
                }) : this.saveDataAndSubmitForm()
            }
        }
        ,
        t.prototype.saveDataAndSubmitForm = function() {
            this.saveData(),
            $("form").submit()
        }
        ,
        t.prototype.getConfirmationDialog = function(t) {
            var e = "<ul>".concat(t.join(""), "<ul>");
            return new Common.ConfirmationDialog(this.configuration.validation.warningDialogTitle,e,"#confirmationTemplate",{
                buttons: [{
                    text: this.configuration.validation.warningDialogConfirmButton,
                    selector: ".confirm_yes"
                }],
                cssClassNames: {
                    confirmationDialog: "isolation-point-warning"
                },
                template: {
                    width: "550px"
                }
            })
        }
        ,
        t.prototype.checkAllUtiReasonFilled = function() {
            var o = this
              , i = !0;
            return $(o.configuration.selectors.unableToImplementCheckedCheckbox).each(function(t, e) {
                !!$(e).parents("tr").find(o.configuration.selectors.reasonInput).first().val().trim() || (i = !1)
            }),
            i
        }
        ,
        t.prototype.getUpdatePointPositionWarningMessages = function() {
            var c = this
              , s = this
              , l = [];
            return $(s.configuration.selectors.confirmPositionNotDisabledDropdownList).each(function(t, e) {
                var o = $(s.configuration.selectors.isolationPointsGrid).getKendoGrid().dataItem($(e).closest("tr"));
                if (!s.isNecessaryStateSelected(e)) {
                    var i = c.configuration.certificateInformation.isInDeisolationInProgressState || c.configuration.certificateInformation.isInDftInProgressState || c.configuration.certificateInformation.isInEpiDeisolationInProgressState ? s.configuration.validation.isolationWarningMessageFormat : s.configuration.validation.deisolationWarningMessageFormat
                      , n = o.get(s.configuration.viewModelFields.isolationPointIndex)
                      , r = o.get(s.configuration.viewModelFields.tagNumber)
                      , a = o.get(s.configuration.viewModelFields.description);
                    l.push(kendo.format(i, n, r, a, s.configuration.certificateInformation.localizedState))
                }
            }),
            l
        }
        ,
        t.prototype.onUnableToImplementCheckboxChange = function(t) {
            var e = $(t.currentTarget).parents("tr")
              , o = e.find(this.configuration.selectors.reasonInput)
              , i = e.find(this.configuration.selectors.confirmPositionDropdownList);
            $(t.currentTarget).prop("checked") ? (o.removeAttr("disabled"),
            i.prop("disabled", "disabled")) : (i.removeAttr("disabled"),
            o.prop("disabled", "disabled"))
        }
        ,
        t.prototype.saveData = function() {
            var t = $(this.configuration.selectors.isolationPointsGrid).getKendoGrid()
              , e = this.getAbleToImplementPointsData(t);
            $.merge(e, this.getUnableToImplementPointsData(t)),
            $(this.configuration.selectors.isolationPointsJson).val(JSON.stringify(e))
        }
        ,
        t.prototype.getAbleToImplementPointsData = function(l) {
            var d = this
              , u = [];
            return $(d.configuration.selectors.unableToImplementNotCheckedCheckbox).each(function(t, e) {
                var o = $(e).closest("tr")
                  , i = o.find(d.configuration.selectors.confirmPositionDropdownList)
                  , n = i.val()
                  , r = d.getProcessedInputValue(o.find(d.configuration.selectors.lockNumberInput))
                  , a = d.getProcessedInputValue(o.find(d.configuration.selectors.lockoutNumberInput))
                  , c = l.dataItem(o)
                  , s = i.find(":selected").data(d.configuration.dataAttributes.isIsolatedState);
                u.push({
                    Id: c.get(d.configuration.viewModelFields.id),
                    CurrentIsolationPointStateId: n || c.get(d.configuration.viewModelFields.currentStateId) || null,
                    LockNumber: r,
                    LockoutNumber: a,
                    IsInIsolatedState: void 0 === s ? c.get(d.configuration.viewModelFields.isInIsolatedState) : s
                })
            }),
            u
        }
        ,
        t.prototype.getUnableToImplementPointsData = function(a) {
            var c = this
              , s = [];
            return $(c.configuration.selectors.unableToImplementCheckedCheckbox).each(function(t, e) {
                var o = $(e).closest("tr")
                  , i = c.getProcessedInputValue(o.find(c.configuration.selectors.lockNumberInput))
                  , n = c.getProcessedInputValue(o.find(c.configuration.selectors.lockoutNumberInput))
                  , r = c.getProcessedInputValue(o.find(c.configuration.selectors.reasonInput));
                s.push({
                    Id: a.dataItem(o).get(c.configuration.viewModelFields.id),
                    LockNumber: i,
                    LockoutNumber: n,
                    UnableToImplementReason: r,
                    IsUnableToImplement: !0
                })
            }),
            s
        }
        ,
        t.prototype.getProcessedInputValue = function(t) {
            return t.val().trim() || null
        }
        ,
        t.prototype.initializeFunctions = function() {
            var n = this;
            this.configuration.certificateInformation.isInDftInProgressState ? this.isNecessaryStateSelected = function(t) {
                var e = $(t).find(":selected");
                return "" === e.val() || !e.data(n.configuration.dataAttributes.isIsolatedState)
            }
            : this.configuration.certificateInformation.isInDftReisolationInProgressState ? this.isNecessaryStateSelected = function(t) {
                var e = $(t).find(":selected");
                return "" === e.val() || e.data(n.configuration.dataAttributes.isIsolatedState)
            }
            : this.isNecessaryStateSelected = function(t) {
                var e = $(t).find(":selected")
                  , o = e.data(n.configuration.dataAttributes.isIsolatedState)
                  , i = n.configuration.certificateInformation.isInDeisolationInProgressState || n.configuration.certificateInformation.isInEpiDeisolationInProgressState ? !o : o;
                return !e.val() || i
            }
        }
        ,
        t.prototype.onLockoutNumberHeaderCheckboxChange = function(t) {
            var e = $(t.currentTarget);
            if (e.prop("checked")) {
                this.initializeLockoutClipboard();
                var o = $(this.configuration.selectors.lockoutNumberNotCheckedCheckboxes);
                this.lockoutNumberClipboard && (o.prop("checked", e.prop("checked")),
                o.trigger("input"))
            } else
                this.lockoutNumberClipboard = null
        }
        ,
        t.prototype.onLockoutNumberCheckboxChange = function(t) {
            var e = $(t.currentTarget)
              , o = e.parent().siblings("input");
            if (e.prop("checked")) {
                var i = o.val();
                i.length ? this.lockoutNumberClipboard = i : o.val(this.lockoutNumberClipboard)
            } else
                o.val(null)
        }
        ,
        t.prototype.initializeLockoutClipboard = function() {
            var i = this;
            $(this.configuration.selectors.lockoutNumberNotCheckedCheckboxes).each(function(t, e) {
                var o = $(e).parent().siblings("input").val();
                if ((i.lockoutNumberClipboard = o).length)
                    return !1
            })
        }
        ,
        t.prototype.initializeConfiguration = function(t) {
            this.configuration = $.extend(!0, {
                selectors: {
                    isolationPointsGrid: "#IsolationPoints",
                    isolationPointsJson: "#IsolationPointsJson",
                    confirmButton: "[name=confirm]",
                    confirmPositionDropdownList: ".confirm-position select",
                    lockoutNumberInput: ".lockout-number input",
                    unableToImplementNotCheckedCheckbox: ".uti input[type=checkbox]:not(:checked)",
                    unableToImplementCheckedCheckbox: ".uti input[type=checkbox]:checked",
                    lockNumberInput: ".lock-number input",
                    reasonInput: ".reason input",
                    unabletoImplementCheckbox: ".uti input[type=checkbox]",
                    confirmPositionNotDisabledDropdownList: ".confirm-position select:not([disabled])",
                    lockoutNumberNotCheckedCheckboxes: ".lockout-number input[type=checkbox]:not(:checked)",
                    lockoutNumberHeaderCheckbox: "#IsolationPoints .lockout-number-header input[type=checkbox]",
                    lockoutNumberCheckboxes: "#IsolationPoints .lockout-number input[type=checkbox]"
                },
                viewModelFields: {
                    id: "Id",
                    isolationPointMethodId: "IsolationPointMethod.Id",
                    isolatedStateId: "IsolationPointState.Id",
                    isolationPointIndex: "PointIndex",
                    tagNumber: "TagNumber",
                    description: "Description",
                    isolatedStateTitle: "IsolationPointState.Title",
                    currentStateId: "CurrentState.Id",
                    deisolationStateId: "DeisolationPointStateId",
                    isInIsolatedState: "IsInIsolatedState"
                },
                certificateInformation: {
                    isInDeisolationInProgressState: !1,
                    isInDftInProgressState: !1,
                    isInDftReisolationInProgressState: !1,
                    isInEpiDeisolationInProgressState: !1,
                    localizedState: ""
                },
                url: {
                    getAvailableIsolationPointStates: "GetIsolationPointStatesByMethod",
                    updatePointPosition: "UpdatePointPosition"
                },
                dataAttributes: {
                    isIsolatedState: "isIsolatedState"
                },
                validation: {
                    deisolationWarningMessageFormat: "",
                    isolationWarningMessageFormat: "",
                    warningDialogTitle: "Warning",
                    warningDialogConfirmButton: "Confirm",
                    notFilledReasonMessage: ""
                },
                pageInformation: {
                    returnUrl: "/"
                }
            }, t)
        }
        ,
        t
    }();
    t.UpdatePointPosition = e
}(ICC || (ICC = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), Common;
!function(t) {
    var e = function(o) {
        function t(t) {
            var e = o.call(this, t) || this;
            return $(document).ready(function() {
                e.confirmReferencesFromAnotherInstallationAndSite(),
                $(e.configuration.selectors.deleteReference).click(function() {
                    e.deleteReferenceFromGrid()
                }),
                $(e.configuration.selectors.addReferencesName).click(function() {
                    e.saveReferencedCertificateIdsToSessionStorage()
                }),
                $("body").on("click", e.configuration.selectors.confirmSelector, function() {
                    e.saveReferences(e.referencedCertificatesIds.join(","))
                }),
                onGridRadioButtonChange(e.configuration.selectors.certificateRadioButtonName, e.configuration.selectors.deleteReference)
            }),
            e
        }
        return __extends(t, o),
        t.prototype.initializeConfiguration = function(t) {
            o.prototype.initializeConfiguration.apply(this, arguments),
            this.configuration = $.extend(!0, {
                selectors: {
                    addReferencesName: "#addReferencesButton",
                    deleteReference: "#deleteReferenceButton",
                    confirmSelector: "[name=confirmButton]",
                    validationSummary: "#validationSummaryContainer",
                    certificateRadioButtonName: "certificateRadioButton"
                }
            }, this.configuration)
        }
        ,
        t.prototype.initializeReferences = function() {
            var t = (sessionStorage.getItem(this.referencesSessionStorageName) || "").split(",").map(Number);
            this.validateDuplicates(t);
            var e = this.getCertificates(t);
            e = this.validateReceivedCertificateViewModels(e),
            e = this.validateCertificateState(e),
            e = this.validateUserRoleWithStates(e),
            this.loadReferenceGrid(e),
            this.showValidation()
        }
        ,
        t.prototype.removeReferencesFromAnotherInstallation = function(e) {
            this.receivedReferences = this.receivedReferences.filter(function(t) {
                return e.indexOf(t) < 0
            })
        }
        ,
        t.prototype.deleteReferenceFromGrid = function() {
            this.clearValidationMessage();
            var t = $(this.configuration.selectors.grid).data("kendoGrid")
              , e = t.tbody.find("input[name=".concat(this.configuration.selectors.certificateRadioButtonName, "]:checked"))
              , o = e.closest("tr")
              , i = Number(e.attr("id"))
              , n = t.dataItem(o);
            if (n && !this.isCertificateStateAllowed(n.CertificateState))
                e.prop("checked", !1),
                this.addValidationMessage(this.configuration.errors.cannotRemove + kendo.toString(n.Id, this.configuration.constants.kendoIdFormat)),
                this.showValidation();
            else {
                var r = i;
                this.referencedCertificatesIds = this.referencedCertificatesIds.filter(function(t) {
                    return t !== r
                }),
                null != o && t.removeRow(o)
            }
            onGridRadioButtonChange(this.configuration.selectors.certificateRadioButtonName, this.configuration.selectors.deleteReference)
        }
        ,
        t.prototype.saveReferencedCertificateIdsToSessionStorage = function() {
            sessionStorage.setItem(this.referencesSessionStorageName, this.referencedCertificatesIds.join(","))
        }
        ,
        t.prototype.getCertificates = function(t) {
            var e;
            return $.post({
                url: this.configuration.url.getReferencedCertificates,
                data: {
                    referencedCertificatesIdsString: t.concat(this.receivedReferences).join(","),
                    mainCertificateId: this.configuration.reference.mainCertificateId
                },
                async: !1,
                success: function(t) {
                    e = t
                }
            }),
            JSON.parse(e || "[]")
        }
        ,
        t.prototype.validateDuplicates = function(t) {
            var o = !1;
            this.receivedReferences = this.receivedReferences.filter(function(e) {
                return !t.some(function(t) {
                    return t === e
                }) || !(o = !0)
            }),
            o && this.addValidationMessage(this.configuration.errors.duplicateCertificate)
        }
        ,
        t.prototype.validateReceivedCertificateViewModels = function(t) {
            return t
        }
        ,
        t.prototype.validateCertificateState = function(t) {
            var o = this
              , i = []
              , e = t.filter(function(e) {
                var t = o.configuration.reference.cameFromSearch && o.receivedReferences.some(function(t) {
                    return t === e.Id
                }) && !o.isCertificateStateAllowed(e.CertificateState);
                return t && i.push(kendo.toString(e.DisplayId, o.configuration.constants.kendoIdFormat)),
                !t
            });
            return 0 < i.length && this.addValidationMessage(this.configuration.errors.notValidState + i.join(", ")),
            e
        }
        ,
        t.prototype.validateUserRoleWithStates = function(t) {
            var o, i = this, e = this.configuration.reference.notAllowedUserRolesWithCertificateStates, n = this.configuration.reference.currentRole;
            if (e && n && (o = e[n]),
            this.configuration.reference.cameFromSearch && o) {
                var r = []
                  , a = t.filter(function(e) {
                    return -1 === $.inArray(e.CertificateState, o) || !i.receivedReferences.some(function(t) {
                        return t === e.Id
                    }) || (r.push(kendo.toString(e.DisplayId, i.configuration.constants.kendoIdFormat)),
                    !1)
                });
                return 0 < r.length && this.addValidationMessage(this.configuration.errors.unsuitableRoleForReferencing + r.join(", ")),
                a
            }
            return t
        }
        ,
        t.prototype.loadReferenceGrid = function(t) {
            $(this.configuration.selectors.initialDataHidden).val(JSON.stringify(t)),
            this.loadInitialData(),
            this.referencedCertificatesIds = t.map(function(t) {
                return t.Id
            })
        }
        ,
        t.prototype.isCertificateStateAllowed = function(e) {
            return 0 === this.configuration.reference.notAllowedCertificateStates.length && this.configuration.reference.allowedCertificateStates.some(function(t) {
                return t === e
            }) || 0 === this.configuration.reference.allowedCertificateStates.length && this.configuration.reference.notAllowedCertificateStates.every(function(t) {
                return t !== e
            })
        }
        ,
        t
    }(t.ManageReferences);
    t.IsolationReferences = e
}(Common || (Common = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), ICC, Common, ICC, CC, Reports, Common;
!function(t) {
    var e = function(e) {
        function t(t) {
            return e.call(this, t) || this
        }
        return __extends(t, e),
        t.prototype.validateReceivedCertificateViewModels = function(t) {
            var o = this
              , i = []
              , e = t.filter(function(t) {
                var e = t.IsolationTypeId === o.configuration.reference.fullIsolationTypeCode;
                return e || i.push(kendo.toString(t.DisplayId, o.configuration.constants.kendoIdFormat)),
                e
            });
            return 0 < i.length && this.addValidationMessage(this.configuration.errors.withoutFullIsolation + i.join(", ")),
            e
        }
        ,
        t
    }(Common.IsolationReferences);
    t.WccIsolationReferences = e
}(ICC || (ICC = {})),
function(t) {
    var e = function() {
        function t(t) {
            void 0 === t && (t = null);
            var e = this;
            this.config = $.extend(!0, t, {
                modalSelector: "#positionIconTitleTemplate",
                newContainerId: "positionIconInformationMenu",
                default: {
                    width: "400px",
                    maxHeight: "300px",
                    offsetX: 25,
                    offsetY: 25
                },
                url: {
                    getCertificates: "/Data/GetIsolationCertificatesByWorkCertificateId/"
                }
            }),
            this.modalWindow = $("<div id='".concat(this.config.newContainerId, "'>")).appendTo($("body")).kendoWindow({
                title: !1,
                width: this.config.defaultWidth,
                visible: !1,
                resizable: !1,
                scrollable: !0
            }).data("kendoWindow"),
            this.modalWindow.element.css({
                maxHeight: this.config.default.maxHeight
            }),
            this.modalWindow.setOptions({
                draggable: {
                    containment: "#result",
                    dragHandle: ".k-window-content"
                }
            }),
            this.timerHandler = -1,
            this.modalWindow.element.on("mouseenter", function() {
                clearTimeout(e.timerHandler),
                e.timerHandler = -1
            }).on("mouseleave", function() {
                e.close()
            })
        }
        return t.prototype.open = function(t, i, n) {
            var r = this;
            if (void 0 === i && (i = null),
            this.lastCertificateId !== t) {
                this.lastCertificateId = t;
                var e = $(window);
                i = $.extend(!0, {
                    y: e.height() / 2 - 250,
                    x: e.width() - 500
                }, i),
                $.get({
                    url: this.config.url.getCertificates,
                    data: {
                        id: t
                    }
                }).then(function(t) {
                    var e = kendo.template($(r.config.modalSelector).html())({
                        references: t.Value,
                        workCertificate: t.Key,
                        isSecondaryArea: n
                    })
                      , o = function() {
                        r.modalWindow.element.closest(".k-window").css({
                            top: i.y + r.config.default.offsetX,
                            left: i.x + r.config.default.offsetY
                        }),
                        r.modalWindow.content(e).open()
                    };
                    r.modalWindow.element.is(":hidden") ? o() : (clearTimeout(r.timerHandler),
                    r.timerHandler = -1,
                    r.modalWindow.one("deactivate", o),
                    r.modalWindow.close())
                })
            }
        }
        ,
        t.prototype.close = function() {
            var t = this;
            clearTimeout(this.timerHandler),
            this.timerHandler = window.setTimeout(function() {
                t.forceClose()
            }, this.config.timer.timeToClose)
        }
        ,
        t.prototype.forceClose = function() {
            clearTimeout(this.timerHandler),
            this.modalWindow.close(),
            this.timerHandler = -1,
            this.lastCertificateId = -1
        }
        ,
        t
    }();
    t.PositionIconInformation = e
}(Common || (Common = {})),
function(t) {
    var e = function() {
        function t(t) {
            var e = this;
            $(t.selectors.selectAllPoints).change(function() {
                e.changeStateAllCheckboxes()
            }),
            $(t.selectors.selectorsToTrackChanges).change(function() {
                e.changeStatePrintTagsBtn()
            }),
            $(t.selectors.printTagsBtn).click(function() {
                e.printIsolationPointTags()
            }),
            $(t.selectors.printListBtn).click(function() {
                e.printIsolationPointList()
            }),
            this.initializeConfiguration(t),
            initializeHeaderCheckBoxChangeEvent()
        }
        return t.prototype.printIsolationPointTags = function() {
            var o = $(".k-grid").getKendoGrid()
              , t = $(".k-checkbox:checked").closest("tbody tr").toArray().reduce(function(t, e) {
                return t.push(o.dataItem(e).Id),
                t
            }, []);
            assignLocation(this.configuration.urls.printTagsUrl + JSON.stringify(t))
        }
        ,
        t.prototype.changeStatePrintTagsBtn = function() {
            $(this.configuration.selectors.printTagsBtn).prop("disabled", !$(this.configuration.selectors.chosenPoints).is(":checked"))
        }
        ,
        t.prototype.changeStateAllCheckboxes = function() {
            $(this.configuration.selectors.chosenPoints).prop("checked", $(this.configuration.selectors.selectAllPoints).is(":checked"))
        }
        ,
        t.prototype.printIsolationPointList = function() {
            $("<form method='post' action='" + this.configuration.urls.printListUrl + "'>\n                <input name='isolationCertificateId' value='" + this.configuration.data.certificateId + "'/>\n                <input name='isolationPointTypeId' value='" + this.configuration.data.isolationPointTypeId + "'/>\n               </form>").appendTo($("body")).submit().remove()
        }
        ,
        t.prototype.initializeConfiguration = function(t) {
            this.configuration = t
        }
        ,
        t
    }();
    t.PrintIsolationPoints = e
}(ICC || (ICC = {})),
function(t) {
    var e = function() {};
    t.PrintCertificateField = e;
    var o = function() {
        function t(t, e, o, i, n, r, a, c, s, l, d) {
            var u = this;
            this.certificateId = t,
            this.allItemsSelector = e,
            this.printOptionCheckBoxSelector = o,
            this.getPrintCertificateUrl = i,
            this.printButtonSelector = n,
            this.certificateCheckboxSelector = r,
            this.fieldsConfiguration = a,
            this.isPrintCC = c,
            this.isolationReferenceType = s,
            this.systemOverrideReferenceType = l,
            this.checkedCertificates = d,
            $(this.allItemsSelector).click(function() {
                var e = $(u.allItemsSelector).is(":checked");
                $(u.printOptionCheckBoxSelector).get().forEach(function(t) {
                    return $(t).prop("checked", e)
                })
            })
        }
        return t.prototype.initialize = function() {
            var e = this;
            $(document).on("click", this.printButtonSelector, function(t) {
                e.onPrintButtonClick(t)
            })
        }
        ,
        t.prototype.onPrintButtonClick = function(t) {
            var e = this.createFormData();
            this.submitPrintConfiguration(e)
        }
        ,
        t.prototype.submitPrintConfiguration = function(t) {
            var o = $("form[data-is-for-submit=true]");
            o.remove(),
            o = $("<form>", {
                action: this.getPrintCertificateUrl,
                method: "post",
                "data-is-for-submit": !0
            }),
            $.each(t, function(t, e) {
                $("<input>").attr({
                    type: "hidden",
                    name: t,
                    value: kendo.stringify(e)
                }).appendTo(o)
            }),
            o.appendTo("body").submit()
        }
        ,
        t.prototype.createFormData = function() {
            var e = this
              , t = this.getCheckBoxesData()
              , o = {}
              , i = Object.keys(this.checkedCertificates)
              , n = []
              , r = []
              , a = [];
            return i.forEach(function(t) {
                e.checkedCertificates[t] === e.isolationReferenceType ? n.push(Number(t)) : e.checkedCertificates[t] === e.systemOverrideReferenceType ? r.push(Number(t)) : a.push(Number(t))
            }),
            t.forEach(function(t) {
                return o[t.fieldName] = t.fieldValue
            }),
            o.IsolationReferenceIdsJson = n,
            o.SystemOverrideReferenceIdsJson = r,
            o.CrossReferenceIdsJson = a,
            o.CertificateId = this.certificateId,
            o.isPrintCC = this.isPrintCC,
            o
        }
        ,
        t.prototype.getCheckBoxesData = function() {
            return this.fieldsConfiguration.map(function(t) {
                return {
                    fieldName: t.fieldName,
                    fieldValue: $(t.fieldSelector).prop("checked")
                }
            })
        }
        ,
        t
    }();
    t.CertificatesPrintService = o
}(CC || (CC = {})),
function(t) {
    var e = function() {
        function t(t) {
            var e = this;
            this.configuration = t,
            $(document).ready(function() {
                e.initializeConfiguration(t),
                $("".concat(e.configuration.selectors.auditTypeDropDown, ",").concat(e.configuration.selectors.commentTypeDropDown)).change(function() {
                    return e.onTypeDropDownChange()
                })
            })
        }
        return t.prototype.processFilterData = function(t) {
            var e = this
              , o = t.filter(function(t) {
                return t.field === e.configuration.filters.auditState
            })[0];
            if (!o || o.value === this.configuration.filters.auditorCommentType)
                return t.filter(function(t) {
                    return t.value !== e.configuration.filters.auditorCommentType
                });
            var i = function(t) {
                this.field = t,
                this.operator = "neq",
                this.value = null
            }
              , n = [];
            o.value === this.configuration.auditStateNames.reviewed ? n.push(new i(this.configuration.filters.reviewCommentType)) : o.value === this.configuration.auditStateNames.managementReviewed && n.push(new i(this.configuration.filters.managementReviewCommentType));
            var r = t.filter(function(t) {
                return t.field !== e.configuration.filters.auditState
            });
            return 0 === n.length ? r : [{
                logic: "and",
                filters: [{
                    logic: "and",
                    filters: r
                }, {
                    logic: "or",
                    filters: n
                }]
            }]
        }
        ,
        t.prototype.onTypeDropDownChange = function() {
            var e = $(this.configuration.selectors.sectionDropDown).getKendoDropDownList();
            $(this.configuration.selectors.commentTypeDropDown).getKendoDropDownList().value() === this.configuration.filters.auditorCommentType ? $.post({
                url: this.configuration.url.getAllSections,
                data: {
                    certificateType: $(this.configuration.selectors.auditTypeDropDown).val()
                }
            }).then(function(t) {
                e.dataSource.data(t.Data)
            }) : e.dataSource.data([])
        }
        ,
        t.prototype.initializeConfiguration = function(t) {
            this.configuration = $.extend(!0, {
                selectors: {
                    auditTypeDropDown: "#AuditType",
                    commentTypeDropDown: "#CommentType",
                    sectionDropDown: "#SectionId"
                },
                filters: {
                    auditState: "Audit.State",
                    auditorCommentType: "Auditor",
                    reviewCommentType: "Audit.Review",
                    managementReviewCommentType: "Audit.ManagementReview"
                },
                auditStateNames: {
                    reviewed: "Reviewed",
                    managementReviewed: "ManagementReviewed"
                },
                url: {
                    getAllSections: "/Data/GetAllSections"
                }
            }, t)
        }
        ,
        t
    }();
    t.AuditComments = e
}(Reports || (Reports = {})),
function(t) {
    var e = function() {
        function t(t, e) {
            this.isReorderInitialized = !1,
            this.isDataOrderChanged = !1,
            this.initializeConfiguration(e),
            this.kendoGridSelector = t
        }
        return Object.defineProperty(t.prototype, "grid", {
            get: function() {
                return this._kendoGrid || (this._kendoGrid = $(this.kendoGridSelector).data("kendoGrid"))
            },
            enumerable: !1,
            configurable: !0
        }),
        t.prototype.updateOrderForGridData = function() {
            var o = this
              , t = $("input[type=radio]:checked").closest("tr").data("uid")
              , i = 0
              , e = this.grid.tbody.find("tr").map(function(t, e) {
                return o.grid.dataSource.getByUid($(e).data("uid"))
            });
            e.each(function(t, e) {
                return e[o.configuration.orderFieldName] = ++i
            }),
            this.grid.dataSource.data(e),
            $("tr[data-uid=".concat(t, "] input[type=radio]")).attr("checked", "checked"),
            this.isDataOrderChanged = !1
        }
        ,
        t.prototype.initializeReorder = function() {
            this.isReorderInitialized || ($(this.kendoGridSelector).data(this.configuration.isDragAndDropRequiredDataAttribute) && this.initializeDragAndDropReorder(),
            this.configuration.isButtonReorderRequired && this.initializeButtonReorder(),
            this.isReorderInitialized = !0)
        }
        ,
        t.prototype.initializeDragAndDropReorder = function() {
            var e = this;
            e.grid.table.kendoSortable({
                filter: ">tbody >tr",
                hint: e.configuration.generateHintOnDragAndDrop,
                cursor: "move",
                placeholder: e.configuration.generatePlaceholderOnDragAndDrop(e.grid.columns.length),
                autoScroll: !0,
                change: function(t) {
                    e.configuration.rowNumberCellSelector && e.updateRowNumbers(t),
                    e.configuration.onDragAndDropReorder(t)
                }
            })
        }
        ,
        t.prototype.updateRowNumbers = function(t) {
            var e = "".concat(this.kendoGridSelector, " ").concat(this.configuration.rowNumberCellSelector, ":eq({0}),").concat(this.configuration.rowNumberCellSelector, ":gt({0}):lt({1})")
              , o = Math.min(t.oldIndex, t.newIndex)
              , i = Math.max(t.oldIndex, t.newIndex);
            $(kendo.format(e, o, i)).each(function(t, e) {
                e.innerText = String(1 + o++)
            }),
            this.isDataOrderChanged = !0
        }
        ,
        t.prototype.initializeButtonReorder = function() {
            var t = this;
            $(this.configuration.upButtonSelector).click(function() {
                t.moveRow(!0)
            }),
            $(this.configuration.downButtonSelector).click(function() {
                t.moveRow(!1)
            })
        }
        ,
        t.prototype.moveRow = function(t) {
            this.isDataOrderChanged && this.updateOrderForGridData();
            var e = $("input[type=radio]:checked")
              , o = e.closest("tr")
              , i = this.grid.dataSource.getByUid(o.data("uid"))
              , n = t ? o.prev() : o.next();
            if (0 !== n.length) {
                var r = this.grid.dataSource.getByUid(n.data("uid"))
                  , a = i.get(this.configuration.orderFieldName)
                  , c = r.get(this.configuration.orderFieldName);
                i.set(this.configuration.orderFieldName, c),
                r.set(this.configuration.orderFieldName, a),
                $("#".concat(e.attr("id"))).attr("checked", "checked")
            }
        }
        ,
        t.prototype.initializeConfiguration = function(t) {
            var e = new o;
            this.configuration = $.extend(!0, e, t)
        }
        ,
        t
    }();
    t.KendoGridRowReorder = e;
    var o = function() {
        function t() {
            this.upButtonSelector = "#up",
            this.downButtonSelector = "#down",
            this.orderFieldName = "OrderId",
            this.isDragAndDropRequiredDataAttribute = "dragAndDropReorder",
            this.isButtonReorderRequired = !0
        }
        return t.prototype.generateHintOnDragAndDrop = function(t) {
            var e = $("<table style='width: 600px;' class='k-grid k-widget'></table>");
            return e.append(t.clone()),
            e.css("opacity", .7),
            e
        }
        ,
        t.prototype.generatePlaceholderOnDragAndDrop = function(t) {
            return $("<tr class='reorder-placeholder'><td colspan='".concat(t, "'></td></tr>"))
        }
        ,
        t.prototype.onDragAndDropReorder = function(t) {}
        ,
        t
    }();
    t.ReorderConfiguration = o
}(Common || (Common = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), SOC, SOC;
!function(t) {
    var e = function(B) {
        function t(t, e, o, i, n, r, a, c, s, l, d, u, h, f, p, m, g, S, v, C, y, I, k, b, x, w, P) {
            var D = B.call(this, null, null, null, null, null, null, null, null, null, t, null, null, null) || this;
            D.isUpdateMode = !1,
            D.isLoadingDataFromObject = !1,
            D.rowForEditUid = null;
            return D.kendoGridRowReorder = new Common.KendoGridRowReorder(S,{
                rowNumberCellSelector: ".override-index"
            }),
            D.tagNumberSelector = a,
            D.descriptionSelector = c,
            D.commentSelector = s,
            D.additionalValueAppliedSelector = l,
            D.addOverrideBtnSelector = h,
            D.overrideIndexLabelSelector = g,
            D.overridesGridSelector = S,
            D.updateOverrideBtnSelector = f,
            D.editOverrideBtnSelector = p,
            D.removeOverrideBtnSelector = m,
            D.overrideTypeSelector = e,
            D.overrideMethodSelector = o,
            D.appliedStateSelector = i,
            D.removedStateSelector = n,
            D.currentStateSelector = r,
            D.getOverrideMethodsByTypeUrl = d,
            D.getOverrideStatesByMethodUrl = u,
            D.disabledBeforeDataBoundBtnsSelector = v,
            D.overrideRadioBtnSelector = C,
            D.cancelOverrideBtnSelector = y,
            D.certificateId = I,
            D.overridesJsonSelector = k,
            D.newText = b,
            D.orderIdFieldName = x,
            D.overrideFrozenStateId = w,
            D.overrideForcedStateId = P,
            $(D.overrideTypeSelector).change(function() {
                D.updateOverrideMethods()
            }),
            $(D.overrideMethodSelector).change(function() {
                D.updateOverrideStates()
            }),
            $(D.appliedStateSelector).change(function() {
                D.updateAdditionalValue(D.appliedStateSelector, D.additionalValueAppliedSelector),
                D.selectRemovedStateWhenSelectedAppliedState()
            }),
            $(D.updateOverrideBtnSelector).click(function() {
                D.updateOverride()
            }),
            $(D.editOverrideBtnSelector).click(function() {
                D.editOverrideBtnClick()
            }),
            $(D.removeOverrideBtnSelector).click(function() {
                D.removeOverride()
            }),
            $(D.cancelOverrideBtnSelector).click(function() {
                D.onCancelBtnClick()
            }),
            D.hideAdditionalValueTextBox(D.additionalValueAppliedSelector),
            D
        }
        return __extends(t, B),
        t.prototype.onBoundOverrideMethod = function() {
            this.isLoadingDataFromObject && $(this.overrideMethodSelector).data("kendoDropDownList").value(this.tempOverrideObject.OverrideMethodId)
        }
        ,
        t.prototype.selectRemovedStateWhenSelectedAppliedState = function() {
            if (!this.isUpdateMode) {
                var o = $(this.appliedStateSelector).data("kendoDropDownList").select()
                  , t = $(this.removedStateSelector).data("kendoDropDownList")
                  , i = 1;
                t.dataSource.data().forEach(function(t, e) {
                    e + 1 == o || (i = e + 1)
                }),
                t.select(0 < o ? i : 0)
            }
        }
        ,
        t.prototype.selectOverride = function(t) {
            $("".concat(this.editOverrideBtnSelector, ",").concat(this.removeOverrideBtnSelector)).show()
        }
        ,
        t.prototype.onCancelBtnClick = function() {
            this.isUpdateMode = !1,
            $(this.addOverrideBtnSelector).show(),
            $(this.editOverrideBtnSelector).hide(),
            $(this.removeOverrideBtnSelector).hide(),
            $(this.updateOverrideBtnSelector).hide(),
            $(this.cancelOverrideBtnSelector).hide(),
            this.rowForEditUid = null,
            this.resetInputs()
        }
        ,
        t.prototype.initializeDataInGrid = function() {
            var t = $(this.overridesJsonSelector).val();
            if (t) {
                var e = JSON.parse(t)
                  , o = new kendo.data.DataSource({
                    data: e,
                    sort: {
                        field: this.orderIdFieldName,
                        dir: "asc"
                    }
                });
                $(this.overridesGridSelector).data("kendoGrid").setDataSource(o)
            }
        }
        ,
        t.prototype.updateOverrideMethods = function() {
            var e = this
              , t = $(this.overrideTypeSelector).val();
            $.ajax({
                method: "GET",
                url: this.getOverrideMethodsByTypeUrl + "?overrideTypeId=" + t,
                success: function(t) {
                    fillDropDown(e.overrideMethodSelector, t),
                    e.onBoundOverrideMethod(),
                    e.updateOverrideStates()
                }
            }),
            this.hideAdditionalValueTextBox(this.additionalValueAppliedSelector)
        }
        ,
        t.prototype.updateOverrideStates = function() {
            var e = this
              , t = $(this.overrideMethodSelector).val();
            $.ajax({
                method: "GET",
                url: this.getOverrideStatesByMethodUrl + "?overrideMethodId=" + t,
                success: function(t) {
                    $(e.appliedStateSelector).data("kendoDropDownList").value(null),
                    $(e.removedStateSelector).data("kendoDropDownList").value(null),
                    fillDropDown(e.appliedStateSelector, t.filter(function(t) {
                        return 0 === t.Type || 1 === t.Type
                    })),
                    fillDropDown(e.removedStateSelector, t.filter(function(t) {
                        return 0 === t.Type || 2 === t.Type
                    })),
                    e.onBoundOverrideStates(),
                    e.updateAdditionalValue(e.appliedStateSelector, e.additionalValueAppliedSelector)
                }
            })
        }
        ,
        t.prototype.isFormValid = function() {
            var t = $('[data-role="validator"]').data("kendoValidator").validate();
            return this.markInvalidItems(),
            t
        }
        ,
        t.prototype.markInvalidItems = function() {
            var o = this;
            $(".k-valid").each(function(t, e) {
                o.setValidationState(e, !0)
            }),
            $(".k-invalid").each(function(t, e) {
                o.setValidationState(e, !1)
            })
        }
        ,
        t.prototype.addOverride = function() {
            if (this.isFormValid()) {
                this.kendoGridRowReorder.updateOrderForGridData();
                var t = $(this.overridesGridSelector).data("kendoGrid").dataSource
                  , e = this.getOverrideObjectFilledWithInputs();
                e.OrderId = this.GetMaxOverrideIndex() + 1,
                e.OverrideIndex = this.GetMaxOverrideIndex() + 1,
                e.SystemOverrideCertificateId = this.certificateId,
                t.add(e),
                this.resetInputs(),
                this.resetValidationStates(),
                this.hideAdditionalValueTextBox(this.additionalValueAppliedSelector)
            }
        }
        ,
        t.prototype.onBoundOverrideStates = function() {
            this.isLoadingDataFromObject && ($(this.appliedStateSelector).data("kendoDropDownList").value(this.tempOverrideObject.OverrideAppliedStateId),
            $(this.removedStateSelector).data("kendoDropDownList").value(this.tempOverrideObject.OverrideRemovedStateId),
            this.isLoadingDataFromObject = !1)
        }
        ,
        t.prototype.OverridesGridBound = function() {
            $(this.disabledBeforeDataBoundBtnsSelector).removeAttr("disabled"),
            this.kendoGridRowReorder.initializeReorder()
        }
        ,
        t.prototype.GetMaxOverrideIndex = function() {
            var t = $(this.overridesGridSelector).data("kendoGrid").dataSource.data().map(function(t) {
                return t.OverrideIndex
            });
            return 0 < t.length ? Math.max.apply(Math, t) : 0
        }
        ,
        t.prototype.acceptOverrideChanges = function() {
            this.kendoGridRowReorder.updateOrderForGridData();
            var t = $(this.overridesGridSelector).data("kendoGrid").dataSource.data().toJSON()
              , e = JSON.stringify(t);
            $(this.overridesJsonSelector).val(e),
            document.forms[0].submit()
        }
        ,
        t.prototype.loadObjectToInputs = function() {
            var t = this.getSelectedOverride();
            $(this.overrideIndexLabelSelector).html(t.OverrideIndex),
            $(this.tagNumberSelector).val(t.TagNumber),
            $(this.commentSelector).val(t.Comment),
            $(this.descriptionSelector).val(t.Description),
            this.tempOverrideObject = t,
            this.isLoadingDataFromObject = !0,
            $(this.overrideTypeSelector).data("kendoDropDownList").value(t.OverrideTypeId),
            $(this.currentStateSelector).data("kendoDropDownList").value(t.CurrentOverrideStateId),
            this.updateOverrideMethods(),
            $(this.additionalValueAppliedSelector).val(t.AdditionalValueAppliedState)
        }
        ,
        t.prototype.getSelectedOverride = function() {
            var t = $("[name=socoverride]:checked").closest("tr").data("uid");
            return $(this.overridesGridSelector).data("kendoGrid").dataSource.getByUid(t)
        }
        ,
        t.prototype.removeOverride = function() {
            this.kendoGridRowReorder.updateOrderForGridData();
            var t = this.getSelectedOverride();
            $(this.overridesGridSelector).data("kendoGrid").dataSource.remove(t),
            this.optimizeOrderId(),
            $(this.addOverrideBtnSelector).show(),
            $(this.editOverrideBtnSelector).hide(),
            $(this.removeOverrideBtnSelector).hide(),
            $(this.updateOverrideBtnSelector).hide(),
            $(this.cancelOverrideBtnSelector).hide()
        }
        ,
        t.prototype.editOverrideBtnClick = function() {
            this.isUpdateMode = !0,
            this.rowForEditUid = $("[name=socoverride]:checked").closest("tr").data("uid"),
            this.loadObjectToInputs(),
            $(this.overrideRadioBtnSelector).attr("disabled", "disabled"),
            $(this.updateOverrideBtnSelector).show(),
            $(this.cancelOverrideBtnSelector).show(),
            $(this.addOverrideBtnSelector).hide(),
            $(this.editOverrideBtnSelector).hide()
        }
        ,
        t.prototype.updateOverride = function() {
            if (this.isUpdateMode = !1,
            this.isFormValid()) {
                this.kendoGridRowReorder.updateOrderForGridData();
                var t = $(this.overridesGridSelector).data("kendoGrid").dataSource.getByUid(this.rowForEditUid)
                  , e = this.getOverrideObjectFilledWithInputs();
                e.OverrideIndex = t.OverrideIndex,
                e.Id = t.Id,
                e.OrderId = t.OrderId,
                e.SystemOverrideCertificateId = t.SystemOverrideCertificateId,
                $(this.overridesGridSelector).data("kendoGrid").dataSource.remove(t),
                $(this.overridesGridSelector).data("kendoGrid").dataSource.add(e),
                $(this.overridesGridSelector).data("kendoGrid").refresh(),
                this.resetInputs(),
                this.resetValidationStates(),
                $(this.updateOverrideBtnSelector).hide(),
                $(this.cancelOverrideBtnSelector).hide(),
                $(this.addOverrideBtnSelector).show(),
                $(this.removeOverrideBtnSelector).hide(),
                $(this.editOverrideBtnSelector).hide(),
                $(this.overrideRadioBtnSelector).removeAttr("disabled"),
                this.rowForEditUid = null
            }
        }
        ,
        t.prototype.getOverrideObjectFilledWithInputs = function() {
            var t = this;
            return {
                TagNumber: $(t.tagNumberSelector).val(),
                Description: $(t.descriptionSelector).val(),
                OverrideTypeId: $(t.overrideTypeSelector).val(),
                OverrideType: {
                    Title: $(t.overrideTypeSelector).data("kendoDropDownList").text()
                },
                OverrideMethodId: $(t.overrideMethodSelector).val(),
                OverrideMethod: {
                    Title: $(t.overrideMethodSelector).data("kendoDropDownList").text()
                },
                Comment: $(t.commentSelector).val(),
                OverrideAppliedStateId: $(t.appliedStateSelector).val(),
                OverrideAppliedState: {
                    Title: $(t.appliedStateSelector).data("kendoDropDownList").text()
                },
                OverrideRemovedStateId: $(t.removedStateSelector).val(),
                OverrideRemovedState: {
                    Title: $(t.removedStateSelector).data("kendoDropDownList").text()
                },
                CurrentOverrideStateId: $(t.currentStateSelector).val(),
                CurrentState: {
                    Title: $(t.currentStateSelector).data("kendoDropDownList").text()
                },
                AdditionalValueAppliedState: $(t.additionalValueAppliedSelector).val()
            }
        }
        ,
        t.prototype.resetInputs = function() {
            $(this.overrideIndexLabelSelector).html(this.newText),
            $(this.tagNumberSelector).val(""),
            $(this.descriptionSelector).val(""),
            $(this.overrideTypeSelector).data("kendoDropDownList").value(null),
            $(this.overrideMethodSelector).data("kendoDropDownList").value(null),
            $(this.appliedStateSelector).data("kendoDropDownList").value(null),
            $(this.removedStateSelector).data("kendoDropDownList").value(null),
            $(this.currentStateSelector).data("kendoDropDownList").select(0),
            $(this.commentSelector).val(""),
            $(this.additionalValueAppliedSelector).val("")
        }
        ,
        t.prototype.optimizeOrderId = function() {
            for (var t = $(this.overridesGridSelector).data("kendoGrid"), o = t.dataSource.data(), e = function(e) {
                o.find(function(t) {
                    return t.OrderId === e
                }) || o.forEach(function(t) {
                    return t.OrderId > e && t.OrderId--
                })
            }, i = 1; i <= this.GetMaxOverrideIndex(); i++)
                e(i);
            t.refresh()
        }
        ,
        t.prototype.resetValidationStates = function() {
            var t = this;
            $(".k-valid, .k-invalid").each(function() {
                t.setValidationState(this, !1)
            })
        }
        ,
        t.prototype.setValidationState = function(t, e) {
            $(t).closest("tbody").find("[valid-state-for=" + $(t).attr("id") + "]").children("img").attr("src", ["/images/star.svg", "/images/star-green.svg"][+e])
        }
        ,
        t.prototype.hideAdditionalValueTextBox = function(t) {
            $(t).val(""),
            $(t).hide()
        }
        ,
        t.prototype.updateAdditionalValue = function(t, e) {
            var o = $(t).val();
            o === this.overrideFrozenStateId.toString() || o === this.overrideForcedStateId.toString() ? $(e).show() : this.hideAdditionalValueTextBox(e)
        }
        ,
        t
    }(Common.CascadeLists);
    t.EditOverrides = e
}(SOC || (SOC = {})),
function(t) {
    var e = function() {
        function t(t) {
            var e = this;
            this.initializeConfiguration(t),
            $(document).ready(function() {
                checkAndShowValidationContainer(),
                $(e.configuration.selectors.confirmButton).click(function() {
                    e.onConfirmButtonClick()
                }),
                $(e.configuration.selectors.overridesGrid).on("change", e.configuration.selectors.unabletoImplementCheckbox, function(t) {
                    return e.onUnableToImplementCheckboxChange(t)
                })
            })
        }
        return t.prototype.onUnableToImplementCheckboxChange = function(t) {
            var e = $(t.currentTarget).parents("tr")
              , o = e.find(this.configuration.selectors.reasonInput)
              , i = e.find(this.configuration.selectors.overrideCurrentState)
              , n = e.find(this.configuration.selectors.confirmUpdateDropdownList);
            $(t.currentTarget).prop("checked") ? (o.removeAttr("disabled"),
            i.prop("selectedIndex", 0),
            n.prop("disabled", "disabled")) : (n.removeAttr("disabled"),
            o.prop("disabled", "disabled"),
            o.val(""))
        }
        ,
        t.prototype.onGridDataBound = function() {
            var n = this
              , r = this;
            $(r.configuration.selectors.confirmUpdateDropdownList).each(function(t, e) {
                var o = $(e).parents("tr")
                  , i = $(r.configuration.selectors.overridesGrid).getKendoGrid().dataItem(o);
                $.post(r.configuration.url.getAvailableOverrideStates, {
                    certificateId: $(n.configuration.selectors.certificateId).val(),
                    overrideId: i.get(r.configuration.viewModelFields.id)
                }, function(t) {
                    t.forEach(function(t) {
                        $(e).append(kendo.format('<option value="{0}">{1}</option>', t.Id, t.Title))
                    }),
                    $(e).val(t[0].Id).change()
                })
            })
        }
        ,
        t.prototype.onConfirmButtonClick = function() {
            var t = this.checkAllUtaReasonFilled();
            new Core.ShowValidation(this.configuration.validation.notFilledReasonMessage,!t);
            t && this.saveDataAndSubmitForm()
        }
        ,
        t.prototype.saveDataAndSubmitForm = function() {
            this.saveData(),
            $("form").submit()
        }
        ,
        t.prototype.saveData = function() {
            var t = $(this.configuration.selectors.overridesGrid).getKendoGrid()
              , e = this.getOverridesData(t);
            $(this.configuration.selectors.overridesJson).val(JSON.stringify(e))
        }
        ,
        t.prototype.getOverridesData = function(s) {
            var l = this
              , d = [];
            return $(l.configuration.selectors.confirmUpdateDropdownList).each(function(t, e) {
                var o, i = $(e).closest("tr"), n = i.find(l.configuration.selectors.confirmUpdateDropdownList).val(), r = s.dataItem(i), a = l.getProcessedInputValue(i.find(l.configuration.selectors.reasonInput)), c = null === (o = i.find(l.configuration.selectors.unabletoImplementCheckbox).get()[0]) || void 0 === o ? void 0 : o.checked;
                d.push({
                    Id: r.get(l.configuration.viewModelFields.id),
                    CurrentOverrideStateId: n,
                    UnableToImplementReason: a,
                    IsUnableToImplement: c
                })
            }),
            d
        }
        ,
        t.prototype.getProcessedInputValue = function(t) {
            var e = t.val();
            return void 0 !== e && e.trim() || null
        }
        ,
        t.prototype.checkAllUtaReasonFilled = function() {
            var o = this
              , i = !0;
            return $(o.configuration.selectors.unableToImplementCheckedCheckbox).each(function(t, e) {
                !!$(e).parents("tr").find(o.configuration.selectors.reasonInput).first().val().trim() || (i = !1)
            }),
            i
        }
        ,
        t.prototype.initializeConfiguration = function(t) {
            this.configuration = $.extend(!0, {
                selectors: {
                    overridesGrid: "#Overrides",
                    overridesJson: "#OverridesJson",
                    overrideCurrentState: "#CurrentStateSelect",
                    certificateId: "#Id",
                    confirmButton: "[name=confirm]",
                    confirmUpdateDropdownList: ".confirm-position select",
                    reasonInput: ".reason input",
                    unabletoImplementCheckbox: ".uti input[type=checkbox]",
                    unableToImplementNotCheckedCheckbox: ".uti input[type=checkbox]:not(:checked)",
                    unableToImplementCheckedCheckbox: ".uti input[type=checkbox]:checked"
                },
                viewModelFields: {
                    id: "Id",
                    currentStateId: "CurrentOverrideStateId"
                },
                validation: {
                    notFilledReasonMessage: ""
                },
                pageInformation: {
                    returnUrl: "/"
                }
            }, t)
        }
        ,
        t
    }();
    t.UpdateOverride = e
}(SOC || (SOC = {}));
var __extends = this && this.__extends || function() {
    var i = function(t, e) {
        return (i = Object.setPrototypeOf || {
            __proto__: []
        }instanceof Array && function(t, e) {
            t.__proto__ = e
        }
        || function(t, e) {
            for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o])
        }
        )(t, e)
    };
    return function(t, e) {
        if ("function" != typeof e && null !== e)
            throw new TypeError("Class extends value " + String(e) + " is not a constructor or null");
        function o() {
            this.constructor = t
        }
        i(t, e),
        t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype,
        new o)
    }
}(), Override, SOC;
!function(t) {
    var e = function(o) {
        function t(t) {
            var e = o.call(this, t) || this;
            return $(document).ready(function() {
                $(e.configuration.selectors.exportButton).click(function() {
                    exportCsv(e.configuration.selectors.searchTable, e.configuration.url.exportAction)
                })
            }),
            e
        }
        return __extends(t, o),
        t.prototype.onDataBound = function(t) {
            var e = t.sender.dataSource.total();
            $(this.configuration.selectors.searchResult).text(e),
            $("#ExportPanel").toggle(0 !== e)
        }
        ,
        t.prototype.initializeConfiguration = function(t) {
            o.prototype.initializeConfiguration.apply(this, arguments),
            this.configuration = $.extend(!0, {
                selectors: {
                    searchTable: "#Overrides",
                    exportButton: "#Export"
                },
                attributes: {
                    disableByOwner: "[data-disable-by-owner]",
                    owned: "[owned][filtermethod]",
                    ignoreIfRelatedFieldIsNotEmpty: "ignore-if-related-field-not-empty"
                }
            }, this.configuration)
        }
        ,
        t
    }(Common.SearchFunctions);
    t.OverrideSearchFunctions = e
}(Override || (Override = {})),
function(t) {
    var e = function() {
        function t(t) {
            var e = this;
            $(t.selectors.selectAllOverrides).change(function() {
                e.changeStateAllCheckboxes()
            }),
            $(t.selectors.selectorsToTrackChanges).change(function() {
                e.changeStatePrintTagsBtn()
            }),
            $(t.selectors.printTagsBtn).click(function() {
                e.printOverridesTags()
            }),
            $(t.selectors.printListBtn).click(function() {
                e.printOverridesList()
            }),
            this.initializeConfiguration(t),
            initializeHeaderCheckBoxChangeEvent()
        }
        return t.prototype.printOverridesTags = function() {
            var o = $(".k-grid").getKendoGrid()
              , t = $(".k-checkbox:checked").closest("tbody tr").toArray().reduce(function(t, e) {
                return t.push(o.dataItem(e).Id),
                t
            }, []);
            assignLocation(this.configuration.urls.printTagsUrl + JSON.stringify(t))
        }
        ,
        t.prototype.changeStatePrintTagsBtn = function() {
            $(this.configuration.selectors.printTagsBtn).prop("disabled", !$(this.configuration.selectors.chosenOverrides).is(":checked"))
        }
        ,
        t.prototype.changeStateAllCheckboxes = function() {
            $(this.configuration.selectors.chosenPoints).prop("checked", $(this.configuration.selectors.selectAllOverrides).is(":checked"))
        }
        ,
        t.prototype.printOverridesList = function() {
            $("<form method='post' action='" + this.configuration.urls.printListUrl + "'>\n                <input name='systemOverrideCertificateId' value='" + this.configuration.data.certificateId + "'/>\n                <input name='overrideTypeId' value='" + this.configuration.data.overrideTypeId + "'/>\n                <input name='currentOverrideStateId'" + this.configuration.data.currentOverrideStateId + "/>\n               </form>").appendTo($("body")).submit().remove()
        }
        ,
        t.prototype.initializeConfiguration = function(t) {
            this.configuration = t
        }
        ,
        t
    }();
    t.PrintOverrides = e
}(SOC || (SOC = {}));
