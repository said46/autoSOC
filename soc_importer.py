# soc_importer.py
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.common.exceptions import (TimeoutException, ElementNotInteractableException, NoSuchWindowException)
import openpyxl as xl
import json
import configparser

import logging

from base_web_bot import BaseWebBot
from soc_base_mixin import SOC_BaseMixin


class SOC_Importer(BaseWebBot, SOC_BaseMixin):
    """
    Specialized bot for importing SOC (Safety Override Control) overrides from Excel files.
    
    This importer reads override data from exported Excel files and automatically
    populates them back into the web application using Kendo UI controls and
    form submission.
    
    Key features:
    - Excel file parsing with flexible column mapping
    - Kendo dropdown automation and data selection
    - Bulk override processing with error handling
    - User confirmation workflow management
    """
    
    def __init__(self, soc_id=None):
        """Initialize the SOC importer with combined base and mixin functionality."""
        BaseWebBot.__init__(self)
        SOC_BaseMixin.__init__(self)
        self.load_configuration()
        # SOC_base_link will be constructed from the configured base_link
        self.SOC_base_link = self.base_link + r"Soc/EditOverrides/"

        # Use provided SOC ID or maintain existing logic
        if soc_id:
            self.SOC_id = soc_id

    def set_soc_id(self, soc_id: str) -> None:
        """Set SOC ID externally for unified workflow."""
        self.SOC_id = soc_id

    @property
    def base_link(self) -> str:
        """Abstract property implementation - returns the base URL for navigation."""
        return self._base_link

    # ===== CONFIGURATION MANAGEMENT =====
    
    def load_configuration(self) -> None:
        """
        Load configuration settings from SOC.ini file.
        
        Reads user credentials, application URLs, and timeout settings from
        the SOC.ini configuration file.
        """
        config = configparser.ConfigParser(interpolation=None)
        config.read(self.config_file, encoding="utf8")

        # Load user credentials from Settings section
        self.user_name = config.get('Settings', 'user_name', fallback='xxxxxx')
        
        # Use mixin's password processing for consistent password handling
        raw_password = config.get('Settings', 'password', fallback='******')
        self.password = self.process_password(raw_password)
        
        # Validate password processing
        if '\n' in self.password:
            self.password = 'INCORRECT PASSWORD'
            
        # Load base link for navigation
        self._base_link = config.get('Settings', 'base_link', fallback='http://eptw.sakhalinenergy.ru/')
        
        # Load timing configuration
        self.MAX_WAIT_PAGE_LOAD_DELAY_SECONDS = config.getint('Settings', 'MAX_WAIT_PAGE_LOAD_DELAY_SECONDS', fallback=20)
        self.MAX_WAIT_USER_INPUT_DELAY_SECONDS = config.getint('Settings', 'MAX_WAIT_USER_INPUT_DELAY_SECONDS', fallback=300)
        
        logging.info(f"✅ Configuration loaded from {self.config_file}")
    
    # ===== DATA LOADING METHODS =====
    
    def load_overrides_from_export(self) -> None:
        """
        Load overrides from the enhanced export file format (overrides.xlsx).
        
        Parses Excel files generated by SOC_Exporter with comprehensive field mapping
        to extract override data for re-import into the web application.
        
        The method expects the Excel file to follow the export format with:
        - Metadata in rows 1-4
        - Column headers in row 6
        - Data starting from row 7
        
        Raises:
            Exception: If file cannot be loaded or parsed correctly
        """
        try:
            excel_file_path = 'soc_resources/overrides.xlsx'
            logging.info(f"📂 Loading overrides from export file: {excel_file_path}")
            wb = xl.load_workbook(excel_file_path)
            
            # Get the first sheet (SOC data sheet)
            sheet = wb.active
            logging.info(f"📊 Using sheet: '{sheet.title}' with {sheet.max_row} rows")
            
            # Find the data headers (row 6 in the new format)
            header_row = 6
            data_start_row = header_row + 1
            
            # Read headers to map columns
            headers = []
            for col in range(1, sheet.max_column + 1):
                header_value = sheet.cell(header_row, col).value
                if header_value:
                    headers.append(header_value)
            
            logging.info(f"📋 Found columns: {', '.join(headers)}")
            
            # Map header names to our expected field names
            header_mapping = {
                'TagNumber': 'TagNumber',
                'Description': 'Description', 
                'OverrideType': 'OverrideType',
                'OverrideMethod': 'OverrideMethod',
                'AppliedState': 'AppliedState',
                'RemovedState': 'RemovedState',
                'Comment': 'Comment',
                'AdditionalValueAppliedState': 'AdditionalValueAppliedState',
                'AdditionalValueRemovedState': 'AdditionalValueRemovedState',
                'CurrentState': 'CurrentState'
            }
            
            # Create column index mapping
            column_indices = {}
            for header_name, field_name in header_mapping.items():
                for idx, actual_header in enumerate(headers):
                    if actual_header == header_name:
                        column_indices[field_name] = idx
                        break
            
            # Load overrides from data rows
            self.list_of_overrides = []
            empty_row_count = 0
            
            for row in range(data_start_row, sheet.max_row + 1):
                # Check if this row has data (TagNumber is required)
                tag_number = sheet.cell(row, column_indices['TagNumber'] + 1).value if 'TagNumber' in column_indices else None
                
                if tag_number in (None, ""):
                    empty_row_count += 1
                    if empty_row_count >= 3:  # Stop after 3 consecutive empty rows
                        break
                    continue
                
                empty_row_count = 0  # Reset empty counter when we find data
                
                # Extract all fields using the column mapping
                override_data = {}
                for field_name, col_idx in column_indices.items():
                    value = sheet.cell(row, col_idx + 1).value
                    override_data[field_name] = value if value is not None else ""
                
                # Create the override structure expected by add_override method
                override = {
                    "TagNumber": override_data.get('TagNumber', ''),
                    "Description": override_data.get('Description', ''),
                    "OverrideType": override_data.get('OverrideType', ''),
                    "OverrideMethod": override_data.get('OverrideMethod', ''),
                    "Comment": override_data.get('Comment', ''),
                    "AppliedState": override_data.get('AppliedState', ''),
                    "AdditionalValueAppliedState": override_data.get('AdditionalValueAppliedState', ''),
                    "RemovedState": override_data.get('RemovedState', ''),
                    "AdditionalValueRemovedState": override_data.get('AdditionalValueRemovedState', '')
                }
                
                # Convert empty strings to None for optional fields
                for field in ['Comment', 'AdditionalValueAppliedState', 'AdditionalValueRemovedState', 'RemovedState']:
                    if override[field] == "":
                        override[field] = None
                
                self.list_of_overrides.append(override)
                logging.debug(f"📝 Loaded override: {override['TagNumber']} - {override['Description'][:50]}...")
                     
            logging.info(f"✅ Successfully loaded {len(self.list_of_overrides)} overrides from export file")
            
            # Log summary of loaded data
            if self.list_of_overrides:
                first_override = self.list_of_overrides[0]
                logging.info(f"📊 Sample override: Tag={first_override['TagNumber']}, "
                           f"Type={first_override['OverrideType']}, "
                           f"Method={first_override['OverrideMethod']}")
            
        except Exception as e:
            logging.error(f"❌ Failed to load overrides from export file: {e}")
            self.inject_error_message("❌ Failed to load overrides from export file")
            raise
    
    # ===== KENDO UI AUTOMATION METHODS =====
    
    def get_kendo_selected_item(self, element_id: str) -> dict:
        """
        Get currently selected item from Kendo dropdown.
        
        Args:
            element_id: HTML ID of the Kendo dropdown element
            
        Returns:
            Dictionary containing the selected item data, or empty dict if none selected
        """
        script = """
        var dropdown = $('#%s').data('kendoDropDownList');
        if (dropdown) {
            var selected = dropdown.dataItem();
            return selected ? JSON.stringify(selected) : null;
        }
        return null;
        """ % element_id
        
        try:
            result = self.driver.execute_script(script)
            return json.loads(result) if result else {}
        except Exception as e:
            logging.error(f"❌ Failed to get selected item: {e}")
            return {}    
    
    def get_kendo_dropdown_data(self, element_id: str) -> list[dict]:
        """
        Get Kendo DropDownList data as list of dictionaries.
        
        Args:
            element_id: HTML ID of the Kendo dropdown element
            
        Returns:
            List of dictionaries containing all available dropdown items
        """
        script = """
            var dropdown = $('#%s').data('kendoDropDownList');
            if (dropdown) {
                var data = dropdown.dataItems();
                return JSON.stringify(data);
            }
            return null;
        """ % element_id

        try:
            result = self.driver.execute_script(script)
            if result:
                return json.loads(result)
            return []
        except Exception as e:
            logging.error(f"❌ Failed to get Kendo dropdown data: {e}")
            return []
    
    def set_kendo_dropdown_value(self, element_id: str, value: str) -> bool:
        """
        Set Kendo dropdown value using Kendo API.
        
        Args:
            element_id: HTML ID of the Kendo dropdown element
            value: The value to set in the dropdown
            
        Returns:
            True if value was set successfully, False otherwise
        """
        script = """
            var dropdown = $('#%s').data('kendoDropDownList');
            if (dropdown) {
                dropdown.value(arguments[0]);
                dropdown.trigger('change');
                return true;
            }
            return false;
        """ % element_id
        
        try:
            result = self.driver.execute_script(script, value)
            if result:
                # Wait for value to be set
                WebDriverWait(self.driver, 5).until(
                    lambda _: self.driver.execute_script(
                        "return $('#%s').data('kendoDropDownList').value() === arguments[0];" % element_id,
                        value
                    )
                )
                logging.info(f"✅ Kendo dropdown {element_id} set to: {value}")
                return True
            return False
        except Exception as e:
            logging.error(f"❌ Failed to set Kendo dropdown {element_id}: {e}")
            return False
    
    def wait_for_kendo_dropdown_ready(self, element_id: str, timeout: int = 10) -> bool:
        """
        Wait for Kendo dropdown to be initialized and ready.
        
        Args:
            element_id: HTML ID of the Kendo dropdown element
            timeout: Maximum time to wait in seconds
            
        Returns:
            True if dropdown is ready within timeout, False otherwise
        """
        try:
            WebDriverWait(self.driver, timeout).until(
                lambda _: self.driver.execute_script(
                    "return $('#%s').data('kendoDropDownList') !== undefined;" % element_id
                )
            )
            logging.info(f"✅ Kendo dropdown {element_id} is ready")
            return True
        except TimeoutException:
            logging.error(f"❌ Kendo dropdown {element_id} not ready within {timeout} seconds")
            return False
    
    def select_kendo_dropdown_by_text(self, element_id: str, text: str) -> bool:
        """
        Select Kendo dropdown item by displayed text.
        
        Args:
            element_id: HTML ID of the Kendo dropdown element
            text: The display text to search for in dropdown items
            
        Returns:
            True if item was selected successfully, False otherwise
        """
        try:
            # Wait for dropdown to be ready
            if not self.wait_for_kendo_dropdown_ready(element_id):
                return False
            
            # Get all dropdown data to find matching item
            dropdown_data = self.get_kendo_dropdown_data(element_id)
            if not dropdown_data:
                logging.error(f"❌ No data available in dropdown {element_id}")
                return False
            
            # Find item with matching text
            matching_item = None
            for item in dropdown_data:
                if item.get('Text') == text:
                    matching_item = item
                    break
            
            if not matching_item:
                logging.error(f"❌ Item with text '{text}' not found in dropdown {element_id}")
                logging.debug(f"Available items: {[item.get('Text') for item in dropdown_data]}")
                return False
            
            # Set the value using Kendo API
            value = matching_item.get('Value') or matching_item.get('Text')
            return self.set_kendo_dropdown_value(element_id, value)
            
        except Exception as e:
            logging.error(f"❌ Failed to select '{text}' in dropdown {element_id}: {e}")
            return False    
    
    # ===== NAVIGATION METHODS =====
    
    def navigate_to_edit_overrides(self):
        """
        Navigate to Edit Overrides page for the current SOC.
        
        Constructs the Edit Overrides URL and loads the page for override management.
        """
        try:
            self.driver.get(self.SOC_base_link + self.SOC_id)
            logging.info(f"👆 Navigated to Edit Overrides page for SOC {self.SOC_id}")                           
        except Exception as e:
            logging.error(f"❌ Error navigating to Edit Overrides: {e}")
            raise
    
    # ===== OVERRIDE PROCESSING METHODS =====
    
    def add_override(self, override: dict[str, str]) -> None:
        """
        Add a single override to the SOC using Kendo API methods.
        
        Populates all required and optional fields for an override entry:
        - Tag Number and Description (text fields)
        - Override Type and Method (Kendo dropdowns)
        - Applied and Removed States (Kendo dropdowns)
        - Comments and additional values (optional fields)
        
        Args:
            override: Dictionary containing all override field values
            
        Raises:
            Exception: If any required field cannot be set successfully
        """
        try:
            # Enter Tag Number and Description
            self.driver.find_element(By.ID, "TagNumber").send_keys(override["TagNumber"])
            self.driver.find_element(By.ID, "Description").send_keys(override["Description"])
            
            # Select Override Type using Kendo API
            if not self.select_kendo_dropdown_by_text("OverrideTypeId", override["OverrideType"]):
                logging.error(f"❌ Failed to set OverrideType: {override['OverrideType']}")
                raise Exception(f"Failed to set OverrideType: {override['OverrideType']}")
            
            # Select Override Method using Kendo API
            if not self.select_kendo_dropdown_by_text("OverrideMethodId", override["OverrideMethod"]):
                logging.error(f"❌ Failed to set OverrideMethod: {override['OverrideMethod']}")
                raise Exception(f"Failed to set OverrideMethod: {override['OverrideMethod']}")
            
            # Enter Comment if provided
            if override["Comment"] is not None:
                self.driver.find_element(By.ID, "Comment").send_keys(override["Comment"])
            
            # Select Applied State using Kendo API
            if not self.select_kendo_dropdown_by_text("OverrideAppliedStateId", override["AppliedState"]):
                logging.error(f"❌ Failed to set AppliedState: {override['AppliedState']}")
                raise Exception(f"Failed to set AppliedState: {override['AppliedState']}")
            
            # Enter Additional Value Applied State if provided
            if override["AdditionalValueAppliedState"] is not None:
                try:
                    self.driver.find_element(By.ID, "AdditionalValueAppliedState").send_keys(
                        override["AdditionalValueAppliedState"]
                    )
                except ElementNotInteractableException as e:
                    logging.error(f"❌ Failed to set AdditionalValueAppliedState: {e}")
                    raise
            
            # Select Removed State if provided using Kendo API
            if override["RemovedState"] is not None:
                if not self.select_kendo_dropdown_by_text("OverrideRemovedStateId", override["RemovedState"]):
                    logging.error(f"❌ Failed to set RemovedState: {override['RemovedState']}")
                    raise Exception(f"Failed to set RemovedState: {override['RemovedState']}")
            
            # Enter Additional Value Removed State if provided
            if override["AdditionalValueRemovedState"] is not None:
                self.driver.find_element(By.ID, "AdditionalValueRemovedState").send_keys(
                    override["AdditionalValueRemovedState"]
                )
            
            # Click Add button
            self.driver.find_element(By.ID, "AddOverrideBtn").click()
            
            logging.info(f"✅ Added override: {override['TagNumber']}")
            
        except Exception as e:
            logging.error(f"❌ Error adding override {override.get('TagNumber', 'Unknown')}: {e}")
            raise
    
    def process_all_overrides(self):
        """
        Process all overrides from the export file in sequence.
        
        Iterates through the loaded override list and adds each one to the
        web application. Provides progress logging and comprehensive error handling.
        """
        logging.info(f"📋 Starting to process {len(self.list_of_overrides)} overrides")
        try:
            for i, override in enumerate(self.list_of_overrides, 1):
                logging.info(f"🔄 Processing override {i}/{len(self.list_of_overrides)}: {override['TagNumber']}")           
                self.add_override(override)
                logging.info(f"✅ Successfully processed override {i}: {override['TagNumber']}")

            logging.info("✅ All overrides processed successfully")
            
        except Exception as e:
            logging.error(f"❌ Error processing overrides: {e}")
            raise

        self.wait_for_user_confirmation()
    
    # ===== USER INTERACTION METHODS =====
    
    def wait_for_user_confirmation(self):
        """
        Wait for user to press confirm button after override processing.
        
        Injects a guidance message and waits for the page to transition to the
        home page, indicating the user has pressed the confirm button to
        finalize the import operation.
        """
        msg = '⚠️  Скрипт ожидает нажатия кнопки "Подтвердить".'
        xpath = "//div[@id='bottomWindowButtons']/div"
        self.inject_info_message(msg, (By.XPATH, xpath), {'color': 'lawngreen'})
        try:
            WebDriverWait(self.driver, self.MAX_WAIT_USER_INPUT_DELAY_SECONDS).until(
                EC.title_is(self.EXPECTED_HOME_PAGE_TITLE)
            )
            logging.info("🏁  Confirm pressed, home page loaded")
        except NoSuchWindowException as e:
            logging.error(f"⚠️  User closed the browser window.")
            self.safe_exit()
        except Exception as e:
            logging.error(f"❌ Failed to wait for user input ('Confirm' button): {str(e)}")
            self.inject_error_message(f"❌ Failed to wait for user input ('Confirm' button)")
    
    # ===== MAIN AUTOMATION WORKFLOW =====
    
    def run(self):
        """
        Main method to run the SOC import automation workflow.
        
        Execution sequence:
        1. Navigate to base URL and prepare for authentication
        2. Enter credentials and prepare SOC ID input
        3. Wait for SOC ID input and submit form
        4. Load overrides data from Excel export file
        5. Navigate to Edit Overrides page
        6. Perform security and access checks
        7. Process all overrides from the loaded data
        8. Wait for user confirmation and cleanup
        
        Provides comprehensive error handling and user feedback throughout the process.
        """
        try:            
            logging.info("🚀 Starting SOC_Importer automation")
            
            # Step 1-3: Authentication and SOC ID input
            self.navigate_to_base()
            self.enter_credentials_and_prepare_soc_input()
            self.wait_for_soc_input_and_submit()
            
            # Step 4: Data loading
            self.load_overrides_from_export()
            
            # Step 5-7: Override processing
            self.navigate_to_edit_overrides()
            self.SOC_locked_check()
            self.access_denied_check()
            self.process_all_overrides()
                       
            logging.info("🏁 SOC_Importer automation completed successfully")
        except Exception as e:
            logging.error(f"❌ SOC_Importer automation failed: {e}")
            self.inject_error_message("Error " + f"Automation failed: {e}")
        finally:
            self.driver.quit() 


# Main execution
if __name__ == "__main__":
    # Entry point for script execution
    auto_soc = SOC_Importer()
    auto_soc.run()